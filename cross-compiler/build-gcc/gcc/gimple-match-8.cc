/* Generated automatically by the program `genmatch' from
   a IL pattern matching and simplification description.  */
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-function"

#include "gimple-match-auto.h"

bool
gimple_maybe_cmp (tree t, tree *res_ops, tree (*valueize)(tree) ATTRIBUTE_UNUSED)
{
  const tree type = TREE_TYPE (t);
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (t))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, t))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case LT_EXPR:
	      case LE_EXPR:
	      case EQ_EXPR:
	      case NE_EXPR:
	      case GE_EXPR:
	      case GT_EXPR:
	      case UNORDERED_EXPR:
	      case ORDERED_EXPR:
	      case UNLT_EXPR:
	      case UNLE_EXPR:
	      case UNGT_EXPR:
	      case UNGE_EXPR:
	      case UNEQ_EXPR:
	      case LTGT_EXPR:
	        {
		  tree _p0 = gimple_assign_rhs1 (_a1);
		  _p0 = do_valueize (valueize, _p0);
		  tree _p1 = gimple_assign_rhs2 (_a1);
		  _p1 = do_valueize (valueize, _p1);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { t, _p0, _p1 };
		    {
		      res_ops[0] = captures[0];
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 4, __FILE__, __LINE__, false);
		      return true;
		    }
		  }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _p0 = gimple_assign_rhs1 (_a1);
		  _p0 = do_valueize (valueize, _p0);
		  switch (TREE_CODE (_p0))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p0))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LT_EXPR:
			      case LE_EXPR:
			      case EQ_EXPR:
			      case NE_EXPR:
			      case GE_EXPR:
			      case GT_EXPR:
			      case UNORDERED_EXPR:
			      case ORDERED_EXPR:
			      case UNLT_EXPR:
			      case UNLE_EXPR:
			      case UNGT_EXPR:
			      case UNGE_EXPR:
			      case UNEQ_EXPR:
			      case LTGT_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
				    if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
				      {
					{
					  res_ops[0] = captures[0];
					  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 5, __FILE__, __LINE__, false);
					  return true;
					}
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _p0 = gimple_assign_rhs1 (_a1);
		  _p0 = do_valueize (valueize, _p0);
		  tree _p1 = gimple_assign_rhs2 (_a1);
		  _p1 = do_valueize (valueize, _p1);
		  if (tree_swap_operands_p (_p0, _p1))
		    std::swap (_p0, _p1);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { t, _p0, _p1 };
		    if (INTEGRAL_TYPE_P (type)
 && TYPE_PRECISION (type) == 1
)
		      {
			{
			  res_ops[0] = captures[0];
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 6, __FILE__, __LINE__, false);
			  return true;
			}
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_3 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (type)
)
    {
      gimple_seq *lseq = seq;
      if (lseq
          && (!single_use (captures[0])
              || !single_use (captures[3])))
        lseq = NULL;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail162;
      {
	res_op->set_op (LSHIFT_EXPR, type, 2);
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[1];
	  _o1[1] = captures[4];
	  gimple_match_op tem_op (res_op->cond.any_else (), op, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail162;
	  res_op->ops[0] = _r1;
	}
	res_op->ops[1] = captures[2];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 56, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail162:;
    }
  return false;
}

bool
gimple_simplify_8 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (lseq
      && (!single_use (captures[0])
          || !single_use (captures[1])))
    lseq = NULL;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail167;
  {
    res_op->set_op (BIT_XOR_EXPR, type, 2);
    {
      tree _o1[2], _r1;
      _o1[0] = captures[2];
      _o1[1] = captures[3];
      gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
      tem_op.resimplify (lseq, valueize);
      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
      if (!_r1) goto next_after_fail167;
      res_op->ops[0] = _r1;
    }
    {
      tree _o1[2], _r1;
      {
	tree _o2[1], _r2;
	_o2[0] = captures[4];
	gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o2[0]), _o2[0]);
	tem_op.resimplify (NULL, valueize);
	_r2 = maybe_push_res_to_seq (&tem_op, NULL);
	if (!_r2) goto next_after_fail167;
	_o1[0] = _r2;
      }
      _o1[1] = captures[3];
      gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
      tem_op.resimplify (NULL, valueize);
      _r1 = maybe_push_res_to_seq (&tem_op, NULL);
      if (!_r1) goto next_after_fail167;
      res_op->ops[1] = _r1;
    }
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 61, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail167:;
  return false;
}

bool
gimple_simplify_15 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (lseq
      && (!single_use (captures[0])
          || !single_use (captures[3])))
    lseq = NULL;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail174;
  {
    res_op->set_op (BIT_IOR_EXPR, type, 2);
    res_op->ops[0] = captures[1];
    {
      tree _o1[1], _r1;
      _o1[0] = captures[2];
      gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
      tem_op.resimplify (lseq, valueize);
      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
      if (!_r1) goto next_after_fail174;
      res_op->ops[1] = _r1;
    }
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 68, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail174:;
  return false;
}

bool
gimple_simplify_22 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail181;
      {
	res_op->set_op (BIT_XOR_EXPR, type, 2);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  if (type != TREE_TYPE (_o1[0])
	      && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
	    {
	      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail181;
	    }
	  else
	    _r1 = _o1[0];
	  res_op->ops[0] = _r1;
	}
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[1];
	  gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail181;
	  res_op->ops[1] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 75, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail181:;
    }
  return false;
}

bool
gimple_simplify_27 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (bitop))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (((TREE_CODE (captures[3]) == INTEGER_CST
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && (int_fits_type_p (captures[3], TREE_TYPE (captures[1]))
 || tree_nop_conversion_p (TREE_TYPE (captures[1]), type)))
 || types_match (captures[1], captures[3]))
 && !POINTER_TYPE_P (TREE_TYPE (captures[1]))
 && !VECTOR_TYPE_P (TREE_TYPE (captures[1]))
 && TREE_CODE (TREE_TYPE (captures[1])) != OFFSET_TYPE
 && (bitop != BIT_AND_EXPR ||
1
)
 && (
 TYPE_PRECISION (TREE_TYPE (captures[1])) < TYPE_PRECISION (type)
 || (
1
 && TYPE_PRECISION (TREE_TYPE (captures[1])) == TYPE_PRECISION (type))
 || GET_MODE_CLASS (TYPE_MODE (type)) != MODE_INT
 || !type_has_mode_precision_p (type)
 || (
1
 && TREE_CODE (captures[3]) != INTEGER_CST
 && tree_nop_conversion_p (type, TREE_TYPE (captures[1]))
 && single_use (captures[0])
 && single_use (captures[2])))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail186;
      {
	res_op->set_op (NOP_EXPR, type, 1);
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[1];
	  {
	    tree _o2[1], _r2;
	    _o2[0] = captures[3];
	    if (TREE_TYPE (_o1[0]) != TREE_TYPE (_o2[0])
	        && !useless_type_conversion_p (TREE_TYPE (_o1[0]), TREE_TYPE (_o2[0])))
	      {
		gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (_o1[0]), _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail186;
	      }
	    else
	      _r2 = _o2[0];
	    _o1[1] = _r2;
	  }
	  gimple_match_op tem_op (res_op->cond.any_else (), bitop, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail186;
	  res_op->ops[0] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 80, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail186:;
    }
  return false;
}

bool
gimple_simplify_39 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (icmp),
 const enum tree_code ARG_UNUSED (ncmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 enum tree_code ic = invert_tree_comparison
 (cmp, HONOR_NANS (captures[0]));
      if (ic == icmp
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail201;
	  {
	    res_op->set_op (icmp, type, 2);
	    res_op->ops[0] = captures[0];
	    res_op->ops[1] = captures[1];
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 93, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail201:;
	}
      else
	{
	  if (ic == ncmp
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail202;
	      {
		res_op->set_op (ncmp, type, 2);
		res_op->ops[0] = captures[0];
		res_op->ops[1] = captures[1];
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 94, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail202:;
	    }
	}
  }
  return false;
}

bool
gimple_simplify_45 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (outer_op),
 const enum tree_code ARG_UNUSED (inner_op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (real_zerop (captures[2])
 && real_zerop (captures[3])
 && !HONOR_SIGN_DEPENDENT_ROUNDING (type)
)
    {
      {
 bool inner_plus = ((inner_op == PLUS_EXPR)
 ^ REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (captures[2])));
 bool outer_plus
 = ((outer_op == PLUS_EXPR)
 ^ REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (captures[3])));
	  if (outer_plus && !inner_plus
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail210;
	      {
		res_op->set_op (outer_op, type, 2);
		res_op->ops[0] = captures[1];
		res_op->ops[1] = captures[3];
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 102, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail210:;
	    }
	  else
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail211;
	      {
		tree tem;
		tem = captures[0];
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 103, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail211:;
	    }
      }
    }
  return false;
}

bool
gimple_simplify_55 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (inner_op),
 const enum tree_code ARG_UNUSED (neg_inner_op),
 const enum tree_code ARG_UNUSED (outer_op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!TYPE_SATURATING (type)
)
    {
      if ((!FLOAT_TYPE_P (type) || flag_associative_math)
 && !FIXED_POINT_TYPE_P (type)
)
	{
	  if (!ANY_INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_WRAPS (type)
)
	    {
	      if (!CONSTANT_CLASS_P (captures[0])
)
		{
		  if (outer_op == PLUS_EXPR
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail222;
		      {
			res_op->set_op (PLUS_EXPR, type, 2);
			{
			  tree _o1[1], _r1;
			  _o1[0] = captures[0];
			  gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, type, _o1[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r1) goto next_after_fail222;
			  res_op->ops[0] = _r1;
			}
			{
			  tree _o1[2], _r1;
			  _o1[0] = captures[2];
			  {
			    tree _o2[1], _r2;
			    _o2[0] = captures[1];
			    gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, type, _o2[0]);
			    tem_op.resimplify (lseq, valueize);
			    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
			    if (!_r2) goto next_after_fail222;
			    _o1[1] = _r2;
			  }
			  gimple_match_op tem_op (res_op->cond.any_else (), inner_op, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			  tem_op.resimplify (NULL, valueize);
			  _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			  if (!_r1) goto next_after_fail222;
			  res_op->ops[1] = _r1;
			}
			res_op->resimplify (lseq, valueize);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 114, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail222:;
		    }
		  else
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail223;
		      {
			res_op->set_op (MINUS_EXPR, type, 2);
			{
			  tree _o1[1], _r1;
			  _o1[0] = captures[0];
			  gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, type, _o1[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r1) goto next_after_fail223;
			  res_op->ops[0] = _r1;
			}
			{
			  tree _o1[2], _r1;
			  _o1[0] = captures[2];
			  {
			    tree _o2[1], _r2;
			    _o2[0] = captures[1];
			    gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, type, _o2[0]);
			    tem_op.resimplify (lseq, valueize);
			    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
			    if (!_r2) goto next_after_fail223;
			    _o1[1] = _r2;
			  }
			  gimple_match_op tem_op (res_op->cond.any_else (), neg_inner_op, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			  tem_op.resimplify (NULL, valueize);
			  _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			  if (!_r1) goto next_after_fail223;
			  res_op->ops[1] = _r1;
			}
			res_op->resimplify (lseq, valueize);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 115, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail223:;
		    }
		}
	    }
	  else
	    {
	      if (!ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[0]))
)
		{
		  if (outer_op == PLUS_EXPR
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail224;
		      {
			res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
			{
			  tree _o1[2], _r1;
			  _o1[0] = captures[0];
			  {
			    tree _o2[2], _r2;
			    {
			      tree _o3[1], _r3;
			      _o3[0] = captures[2];
			      gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, TREE_TYPE (_o1[0]), _o3[0]);
			      tem_op.resimplify (lseq, valueize);
			      _r3 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r3) goto next_after_fail224;
			      _o2[0] = _r3;
			    }
			    _o2[1] = captures[1];
			    gimple_match_op tem_op (res_op->cond.any_else (), inner_op, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r2 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r2) goto next_after_fail224;
			    _o1[1] = _r2;
			  }
			  gimple_match_op tem_op (res_op->cond.any_else (), PLUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			  tem_op.resimplify (lseq, valueize);
			  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r1) goto next_after_fail224;
			  res_op->ops[0] = _r1;
			}
			res_op->resimplify (lseq, valueize);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 116, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail224:;
		    }
		  else
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail225;
		      {
			res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
			{
			  tree _o1[2], _r1;
			  _o1[0] = captures[0];
			  {
			    tree _o2[2], _r2;
			    {
			      tree _o3[1], _r3;
			      _o3[0] = captures[2];
			      gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, TREE_TYPE (_o1[0]), _o3[0]);
			      tem_op.resimplify (lseq, valueize);
			      _r3 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r3) goto next_after_fail225;
			      _o2[0] = _r3;
			    }
			    _o2[1] = captures[1];
			    gimple_match_op tem_op (res_op->cond.any_else (), neg_inner_op, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r2 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r2) goto next_after_fail225;
			    _o1[1] = _r2;
			  }
			  gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			  tem_op.resimplify (lseq, valueize);
			  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r1) goto next_after_fail225;
			  res_op->ops[0] = _r1;
			}
			res_op->resimplify (lseq, valueize);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 117, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail225:;
		    }
		}
	      else
		{
		  if (types_match (type, captures[0]) && !TYPE_OVERFLOW_SANITIZED (type)
)
		    {
		      {
 tree cst = const_binop (outer_op == inner_op
 ? PLUS_EXPR : MINUS_EXPR,
 type, captures[1], captures[2]);
			  if (cst
)
			    {
			      if (INTEGRAL_TYPE_P (type) && !TREE_OVERFLOW (cst)
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail226;
				  {
				    res_op->set_op (inner_op, type, 2);
				    res_op->ops[0] = captures[0];
				    res_op->ops[1] =  cst;
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 118, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail226:;
				}
			      else
				{
				  if (INTEGRAL_TYPE_P (type)
 && wi::to_wide (cst) == wi::min_value (type)
)
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail227;
				      {
					res_op->set_op (neg_inner_op, type, 2);
					res_op->ops[0] = captures[0];
					res_op->ops[1] =  wide_int_to_tree (type, wi::to_wide (cst));
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 119, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail227:;
				    }
				  else
				    {
				      {
 tree utype = unsigned_type_for (type);
					  if (utype
)
					    {
					      gimple_seq *lseq = seq;
					      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail228;
					      {
						res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
						{
						  tree _o1[2], _r1;
						  {
						    tree _o2[1], _r2;
						    _o2[0] = captures[0];
						    gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, utype, _o2[0]);
						    tem_op.resimplify (lseq, valueize);
						    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r2) goto next_after_fail228;
						    _o1[0] = _r2;
						  }
						  {
						    tree _o2[1], _r2;
						    _o2[0] =  TREE_OVERFLOW (cst)
 ? drop_tree_overflow (cst) : cst;
						    gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, utype, _o2[0]);
						    tem_op.resimplify (lseq, valueize);
						    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r2) goto next_after_fail228;
						    _o1[1] = _r2;
						  }
						  gimple_match_op tem_op (res_op->cond.any_else (), inner_op, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						  tem_op.resimplify (lseq, valueize);
						  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
						  if (!_r1) goto next_after_fail228;
						  res_op->ops[0] = _r1;
						}
						res_op->resimplify (lseq, valueize);
						if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 120, __FILE__, __LINE__, true);
						return true;
					      }
next_after_fail228:;
					    }
				      }
				    }
				}
			    }
		      }
		    }
		}
	    }
	}
    }
  return false;
}

bool
gimple_simplify_100 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (bitop),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[2]))
 && TYPE_PRECISION (TREE_TYPE (captures[0])) == TYPE_PRECISION (TREE_TYPE (captures[2]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail282;
      {
	res_op->set_op (cmp, type, 2);
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[0];
	  {
	    tree _o2[1], _r2;
	    _o2[0] = captures[2];
	    if (TREE_TYPE (_o1[0]) != TREE_TYPE (_o2[0])
	        && !useless_type_conversion_p (TREE_TYPE (_o1[0]), TREE_TYPE (_o2[0])))
	      {
		gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (_o1[0]), _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail282;
	      }
	    else
	      _r2 = _o2[0];
	    _o1[1] = _r2;
	  }
	  gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail282;
	  res_op->ops[0] = _r1;
	}
	res_op->ops[1] = captures[1];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 173, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail282:;
    }
  return false;
}

bool
gimple_simplify_106 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (lseq
      && (!single_use (captures[1])))
    lseq = NULL;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail288;
  {
    res_op->set_op (BIT_IOR_EXPR, type, 2);
    res_op->ops[0] = captures[0];
    {
      tree _o1[1], _r1;
      _o1[0] = captures[2];
      gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
      tem_op.resimplify (lseq, valueize);
      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
      if (!_r1) goto next_after_fail288;
      res_op->ops[1] = _r1;
    }
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 178, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail288:;
  return false;
}

bool
gimple_simplify_113 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail295;
  {
    res_op->set_op (BIT_IOR_EXPR, type, 2);
    res_op->ops[0] = captures[0];
    res_op->ops[1] = captures[3];
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 184, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail295:;
  return false;
}

bool
gimple_simplify_121 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail303;
  {
    tree tem;
    tem = captures[0];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 187, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail303:;
  return false;
}

bool
gimple_simplify_128 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_nop_conversion_p (type, TREE_TYPE (captures[3]))
 && tree_nop_conversion_p (type, TREE_TYPE (captures[6]))
)
    {
      if (single_use (captures[4]) && single_use (captures[5])
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail312;
	  {
	    res_op->set_op (op, type, 2);
	    res_op->ops[0] = captures[0];
	    {
	      tree _o1[1], _r1;
	      _o1[0] = captures[6];
	      if (type != TREE_TYPE (_o1[0])
	          && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
		{
		  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail312;
	        }
	      else
	        _r1 = _o1[0];
	      res_op->ops[1] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 192, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail312:;
	}
      else
	{
	  if (single_use (captures[0]) && single_use (captures[1])
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail313;
	      {
		res_op->set_op (op, type, 2);
		{
		  tree _o1[1], _r1;
		  _o1[0] = captures[3];
		  if (type != TREE_TYPE (_o1[0])
		      && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
		    {
		      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
		      tem_op.resimplify (lseq, valueize);
		      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		      if (!_r1) goto next_after_fail313;
		    }
		  else
		    _r1 = _o1[0];
		  res_op->ops[0] = _r1;
		}
		res_op->ops[1] = captures[4];
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 193, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail313:;
	    }
	}
    }
  return false;
}

bool
gimple_simplify_141 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (icmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (type)
 && invert_tree_comparison (cmp, HONOR_NANS (captures[1])) == icmp
 && canonicalize_math_after_vectorization_p ()
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail328;
      {
	res_op->set_op (BIT_AND_EXPR, type, 2);
	{
	  tree _o1[3], _r1;
	  _o1[0] = captures[0];
	  _o1[1] = captures[3];
	  _o1[2] = captures[5];
	  gimple_match_op tem_op (res_op->cond.any_else (), COND_EXPR, TREE_TYPE (_o1[1]), _o1[0], _o1[1], _o1[2]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail328;
	  res_op->ops[0] = _r1;
	}
	res_op->ops[1] =  build_one_cst (type);
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 201, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail328:;
    }
  return false;
}

bool
gimple_simplify_146 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail336;
  {
    tree tem;
    tem = captures[2];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 209, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail336:;
  return false;
}

bool
gimple_simplify_151 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (code2),
 const enum tree_code ARG_UNUSED (code1))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if ((TREE_CODE (captures[2]) == INTEGER_CST
 && TREE_CODE (captures[4]) == INTEGER_CST)
 || ((INTEGRAL_TYPE_P (TREE_TYPE (captures[2]))
 || POINTER_TYPE_P (TREE_TYPE (captures[2])))
 && operand_equal_p (captures[2], captures[4]))
)
    {
      {
 int cmp = 0;
 if (TREE_CODE (captures[2]) == INTEGER_CST
 && TREE_CODE (captures[4]) == INTEGER_CST)
 cmp = tree_int_cst_compare (captures[2], captures[4]);
	  if ((code1 == LT_EXPR || code1 == LE_EXPR)
 && (code2 == LT_EXPR || code2 == LE_EXPR)
)
	    {
	      if ((cmp < 0) || (cmp == 0 && code1 == LT_EXPR)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail353;
		  {
		    tree tem;
		    tem = captures[3];
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 219, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail353:;
		}
	      else
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail354;
		  {
		    tree tem;
		    tem = captures[0];
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 220, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail354:;
		}
	    }
	  else
	    {
	      if ((code1 == GT_EXPR || code1 == GE_EXPR)
 && (code2 == GT_EXPR || code2 == GE_EXPR)
)
		{
		  if ((cmp > 0) || (cmp == 0 && code1 == GT_EXPR)
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail355;
		      {
			tree tem;
			tem = captures[3];
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 221, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail355:;
		    }
		  else
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail356;
		      {
			tree tem;
			tem = captures[0];
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 222, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail356:;
		    }
		}
	      else
		{
		  if (cmp == 0
 && ((code1 == LT_EXPR && code2 == GT_EXPR)
 || (code1 == GT_EXPR && code2 == LT_EXPR))
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail357;
		      {
			res_op->set_op (NE_EXPR, type, 2);
			res_op->ops[0] = captures[1];
			res_op->ops[1] = captures[4];
			res_op->resimplify (lseq, valueize);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 223, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail357:;
		    }
		  else
		    {
		      if (cmp >= 0
 && (code1 == LT_EXPR || code1 == LE_EXPR)
 && (code2 == GT_EXPR || code2 == GE_EXPR)
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail358;
			  {
			    tree tem;
			    tem =  constant_boolean_node (true, type);
			    res_op->set_value (tem);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 224, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail358:;
			}
		      else
			{
			  if (cmp <= 0
 && (code1 == GT_EXPR || code1 == GE_EXPR)
 && (code2 == LT_EXPR || code2 == LE_EXPR)
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail359;
			      {
				tree tem;
				tem =  constant_boolean_node (true, type);
				res_op->set_value (tem);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 225, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail359:;
			    }
			}
		    }
		}
	    }
      }
    }
  return false;
}

bool
gimple_simplify_172 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!tree_expr_maybe_nan_p (captures[0]) && !HONOR_SIGNED_ZEROS (type)
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail394;
      {
	res_op->set_op (NEGATE_EXPR, type, 1);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  gimple_match_op tem_op (res_op->cond.any_else (), ABS_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail394;
	  res_op->ops[0] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 233, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail394:;
    }
  return false;
}

bool
gimple_simplify_177 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!tree_expr_maybe_nan_p (captures[0]) && !HONOR_SIGNED_ZEROS (type)
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail399;
      {
	res_op->set_op (NEGATE_EXPR, type, 1);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  gimple_match_op tem_op (res_op->cond.any_else (), ABS_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail399;
	  res_op->ops[0] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 233, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail399:;
    }
  return false;
}

bool
gimple_simplify_184 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (COPYSIGN_ALL))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!tree_expr_maybe_nan_p (captures[0]) && !HONOR_SIGNED_ZEROS (type)
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail406;
      {
	res_op->set_op (NEGATE_EXPR, type, 1);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  gimple_match_op tem_op (res_op->cond.any_else (), ABS_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail406;
	  res_op->ops[0] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 235, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail406:;
    }
  return false;
}

bool
gimple_simplify_193 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!canonicalize_math_p ()
)
    {
      if (INTEGRAL_TYPE_P (type)
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail417;
	  {
	    res_op->set_op (COND_EXPR, type, 3);
	    res_op->ops[0] = captures[0];
	    res_op->ops[1] = captures[3];
	    res_op->ops[2] =  build_zero_cst (type);
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 243, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail417:;
	}
    }
  return false;
}

bool
gimple_simplify_201 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (POW))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
    {
      gimple_seq *lseq = seq;
      if (lseq
          && (!single_use (captures[0])
              || !single_use (captures[3])))
        lseq = NULL;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail426;
      {
	res_op->set_op (POW, type, 2);
	res_op->ops[0] = captures[1];
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[2];
	  _o1[1] = captures[4];
	  gimple_match_op tem_op (res_op->cond.any_else (), PLUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail426;
	  res_op->ops[1] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 251, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail426:;
    }
  return false;
}

bool
gimple_simplify_210 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[2]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[2]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[2])))
 && (CONSTANT_CLASS_P (captures[2]) || (single_use (captures[1]) && single_use (captures[0])))
 && tree_nop_conversion_p (TREE_TYPE (captures[0]), TREE_TYPE (captures[1]))
 && tree_nop_conversion_p (TREE_TYPE (captures[0]), TREE_TYPE (captures[3]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail438;
      {
	res_op->set_op (op, type, 2);
	res_op->ops[0] = captures[2];
	res_op->ops[1] =  build_zero_cst (TREE_TYPE (captures[2]));
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 263, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail438:;
    }
  return false;
}

bool
gimple_simplify_216 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!TYPE_OVERFLOW_SANITIZED (TREE_TYPE (captures[2]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail457;
      {
	res_op->set_op (op, type, 2);
	res_op->ops[0] = captures[1];
	res_op->ops[1] = captures[3];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 281, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail457:;
    }
  return false;
}

bool
gimple_simplify_223 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (wi::bit_and_not (wi::to_wide (captures[1]), get_nonzero_bits (captures[0])) != 0
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail464;
      {
	tree tem;
	tem =  constant_boolean_node (cmp == NE_EXPR, type);
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 287, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail464:;
    }
  return false;
}

bool
gimple_simplify_229 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_fits_shwi_p (captures[3])
 && tree_to_shwi (captures[3]) > 0
 && tree_to_shwi (captures[3]) < TYPE_PRECISION (TREE_TYPE (captures[2]))
)
    {
      if (tree_to_shwi (captures[3]) > wi::ctz (wi::to_wide (captures[5]))
)
	{
	  gimple_seq *lseq = seq;
	  if (lseq
	      && (!single_use (captures[0])
	          || !single_use (captures[1])))
	    lseq = NULL;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail473;
	  {
	    tree tem;
	    tem =  constant_boolean_node (cmp == NE_EXPR, type);
	    res_op->set_value (tem);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 296, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail473:;
	}
      else
	{
	  {
 wide_int c1 = wi::to_wide (captures[3]);
 wide_int c2 = wi::lrshift (wi::to_wide (captures[4]), c1);
 wide_int c3 = wi::lrshift (wi::to_wide (captures[5]), c1);
	      gimple_seq *lseq = seq;
	      if (lseq
	          && (!single_use (captures[0])
	              || !single_use (captures[1])))
	        lseq = NULL;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail474;
	      {
		res_op->set_op (cmp, type, 2);
		{
		  tree _o1[2], _r1;
		  _o1[0] = captures[2];
		  _o1[1] =  wide_int_to_tree (TREE_TYPE (captures[2]), c2);
		  gimple_match_op tem_op (res_op->cond.any_else (), BIT_AND_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail474;
		  res_op->ops[0] = _r1;
		}
		res_op->ops[1] =  wide_int_to_tree (TREE_TYPE (captures[2]), c3);
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 297, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail474:;
	  }
	}
    }
  return false;
}

bool
gimple_simplify_242 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (icmp),
 const enum tree_code ARG_UNUSED (ncmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (types_match (type, TREE_TYPE (captures[0]))
)
    {
      {
 enum tree_code ic = invert_tree_comparison
 (cmp, HONOR_NANS (captures[1]));
	  if (ic == icmp
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail495;
	      {
		res_op->set_op (icmp, type, 2);
		res_op->ops[0] = captures[1];
		res_op->ops[1] = captures[2];
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 318, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail495:;
	    }
	  else
	    {
	      if (ic == ncmp
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail496;
		  {
		    res_op->set_op (ncmp, type, 2);
		    res_op->ops[0] = captures[1];
		    res_op->ops[1] = captures[2];
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 319, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail496:;
		}
	    }
      }
    }
  return false;
}

bool
gimple_simplify_251 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (single_use (captures[1]) && single_use (captures[3])
)
    {
      {
 tree otype = TREE_TYPE (captures[0]);
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail510;
	  {
	    res_op->set_op (cmp, type, 2);
	    {
	      tree _o1[1], _r1;
	      _o1[0] = captures[4];
	      if (otype != TREE_TYPE (_o1[0])
	          && !useless_type_conversion_p (otype, TREE_TYPE (_o1[0])))
		{
		  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, otype, _o1[0]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail510;
	        }
	      else
	        _r1 = _o1[0];
	      res_op->ops[0] = _r1;
	    }
	    {
	      tree _o1[1], _r1;
	      _o1[0] = captures[2];
	      if (otype != TREE_TYPE (_o1[0])
	          && !useless_type_conversion_p (otype, TREE_TYPE (_o1[0])))
		{
		  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, otype, _o1[0]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail510;
	        }
	      else
	        _r1 = _o1[0];
	      res_op->ops[1] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 330, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail510:;
      }
    }
  return false;
}

bool
gimple_simplify_258 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (icmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (SCALAR_FLOAT_TYPE_P (TREE_TYPE (captures[1]))
 && ! DECIMAL_FLOAT_TYPE_P (TREE_TYPE (captures[1]))
)
    {
      {
 tree itype = TREE_TYPE (captures[0]);
 format_helper fmt (REAL_MODE_FORMAT (TYPE_MODE (TREE_TYPE (captures[1]))));
 const REAL_VALUE_TYPE *cst = TREE_REAL_CST_PTR (captures[1]);
 bool exception_p
 = real_isnan (cst) && (cst->signalling
 || (cmp != EQ_EXPR && cmp != NE_EXPR));
	  if (fmt.can_represent_integral_type_p (itype) && ! exception_p
)
	    {
	      {
 signop isign = TYPE_SIGN (itype);
 REAL_VALUE_TYPE imin, imax;
 real_from_integer (&imin, fmt, wi::min_value (itype), isign);
 real_from_integer (&imax, fmt, wi::max_value (itype), isign);
 REAL_VALUE_TYPE icst;
 if (cmp == GT_EXPR || cmp == GE_EXPR)
 real_ceil (&icst, fmt, cst);
 else if (cmp == LT_EXPR || cmp == LE_EXPR)
 real_floor (&icst, fmt, cst);
 else
 real_trunc (&icst, fmt, cst);
 bool cst_int_p = !real_isnan (cst) && real_identical (&icst, cst);
 bool overflow_p = false;
 wide_int icst_val
 = real_to_integer (&icst, &overflow_p, TYPE_PRECISION (itype));
		  if (real_compare (LT_EXPR, cst, &imin)
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail552;
		      {
			tree tem;
			tem =  constant_boolean_node (cmp == GT_EXPR || cmp == GE_EXPR || cmp == NE_EXPR,
 type);
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 373, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail552:;
		    }
		  else
		    {
		      if (real_compare (GT_EXPR, cst, &imax)
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail553;
			  {
			    tree tem;
			    tem =  constant_boolean_node (cmp == LT_EXPR || cmp == LE_EXPR || cmp == NE_EXPR,
 type);
			    res_op->set_value (tem);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 374, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail553:;
			}
		      else
			{
			  if (cst_int_p
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail554;
			      {
				res_op->set_op (cmp, type, 2);
				res_op->ops[0] = captures[0];
 gcc_assert (!overflow_p);				res_op->ops[1] = 
 wide_int_to_tree (itype, icst_val);
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 375, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail554:;
			    }
			  else
			    {
			      if (cmp == EQ_EXPR || cmp == NE_EXPR
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail555;
				  {
				    tree tem;
				    tem =  constant_boolean_node (cmp == NE_EXPR, type);
				    res_op->set_value (tem);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 376, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail555:;
				}
			      else
				{
				  {
 gcc_checking_assert (!overflow_p);
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail556;
				      {
					res_op->set_op (icmp, type, 2);
					res_op->ops[0] = captures[0];
					res_op->ops[1] =  wide_int_to_tree (itype, icst_val);
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 377, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail556:;
				  }
				}
			    }
			}
		    }
	      }
	    }
      }
    }
  return false;
}

bool
gimple_simplify_271 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_nop_conversion_p (TREE_TYPE (captures[0]), TREE_TYPE (captures[1]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail586;
      {
	res_op->set_op (cmp, type, 2);
	res_op->ops[0] = captures[1];
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[2];
	  {
	    tree _o2[1], _r2;
	    _o2[0] = captures[3];
	    if (TREE_TYPE (res_op->ops[0]) != TREE_TYPE (_o2[0])
	        && !useless_type_conversion_p (TREE_TYPE (res_op->ops[0]), TREE_TYPE (_o2[0])))
	      {
		gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (res_op->ops[0]), _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail586;
	      }
	    else
	      _r2 = _o2[0];
	    _o1[1] = _r2;
	  }
	  gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail586;
	  res_op->ops[1] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 400, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail586:;
    }
  return false;
}

bool
gimple_simplify_276 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (ncmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && !TYPE_UNSIGNED (TREE_TYPE (captures[0]))
 && types_match (captures[0], captures[2])
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail591;
      {
	res_op->set_op (ncmp, type, 2);
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[0];
	  _o1[1] = captures[2];
	  gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail591;
	  res_op->ops[0] = _r1;
	}
	res_op->ops[1] = captures[1];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 405, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail591:;
    }
  return false;
}

bool
gimple_simplify_281 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 poly_int64 off0, off1;
 tree base0, base1;
 int equal = address_compare (cmp, TREE_TYPE (captures[0]), captures[1], captures[2], base0, base1,
 off0, off1,
0
);
      if (equal == 1
)
	{
	  if (cmp == EQ_EXPR && (known_eq (off0, off1) || known_ne (off0, off1))
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail596;
	      {
		tree tem;
		tem =  constant_boolean_node (known_eq (off0, off1), type);
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 408, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail596:;
	    }
	  else
	    {
	      if (cmp == NE_EXPR && (known_eq (off0, off1) || known_ne (off0, off1))
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail597;
		  {
		    tree tem;
		    tem =  constant_boolean_node (known_ne (off0, off1), type);
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 409, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail597:;
		}
	      else
		{
		  if (cmp == LT_EXPR && (known_lt (off0, off1) || known_ge (off0, off1))
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail598;
		      {
			tree tem;
			tem =  constant_boolean_node (known_lt (off0, off1), type);
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 410, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail598:;
		    }
		  else
		    {
		      if (cmp == LE_EXPR && (known_le (off0, off1) || known_gt (off0, off1))
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail599;
			  {
			    tree tem;
			    tem =  constant_boolean_node (known_le (off0, off1), type);
			    res_op->set_value (tem);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 411, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail599:;
			}
		      else
			{
			  if (cmp == GE_EXPR && (known_ge (off0, off1) || known_lt (off0, off1))
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail600;
			      {
				tree tem;
				tem =  constant_boolean_node (known_ge (off0, off1), type);
				res_op->set_value (tem);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 412, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail600:;
			    }
			  else
			    {
			      if (cmp == GT_EXPR && (known_gt (off0, off1) || known_le (off0, off1))
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail601;
				  {
				    tree tem;
				    tem =  constant_boolean_node (known_gt (off0, off1), type);
				    res_op->set_value (tem);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 413, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail601:;
				}
			    }
			}
		    }
		}
	    }
	}
      else
	{
	  if (equal == 0
)
	    {
	      if (cmp == EQ_EXPR
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail602;
		  {
		    tree tem;
		    tem =  constant_boolean_node (false, type);
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 414, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail602:;
		}
	      else
		{
		  if (cmp == NE_EXPR
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail603;
		      {
			tree tem;
			tem =  constant_boolean_node (true, type);
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 415, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail603:;
		    }
		}
	    }
	}
  }
  return false;
}

bool
gimple_simplify_293 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const combined_fn ARG_UNUSED (ffs))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 int prec = TYPE_PRECISION (TREE_TYPE (captures[1]));
      if (integer_zerop (captures[2])
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail631;
	  {
	    res_op->set_op (cmp, type, 2);
	    res_op->ops[0] = captures[1];
	    res_op->ops[1] =  build_zero_cst (TREE_TYPE (captures[1]));
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 435, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail631:;
	}
      else
	{
	  if (tree_int_cst_sgn (captures[2]) < 0 || wi::to_widest (captures[2]) > prec
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail632;
	      {
		tree tem;
		tem =  constant_boolean_node (cmp == NE_EXPR ? true : false, type);
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 436, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail632:;
	    }
	  else
	    {
	      if (single_use (captures[0])
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail633;
		  {
		    res_op->set_op (cmp, type, 2);
		    {
		      tree _o1[2], _r1;
		      _o1[0] = captures[1];
		      _o1[1] =  wide_int_to_tree (TREE_TYPE (captures[1]),
 wi::mask (tree_to_uhwi (captures[2]),
 false, prec));
		      gimple_match_op tem_op (res_op->cond.any_else (), BIT_AND_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
		      tem_op.resimplify (lseq, valueize);
		      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		      if (!_r1) goto next_after_fail633;
		      res_op->ops[0] = _r1;
		    }
		    res_op->ops[1] =  wide_int_to_tree (TREE_TYPE (captures[1]),
 wi::shifted_mask (tree_to_uhwi (captures[2]) - 1, 1,
 false, prec));
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 437, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail633:;
		}
	    }
	}
  }
  return false;
}

bool
gimple_simplify_309 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (div))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (type)
 && TYPE_OVERFLOW_UNDEFINED (type)
 && !integer_zerop (captures[0])
 && (!flag_non_call_exceptions || tree_expr_nonzero_p (captures[0]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail653;
      {
	res_op->set_op (COND_EXPR, type, 3);
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[0];
	  _o1[1] =  build_zero_cst (type);
	  gimple_match_op tem_op (res_op->cond.any_else (), LT_EXPR, boolean_type_node, _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail653;
	  res_op->ops[0] = _r1;
	}
	res_op->ops[1] =  build_minus_one_cst (type);
	res_op->ops[2] =  build_one_cst (type);
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 455, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail653:;
    }
  return false;
}

bool
gimple_simplify_317 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (div))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
value_range vr0, vr1, vr2, vr3, vr4;
      if (INTEGRAL_TYPE_P (type)
 && get_range_query (cfun)->range_of_expr (vr1, captures[3])
 && get_range_query (cfun)->range_of_expr (vr2, captures[4])
 && range_op_handler (MULT_EXPR).overflow_free_p (vr1, vr2)
 && get_range_query (cfun)->range_of_expr (vr0, captures[1])
 && get_range_query (cfun)->range_of_expr (vr3, captures[2])
 && range_op_handler (MINUS_EXPR).overflow_free_p (vr0, vr3)
 && get_range_query (cfun)->range_of_expr (vr4, captures[0])
 && !vr4.undefined_p ()
 && (TYPE_UNSIGNED (type)
 || (vr0.nonnegative_p () && vr4.nonnegative_p ())
 || (vr0.nonpositive_p () && vr4.nonpositive_p ()))
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail665;
	  {
	    res_op->set_op (MINUS_EXPR, type, 2);
	    {
	      tree _o1[2], _r1;
	      _o1[0] = captures[1];
	      _o1[1] = captures[4];
	      gimple_match_op tem_op (res_op->cond.any_else (), div, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail665;
	      res_op->ops[0] = _r1;
	    }
	    res_op->ops[1] = captures[3];
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 467, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail665:;
	}
  }
  return false;
}

bool
gimple_simplify_332 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (COS),
 const combined_fn ARG_UNUSED (SIN),
 const combined_fn ARG_UNUSED (TAN))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
    {
      gimple_seq *lseq = seq;
      if (lseq
          && (!single_use (captures[0])
              || !single_use (captures[2])))
        lseq = NULL;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail682;
      {
	res_op->set_op (RDIV_EXPR, type, 2);
	res_op->ops[0] =  build_one_cst (type);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[1];
	  gimple_match_op tem_op (res_op->cond.any_else (), TAN, TREE_TYPE (_o1[0]), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail682;
	  res_op->ops[1] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 484, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail682:;
    }
  return false;
}

bool
gimple_simplify_339 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail691;
      {
	res_op->set_op (op, type, 2);
	res_op->ops[0] = captures[0];
	res_op->ops[1] = captures[2];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 493, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail691:;
    }
  return false;
}

bool
gimple_simplify_345 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (minmax),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (comb))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail698;
  {
    res_op->set_op (comb, type, 2);
    {
      tree _o1[2], _r1;
      _o1[0] = captures[0];
      _o1[1] = captures[2];
      gimple_match_op tem_op (res_op->cond.any_else (), cmp, type, _o1[0], _o1[1]);
      tem_op.resimplify (lseq, valueize);
      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
      if (!_r1) goto next_after_fail698;
      res_op->ops[0] = _r1;
    }
    {
      tree _o1[2], _r1;
      _o1[0] = captures[1];
      _o1[1] = captures[2];
      gimple_match_op tem_op (res_op->cond.any_else (), cmp, type, _o1[0], _o1[1]);
      tem_op.resimplify (lseq, valueize);
      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
      if (!_r1) goto next_after_fail698;
      res_op->ops[1] = _r1;
    }
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 500, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail698:;
  return false;
}

bool
gimple_simplify_356 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp),
 const enum tree_code ARG_UNUSED (out))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (TYPE_UNSIGNED (TREE_TYPE (captures[1]))
 && types_match (TREE_TYPE (captures[1]), TREE_TYPE (captures[2]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail741;
      {
	res_op->set_op (out, type, 2);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o1[0])), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail741;
	  res_op->ops[0] = _r1;
	}
	res_op->ops[1] =  build_zero_cst (TREE_TYPE (captures[1]));
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 526, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail741:;
    }
  return false;
}

bool
gimple_simplify_362 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 bool ok = true;
 HOST_WIDE_INT val = 0;
 if (!tree_fits_shwi_p (captures[3]))
 ok = false;
 else
 {
 val = tree_to_shwi (captures[3]);
 if (op == GT_EXPR || op == LE_EXPR)
 {
 if (val == HOST_WIDE_INT_MAX)
 ok = false;
 else
 val++;
 }
 }
 HOST_WIDE_INT zero_val = tree_to_shwi (captures[2]);
 tree type0 = TREE_TYPE (captures[1]);
 int prec = TYPE_PRECISION (type0);
 if (prec > MAX_FIXED_MODE_SIZE)
 ok = false;
      if (val <= 0
)
	{
	  if (ok && zero_val >= val
)
	    {
	      gimple_seq *lseq = seq;
	      if (lseq
	          && (!single_use (captures[0])))
	        lseq = NULL;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail751;
	      {
		tree tem;
		tem =  constant_boolean_node (cmp == EQ_EXPR ? true : false, type);
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 536, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail751:;
	    }
	}
      else
	{
	  if (val >= prec
)
	    {
	      if (ok && zero_val < val
)
		{
		  gimple_seq *lseq = seq;
		  if (lseq
		      && (!single_use (captures[0])))
		    lseq = NULL;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail752;
		  {
		    tree tem;
		    tem =  constant_boolean_node (cmp == EQ_EXPR ? false : true, type);
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 537, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail752:;
		}
	    }
	  else
	    {
	      if (ok && (zero_val < 0 || zero_val >= prec)
)
		{
		  gimple_seq *lseq = seq;
		  if (lseq
		      && (!single_use (captures[0])))
		    lseq = NULL;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail753;
		  {
		    res_op->set_op (cmp, type, 2);
		    {
		      tree _o1[2], _r1;
		      _o1[0] = captures[1];
		      _o1[1] =  wide_int_to_tree (type0,
 wi::mask (val, false, prec));
		      gimple_match_op tem_op (res_op->cond.any_else (), BIT_AND_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
		      tem_op.resimplify (lseq, valueize);
		      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		      if (!_r1) goto next_after_fail753;
		      res_op->ops[0] = _r1;
		    }
		    res_op->ops[1] =  build_zero_cst (type0);
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 538, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail753:;
		}
	    }
	}
  }
  return false;
}

bool
gimple_simplify_374 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (wi::ltu_p (wi::to_wide (captures[1]), element_precision (type))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail769;
      {
	res_op->set_op (BIT_AND_EXPR, type, 2);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, type, _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail769;
	  res_op->ops[0] = _r1;
	}
	{
	  tree _o1[2], _r1;
	  _o1[0] =  build_minus_one_cst (type);
	  _o1[1] = captures[1];
	  gimple_match_op tem_op (res_op->cond.any_else (), LSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail769;
	  res_op->ops[1] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 550, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail769:;
    }
  return false;
}

bool
gimple_simplify_382 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (bit_op),
 const enum tree_code ARG_UNUSED (shift))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_nop_conversion_p (type, TREE_TYPE (captures[2]))
)
    {
      {
 tree mask = int_const_binop (shift, fold_convert (type, captures[3]), captures[4]);
	  if (mask
)
	    {
	      gimple_seq *lseq = seq;
	      if (lseq
	          && (!single_use (captures[0])
	              || !single_use (captures[1])))
	        lseq = NULL;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail780;
	      {
		res_op->set_op (bit_op, type, 2);
		{
		  tree _o1[2], _r1;
		  {
		    tree _o2[1], _r2;
		    _o2[0] = captures[2];
		    if (type != TREE_TYPE (_o2[0])
		        && !useless_type_conversion_p (type, TREE_TYPE (_o2[0])))
		      {
			gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o2[0]);
			tem_op.resimplify (lseq, valueize);
			_r2 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r2) goto next_after_fail780;
		      }
		    else
		      _r2 = _o2[0];
		    _o1[0] = _r2;
		  }
		  _o1[1] = captures[4];
		  gimple_match_op tem_op (res_op->cond.any_else (), shift, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail780;
		  res_op->ops[0] = _r1;
		}
		res_op->ops[1] =  mask;
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 559, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail780:;
	    }
      }
    }
  return false;
}

bool
gimple_simplify_387 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (eqne))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if ((integer_zerop (captures[1]) || integer_onep (captures[1]))
)
    {
      if ((eqne == EQ_EXPR) ^ integer_zerop (captures[1])
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail790;
	  {
	    res_op->set_op (NOP_EXPR, type, 1);
	    res_op->ops[0] = captures[0];
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 569, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail790:;
	}
      else
	{
	  if (types_match (type, TREE_TYPE (captures[0]))
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail791;
	      {
		res_op->set_op (BIT_XOR_EXPR, type, 2);
		res_op->ops[0] = captures[0];
		res_op->ops[1] =  build_one_cst (type);
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 570, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail791:;
	    }
	}
    }
  return false;
}

bool
gimple_simplify_391 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (froms),
 const combined_fn ARG_UNUSED (tos))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (flag_unsafe_math_optimizations
 && optimize
 && FLOAT_TYPE_P (type)
 && FLOAT_TYPE_P (TREE_TYPE (captures[0]))
 && types_match (type, TREE_TYPE (captures[1]))
 && types_match (type, TREE_TYPE (captures[2]))
 && types_match (type, TREE_TYPE (captures[3]))
 && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (captures[0]))
 && direct_internal_fn_supported_p (as_internal_fn (tos),
 type, OPTIMIZE_FOR_BOTH)
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail795;
      {
	res_op->set_op (tos, type, 3);
	res_op->ops[0] = captures[1];
	res_op->ops[1] = captures[2];
	res_op->ops[2] = captures[3];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 574, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail795:;
    }
  return false;
}

bool
gimple_simplify_397 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (type)
 && TYPE_PRECISION (type) == 1
 && !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (captures[0]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail813;
      {
	res_op->set_op (NOP_EXPR, type, 1);
	res_op->ops[0] = captures[0];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 580, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail813:;
    }
  return false;
}

bool
gimple_simplify_400 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (coshs),
 const combined_fn ARG_UNUSED (atanhs),
 const combined_fn ARG_UNUSED (sqrts))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!flag_errno_math
)
    {
      {
 tree t_one = build_one_cst (type);
	  gimple_seq *lseq = seq;
	  if (lseq
	      && (!single_use (captures[0])))
	    lseq = NULL;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail816;
	  {
	    res_op->set_op (RDIV_EXPR, type, 2);
	    res_op->ops[0] =  t_one;
	    {
	      tree _o1[1], _r1;
	      {
		tree _o2[2], _r2;
		{
		  tree _o3[2], _r3;
		  _o3[0] =  t_one;
		  _o3[1] = captures[1];
		  gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
		  tem_op.resimplify (lseq, valueize);
		  _r3 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r3) goto next_after_fail816;
		  _o2[0] = _r3;
		}
		{
		  tree _o3[2], _r3;
		  _o3[0] =  t_one;
		  _o3[1] = captures[1];
		  gimple_match_op tem_op (res_op->cond.any_else (), PLUS_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
		  tem_op.resimplify (lseq, valueize);
		  _r3 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r3) goto next_after_fail816;
		  _o2[1] = _r3;
		}
		gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail816;
		_o1[0] = _r2;
	      }
	      gimple_match_op tem_op (res_op->cond.any_else (), sqrts, TREE_TYPE (_o1[0]), _o1[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail816;
	      res_op->ops[1] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 583, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail816:;
      }
    }
  return false;
}

bool
gimple_simplify_408 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (HYPOT))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail825;
      {
	res_op->set_op (MULT_EXPR, type, 2);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  gimple_match_op tem_op (res_op->cond.any_else (), ABS_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail825;
	  res_op->ops[0] = _r1;
	}
	res_op->ops[1] =  build_real_truncate (type, dconst_sqrt2 ());
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 592, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail825:;
    }
  return false;
}

bool
gimple_simplify_412 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail830;
  {
    res_op->set_op (PLUS_EXPR, type, 2);
    {
      tree _o1[1], _r1;
      _o1[0] = captures[0];
      gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, type, _o1[0]);
      tem_op.resimplify (lseq, valueize);
      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
      if (!_r1) goto next_after_fail830;
      res_op->ops[0] = _r1;
    }
    res_op->ops[1] =  build_each_one_cst (type);
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 597, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail830:;
  return false;
}

bool
gimple_simplify_416 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && TYPE_PRECISION (TREE_TYPE (captures[0])) == 1
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail834;
      {
	res_op->set_op (BIT_AND_EXPR, type, 2);
	res_op->ops[0] = captures[0];
	res_op->ops[1] = captures[1];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 601, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail834:;
    }
  return false;
}

bool
gimple_simplify_420 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 bool wascmp;
      if (bitwise_inverted_equal_p (captures[0], captures[1], wascmp)
 && (!wascmp || element_precision (type) == 1)
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail838;
	  {
	    res_op->set_op (BIT_AND_EXPR, type, 2);
	    res_op->ops[0] = captures[0];
	    res_op->ops[1] = captures[2];
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 605, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail838:;
	}
  }
  return false;
}

bool
gimple_simplify_424 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (bitop),
 const enum tree_code ARG_UNUSED (op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 tree pmop[2];
 tree utype = fold_bit_and_mask (TREE_TYPE (captures[1]), captures[5], op, captures[1], ERROR_MARK,
 NULL_TREE, NULL_TREE, captures[2], bitop, captures[3],
 captures[4], pmop);
      if (utype
)
	{
	  gimple_seq *lseq = seq;
	  if (lseq
	      && (!single_use (captures[0])
	          || !single_use (captures[2])))
	    lseq = NULL;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail842;
	  {
	    res_op->set_op (NOP_EXPR, type, 1);
	    {
	      tree _o1[2], _r1;
	      {
		tree _o2[2], _r2;
		{
		  tree _o3[1], _r3;
		  _o3[0] =  pmop[0];
		  if (utype != TREE_TYPE (_o3[0])
		      && !useless_type_conversion_p (utype, TREE_TYPE (_o3[0])))
		    {
		      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, utype, _o3[0]);
		      tem_op.resimplify (lseq, valueize);
		      _r3 = maybe_push_res_to_seq (&tem_op, lseq);
		      if (!_r3) goto next_after_fail842;
		    }
		  else
		    _r3 = _o3[0];
		  _o2[0] = _r3;
		}
		{
		  tree _o3[1], _r3;
		  _o3[0] =  pmop[1];
		  if (utype != TREE_TYPE (_o3[0])
		      && !useless_type_conversion_p (utype, TREE_TYPE (_o3[0])))
		    {
		      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, utype, _o3[0]);
		      tem_op.resimplify (lseq, valueize);
		      _r3 = maybe_push_res_to_seq (&tem_op, lseq);
		      if (!_r3) goto next_after_fail842;
		    }
		  else
		    _r3 = _o3[0];
		  _o2[1] = _r3;
		}
		gimple_match_op tem_op (res_op->cond.any_else (), op, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail842;
		_o1[0] = _r2;
	      }
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[5];
		if (utype != TREE_TYPE (_o2[0])
		    && !useless_type_conversion_p (utype, TREE_TYPE (_o2[0])))
		  {
		    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, utype, _o2[0]);
		    tem_op.resimplify (lseq, valueize);
		    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
		    if (!_r2) goto next_after_fail842;
		  }
		else
		  _r2 = _o2[0];
		_o1[1] = _r2;
	      }
	      gimple_match_op tem_op (res_op->cond.any_else (), BIT_AND_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail842;
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 608, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail842:;
	}
  }
  return false;
}

bool
gimple_simplify_443 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (code2),
 const enum tree_code ARG_UNUSED (code1))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if ((TREE_CODE (captures[2]) == INTEGER_CST
 && TREE_CODE (captures[5]) == INTEGER_CST)
 || ((INTEGRAL_TYPE_P (TREE_TYPE (captures[2]))
 || POINTER_TYPE_P (TREE_TYPE (captures[2])))
 && bitwise_equal_p (captures[2], captures[5]))
)
    {
      {
 bool one_before = false;
 bool one_after = false;
 int cmp = 0;
 bool allbits = true;
 if (TREE_CODE (captures[2]) == INTEGER_CST
 && TREE_CODE (captures[5]) == INTEGER_CST)
 {
 allbits = TYPE_PRECISION (TREE_TYPE (captures[2])) <= TYPE_PRECISION (TREE_TYPE (captures[5]));
 auto t1 = wi::to_wide (fold_convert (TREE_TYPE (captures[5]), captures[2]));
 auto t2 = wi::to_wide (captures[5]);
 cmp = wi::cmp (t1, t2, TYPE_SIGN (TREE_TYPE (captures[5])));
 if (cmp < 0
 && t1 == t2 - 1)
 one_before = true;
 if (cmp > 0
 && t1 == t2 + 1)
 one_after = true;
 }
 bool val;
 switch (code2)
 {
 case EQ_EXPR: val = (cmp == 0); break;
 case NE_EXPR: val = (cmp != 0); break;
 case LT_EXPR: val = (cmp < 0); break;
 case GT_EXPR: val = (cmp > 0); break;
 case LE_EXPR: val = (cmp <= 0); break;
 case GE_EXPR: val = (cmp >= 0); break;
 default: gcc_unreachable ();
 }
	  if (code1 == EQ_EXPR && val
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail868;
	      {
		tree tem;
		tem = captures[0];
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 630, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail868:;
	    }
	  else
	    {
	      if (code1 == EQ_EXPR && !val
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail869;
		  {
		    tree tem;
		    tem =  constant_boolean_node (false, type);
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 631, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail869:;
		}
	      else
		{
		  if (code1 == NE_EXPR && !val && allbits
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail870;
		      {
			tree tem;
			tem = captures[3];
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 632, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail870:;
		    }
		  else
		    {
		      if (code1 == NE_EXPR
 && code2 == GE_EXPR
 && cmp == 0
 && allbits
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail871;
			  {
			    res_op->set_op (GT_EXPR, type, 2);
			    res_op->ops[0] = captures[4];
			    {
			      tree _o1[1], _r1;
			      _o1[0] = captures[2];
			      if (TREE_TYPE (res_op->ops[0]) != TREE_TYPE (_o1[0])
			          && !useless_type_conversion_p (TREE_TYPE (res_op->ops[0]), TREE_TYPE (_o1[0])))
				{
				  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (res_op->ops[0]), _o1[0]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail871;
			        }
			      else
			        _r1 = _o1[0];
			      res_op->ops[1] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 633, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail871:;
			}
		      else
			{
			  if (code1 == NE_EXPR
 && code2 == LE_EXPR
 && cmp == 0
 && allbits
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail872;
			      {
				res_op->set_op (LT_EXPR, type, 2);
				res_op->ops[0] = captures[4];
				{
				  tree _o1[1], _r1;
				  _o1[0] = captures[2];
				  if (TREE_TYPE (res_op->ops[0]) != TREE_TYPE (_o1[0])
				      && !useless_type_conversion_p (TREE_TYPE (res_op->ops[0]), TREE_TYPE (_o1[0])))
				    {
				      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (res_op->ops[0]), _o1[0]);
				      tem_op.resimplify (lseq, valueize);
				      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r1) goto next_after_fail872;
				    }
				  else
				    _r1 = _o1[0];
				  res_op->ops[1] = _r1;
				}
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 634, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail872:;
			    }
			  else
			    {
			      if (code1 == NE_EXPR
 && code2 == GT_EXPR
 && one_after
 && allbits
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail873;
				  {
				    res_op->set_op (GT_EXPR, type, 2);
				    res_op->ops[0] = captures[4];
				    {
				      tree _o1[1], _r1;
				      _o1[0] = captures[2];
				      if (TREE_TYPE (res_op->ops[0]) != TREE_TYPE (_o1[0])
				          && !useless_type_conversion_p (TREE_TYPE (res_op->ops[0]), TREE_TYPE (_o1[0])))
					{
					  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (res_op->ops[0]), _o1[0]);
					  tem_op.resimplify (lseq, valueize);
					  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					  if (!_r1) goto next_after_fail873;
				        }
				      else
				        _r1 = _o1[0];
				      res_op->ops[1] = _r1;
				    }
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 635, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail873:;
				}
			      else
				{
				  if (code1 == NE_EXPR
 && code2 == LT_EXPR
 && one_before
 && allbits
)
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail874;
				      {
					res_op->set_op (LT_EXPR, type, 2);
					res_op->ops[0] = captures[4];
					{
					  tree _o1[1], _r1;
					  _o1[0] = captures[2];
					  if (TREE_TYPE (res_op->ops[0]) != TREE_TYPE (_o1[0])
					      && !useless_type_conversion_p (TREE_TYPE (res_op->ops[0]), TREE_TYPE (_o1[0])))
					    {
					      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, TREE_TYPE (res_op->ops[0]), _o1[0]);
					      tem_op.resimplify (lseq, valueize);
					      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r1) goto next_after_fail874;
					    }
					  else
					    _r1 = _o1[0];
					  res_op->ops[1] = _r1;
					}
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 636, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail874:;
				    }
				}
			    }
			}
		    }
		}
	    }
      }
    }
  return false;
}

bool
gimple_simplify_467 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (element_precision (type) <= element_precision (TREE_TYPE (captures[0]))
 || !TYPE_UNSIGNED (TREE_TYPE (captures[0]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail931;
      {
	res_op->set_op (NOP_EXPR, type, 1);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail931;
	  res_op->ops[0] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 656, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail931:;
    }
  return false;
}

bool
gimple_simplify_472 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail936;
      {
	res_op->set_op (NOP_EXPR, type, 1);
	{
	  tree _o1[2], _r1;
	  _o1[0] = captures[0];
	  {
	    tree _o2[1], _r2;
	    _o2[0] = captures[1];
	    gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o2[0]), _o2[0]);
	    tem_op.resimplify (lseq, valueize);
	    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
	    if (!_r2) goto next_after_fail936;
	    _o1[1] = _r2;
	  }
	  gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail936;
	  res_op->ops[0] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 661, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail936:;
    }
  return false;
}

bool
gimple_simplify_476 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (minmax),
 const enum tree_code ARG_UNUSED (maxmin))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (lseq
      && (!single_use (captures[0])))
    lseq = NULL;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail940;
  {
    res_op->set_op (maxmin, type, 2);
    res_op->ops[0] = captures[1];
    {
      tree _o1[1], _r1;
      _o1[0] = captures[2];
      gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
      tem_op.resimplify (lseq, valueize);
      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
      if (!_r1) goto next_after_fail940;
      res_op->ops[1] = _r1;
    }
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 664, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail940:;
  return false;
}

bool
gimple_simplify_484 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (minmax),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 poly_int64 off0, off1;
 tree base0, base1;
 int equal = address_compare (cmp, TREE_TYPE (captures[0]), captures[1], captures[3], base0, base1,
 off0, off1,
0
);
      if (equal == 1
)
	{
	  if (minmax == MIN_EXPR
)
	    {
	      if (known_le (off0, off1)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail949;
		  {
		    tree tem;
		    tem = captures[0];
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 671, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail949:;
		}
	      else
		{
		  if (known_gt (off0, off1)
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail950;
		      {
			tree tem;
			tem = captures[2];
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 672, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail950:;
		    }
		}
	    }
	  else
	    {
	      if (known_ge (off0, off1)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail951;
		  {
		    tree tem;
		    tem = captures[0];
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 673, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail951:;
		}
	      else
		{
		  if (known_lt (off0, off1)
)
		    {
		      gimple_seq *lseq = seq;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail952;
		      {
			tree tem;
			tem = captures[2];
			res_op->set_value (tem);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 674, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail952:;
		    }
		}
	    }
	}
  }
  return false;
}

bool
gimple_simplify_500 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail977;
  {
    tree tem;
    tem = captures[2];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 687, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail977:;
  return false;
}

bool
gimple_simplify_508 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!HONOR_SIGNED_ZEROS (type)
 && (
 (INTEGRAL_TYPE_P (type)
 && types_match (TREE_TYPE (captures[0]), TREE_TYPE (captures[1]))
 && types_match (TREE_TYPE (captures[2]), TREE_TYPE (captures[3]))
 && TYPE_PRECISION (TREE_TYPE (captures[1])) <= TYPE_PRECISION (type)
 && TYPE_PRECISION (TREE_TYPE (captures[3])) <= TYPE_PRECISION (type))
 || (types_match (type, TREE_TYPE (captures[1]))
 && types_match (type, TREE_TYPE (captures[3]))))
)
    {
      if (cmp == EQ_EXPR
)
	{
	  if (VECTOR_TYPE_P (type)
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail999;
	      {
		res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
		res_op->ops[0] = captures[2];
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 697, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail999:;
	    }
	  else
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1000;
	      {
		res_op->set_op (NOP_EXPR, type, 1);
		res_op->ops[0] = captures[2];
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 698, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1000:;
	    }
	}
      else
	{
	  if (cmp == NE_EXPR
)
	    {
	      if (VECTOR_TYPE_P (type)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1001;
		  {
		    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
		    res_op->ops[0] = captures[0];
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 699, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1001:;
		}
	      else
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1002;
		  {
		    res_op->set_op (NOP_EXPR, type, 1);
		    res_op->ops[0] = captures[0];
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 700, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1002:;
		}
	    }
	  else
	    {
	      if (cmp == LE_EXPR || cmp == UNLE_EXPR || cmp == LT_EXPR || cmp == UNLT_EXPR
)
		{
		  if (!HONOR_NANS (type)
)
		    {
		      if (VECTOR_TYPE_P (type)
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1003;
			  {
			    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[2];
			      gimple_match_op tem_op (res_op->cond.any_else (), MIN_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1003;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 701, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1003:;
			}
		      else
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1004;
			  {
			    res_op->set_op (NOP_EXPR, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] = captures[2];
			      gimple_match_op tem_op (res_op->cond.any_else (), MIN_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1004;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 702, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1004:;
			}
		    }
		}
	      else
		{
		  if (cmp == GE_EXPR || cmp == UNGE_EXPR || cmp == GT_EXPR || cmp == UNGT_EXPR
)
		    {
		      if (!HONOR_NANS (type)
)
			{
			  if (VECTOR_TYPE_P (type)
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1005;
			      {
				res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
				{
				  tree _o1[2], _r1;
				  _o1[0] = captures[0];
				  _o1[1] = captures[2];
				  gimple_match_op tem_op (res_op->cond.any_else (), MAX_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail1005;
				  res_op->ops[0] = _r1;
				}
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 703, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail1005:;
			    }
			  else
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1006;
			      {
				res_op->set_op (NOP_EXPR, type, 1);
				{
				  tree _o1[2], _r1;
				  _o1[0] = captures[0];
				  _o1[1] = captures[2];
				  gimple_match_op tem_op (res_op->cond.any_else (), MAX_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail1006;
				  res_op->ops[0] = _r1;
				}
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 704, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail1006:;
			    }
			}
		    }
		  else
		    {
		      if (cmp == UNEQ_EXPR
)
			{
			  if (!HONOR_NANS (type)
)
			    {
			      if (VECTOR_TYPE_P (type)
)
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1007;
				  {
				    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
				    res_op->ops[0] = captures[2];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 705, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1007:;
				}
			      else
				{
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1008;
				  {
				    res_op->set_op (NOP_EXPR, type, 1);
				    res_op->ops[0] = captures[2];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 706, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1008:;
				}
			    }
			}
		      else
			{
			  if (cmp == LTGT_EXPR
)
			    {
			      if (!HONOR_NANS (type)
)
				{
				  if (VECTOR_TYPE_P (type)
)
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1009;
				      {
					res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
					res_op->ops[0] = captures[0];
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 707, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail1009:;
				    }
				  else
				    {
				      gimple_seq *lseq = seq;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1010;
				      {
					res_op->set_op (NOP_EXPR, type, 1);
					res_op->ops[0] = captures[0];
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 708, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail1010:;
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    }
  return false;
}

bool
gimple_simplify_543 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!HONOR_SIGNED_ZEROS (type)
 && bitwise_equal_p (captures[0], captures[1])
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1073;
      {
	tree tem;
	tem = captures[1];
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 730, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1073:;
    }
  return false;
}

bool
gimple_simplify_552 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (!HONOR_SIGNED_ZEROS (type)
 && !TYPE_UNSIGNED (type)
)
    {
      if (ANY_INTEGRAL_TYPE_P (type)
 && !TYPE_OVERFLOW_WRAPS (type)
)
	{
	  {
 tree utype = unsigned_type_for (type);
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1087;
	      {
		res_op->set_op (NOP_EXPR, type, 1);
		{
		  tree _o1[1], _r1;
		  {
		    tree _o2[1], _r2;
		    _o2[0] = captures[0];
		    gimple_match_op tem_op (res_op->cond.any_else (), ABSU_EXPR, utype, _o2[0]);
		    tem_op.resimplify (lseq, valueize);
		    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
		    if (!_r2) goto next_after_fail1087;
		    _o1[0] = _r2;
		  }
		  gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail1087;
		  res_op->ops[0] = _r1;
		}
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 744, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1087:;
	  }
	}
      else
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1088;
	  {
	    res_op->set_op (NEGATE_EXPR, type, 1);
	    {
	      tree _o1[1], _r1;
	      _o1[0] = captures[0];
	      gimple_match_op tem_op (res_op->cond.any_else (), ABS_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1088;
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 745, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1088:;
	}
    }
  return false;
}

bool
gimple_simplify_558 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (func))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (wi::to_widest (captures[4]) == TYPE_PRECISION (TREE_TYPE (captures[3])) - 1
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1098;
      {
	tree tem;
	tem = captures[2];
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 751, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1098:;
    }
  return false;
}

bool
gimple_simplify_565 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (func))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 int val;
 internal_fn ifn = IFN_LAST;
 if (TREE_CODE (TREE_TYPE (captures[2])) == BITINT_TYPE)
 {
 if (tree_fits_shwi_p (captures[3]))
 {
 HOST_WIDE_INT valw = tree_to_shwi (captures[3]);
 if ((int) valw == valw)
 {
 val = valw;
 ifn = IFN_CTZ;
 }
 }
 }
 else if (direct_internal_fn_supported_p (IFN_CTZ, TREE_TYPE (captures[2]),
 OPTIMIZE_FOR_BOTH)
 && CTZ_DEFINED_VALUE_AT_ZERO
 (SCALAR_INT_TYPE_MODE (TREE_TYPE (captures[2])), val) == 2)
 ifn = IFN_CTZ;
      if (ifn == IFN_CTZ && wi::to_widest (captures[3]) == val
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1105;
	  {
	    res_op->set_op (CFN_CTZ, type, 2);
	    res_op->ops[0] = captures[2];
	    res_op->ops[1] = captures[3];
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 754, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1105:;
	}
  }
  return false;
}

bool
gimple_simplify_577 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1119;
  {
    tree tem;
    tem = captures[2];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 715, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1119:;
  return false;
}

bool
gimple_simplify_581 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1123;
  {
    tree tem;
    tem = captures[0];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 732, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1123:;
  return false;
}

bool
gimple_simplify_588 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (cond_len_op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 tree op_type = TREE_TYPE (captures[3]);
      if (element_precision (type) == element_precision (op_type)
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1130;
	  {
	    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
	    {
	      tree _o1[6], _r1;
	      _o1[0] = captures[0];
	      _o1[1] = captures[1];
	      _o1[2] = captures[2];
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[6];
		gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, op_type, _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail1130;
		_o1[3] = _r2;
	      }
	      _o1[4] = captures[4];
	      _o1[5] = captures[5];
	      gimple_match_op tem_op (res_op->cond.any_else (), cond_len_op, TREE_TYPE (_o1[1]), _o1[0], _o1[1], _o1[2], _o1[3], _o1[4], _o1[5]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1130;
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 773, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1130:;
	}
  }
  return false;
}

bool
gimple_simplify_596 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (cmp))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1138;
  {
    tree tem;
    tem =  constant_boolean_node (true, type);
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 781, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1138:;
  return false;
}

bool
gimple_simplify_599 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (logs),
 const combined_fn ARG_UNUSED (pows))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (flag_unsafe_math_optimizations
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1141;
      {
	res_op->set_op (MULT_EXPR, type, 2);
	res_op->ops[0] = captures[1];
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[0];
	  gimple_match_op tem_op (res_op->cond.any_else (), logs, TREE_TYPE (_o1[0]), _o1[0]);
	  tem_op.resimplify (lseq, valueize);
	  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	  if (!_r1) goto next_after_fail1141;
	  res_op->ops[1] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 784, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1141:;
    }
  return false;
}

bool
gimple_simplify_609 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1151;
  {
    tree tem;
    tem = captures[0];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 794, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1151:;
  return false;
}

bool
gimple_simplify_613 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (fns))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (canonicalize_math_p ()
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1155;
      {
	res_op->set_op (FIX_TRUNC_EXPR, type, 1);
	res_op->ops[0] = captures[0];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 798, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1155:;
    }
  return false;
}

bool
gimple_simplify_621 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (fmas))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (canonicalize_math_after_vectorization_p ()
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1163;
      {
	res_op->set_op (CFN_FMS, type, 3);
	res_op->ops[0] = captures[0];
	res_op->ops[1] = captures[1];
	res_op->ops[2] = captures[2];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 806, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1163:;
    }
  return false;
}

bool
gimple_simplify_629 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (bswap),
 const combined_fn ARG_UNUSED (popcount))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
)
    {
      {
 tree type0 = TREE_TYPE (captures[0]);
 tree type1 = TREE_TYPE (captures[1]);
 unsigned int prec0 = TYPE_PRECISION (type0);
 unsigned int prec1 = TYPE_PRECISION (type1);
	  if (prec0 == prec1 || (prec0 > prec1 && TYPE_UNSIGNED (type1))
)
	    {
	      gimple_seq *lseq = seq;
	      if (lseq
	          && (!single_use (captures[1])))
	        lseq = NULL;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1173;
	      {
		res_op->set_op (popcount, type, 1);
		{
		  tree _o1[1], _r1;
		  {
		    tree _o2[1], _r2;
		    _o2[0] = captures[2];
		    if (type1 != TREE_TYPE (_o2[0])
		        && !useless_type_conversion_p (type1, TREE_TYPE (_o2[0])))
		      {
			gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type1, _o2[0]);
			tem_op.resimplify (lseq, valueize);
			_r2 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r2) goto next_after_fail1173;
		      }
		    else
		      _r2 = _o2[0];
		    _o1[0] = _r2;
		  }
		  if (type0 != TREE_TYPE (_o1[0])
		      && !useless_type_conversion_p (type0, TREE_TYPE (_o1[0])))
		    {
		      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type0, _o1[0]);
		      tem_op.resimplify (lseq, valueize);
		      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		      if (!_r1) goto next_after_fail1173;
		    }
		  else
		    _r1 = _o1[0];
		  res_op->ops[0] = _r1;
		}
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 816, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1173:;
	    }
      }
    }
  return false;
}

bool
gimple_simplify_640 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (rot),
 const combined_fn ARG_UNUSED (parity))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && (
1
 || !TREE_SIDE_EFFECTS (captures[3]))
 && TYPE_PRECISION (TREE_TYPE (captures[0]))
 >= TYPE_PRECISION (TREE_TYPE (captures[1]))
)
    {
      {
 tree type0 = TREE_TYPE (captures[0]);
	  gimple_seq *lseq = seq;
	  if (lseq
	      && (!single_use (captures[0])
	          || !single_use (captures[1])))
	    lseq = NULL;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1189;
	  {
	    res_op->set_op (parity, type, 1);
	    {
	      tree _o1[1], _r1;
	      _o1[0] = captures[2];
	      if (type0 != TREE_TYPE (_o1[0])
	          && !useless_type_conversion_p (type0, TREE_TYPE (_o1[0])))
		{
		  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type0, _o1[0]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail1189;
	        }
	      else
	        _r1 = _o1[0];
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 825, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1189:;
      }
    }
  return false;
}

bool
gimple_simplify_645 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (reduc))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 int i = single_nonzero_element (captures[1]);
      if (i >= 0
)
	{
	  {
 tree elt = vector_cst_elt (captures[1], i);
 tree elt_type = TREE_TYPE (elt);
 unsigned int elt_bits = tree_to_uhwi (TYPE_SIZE (elt_type));
 tree size = bitsize_int (elt_bits);
 tree pos = bitsize_int (elt_bits * i);
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1196;
	      {
		res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
		{
		  tree _o1[2], _r1;
		  {
		    tree _o2[3], _r2;
		    _o2[0] = captures[0];
		    _o2[1] =  size;
		    _o2[2] =  pos;
		    gimple_match_op tem_op (res_op->cond.any_else (), BIT_FIELD_REF, elt_type, _o2[0], _o2[1], _o2[2]);
		    tem_op.resimplify (lseq, valueize);
		    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
		    if (!_r2) goto next_after_fail1196;
		    _o1[0] = _r2;
		  }
		  _o1[1] =  elt;
		  gimple_match_op tem_op (res_op->cond.any_else (), BIT_AND_EXPR, elt_type, _o1[0], _o1[1]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail1196;
		  res_op->ops[0] = _r1;
		}
		res_op->resimplify (lseq, valueize);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 835, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail1196:;
	  }
	}
  }
  return false;
}

bool
gimple_simplify_CFN_COS (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    const combined_fn coss = CFN_COS;
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1234;
		    {
		      res_op->set_op (coss, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 860, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1234:;
		  }
	          break;
	        }
	      case ABS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    const combined_fn coss = CFN_COS;
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1235;
		    {
		      res_op->set_op (coss, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 860, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1235:;
		  }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_398 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGN, CFN_COS))
		        return true;
		    }
	          }
	        break;
	      case CFN_ATAN:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		      if (gimple_simplify_399 (res_op, seq, valueize, type, captures, CFN_COS, CFN_ATAN, CFN_SQRT, CFN_COPYSIGN))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNF:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_398 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNF, CFN_COS))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNL:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_398 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNL, CFN_COS))
		        return true;
		    }
	          }
	        break;
	      case CFN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_398 (res_op, seq, valueize, type, captures, CFN_COPYSIGN, CFN_COS))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CCOS (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1258;
		    {
		      res_op->set_op (CFN_BUILT_IN_CCOS, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 872, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1258:;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CCOSHL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1262;
		    {
		      res_op->set_op (CFN_BUILT_IN_CCOSHL, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 872, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1262:;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_BIT_NOT_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q21 };
				    if (gimple_simplify_465 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q40, _q20 };
				    if (gimple_simplify_465 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_IOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q21 };
				    if (gimple_simplify_466 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q40, _q20 };
				    if (gimple_simplify_466 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q21 };
				    gimple_seq *lseq = seq;
				    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1278;
				    {
				      res_op->set_op (PLUS_EXPR, type, 2);
				      res_op->ops[0] = captures[0];
				      res_op->ops[1] = captures[1];
				      res_op->resimplify (lseq, valueize);
				      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 876, __FILE__, __LINE__, true);
				      return true;
				    }
next_after_fail1278:;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
		    gimple_seq *lseq = seq;
		    if (lseq
		        && (!single_use (captures[0])))
		      lseq = NULL;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1279;
		    {
		      res_op->set_op (PLUS_EXPR, type, 2);
		      {
			tree _o1[1], _r1;
			_o1[0] = captures[1];
			gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
			tem_op.resimplify (lseq, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r1) goto next_after_fail1279;
			res_op->ops[0] = _r1;
		      }
		      res_op->ops[1] = captures[2];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 877, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1279:;
		  }
		  if (integer_each_onep (_q21))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_467 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q21 };
				    if (gimple_simplify_468 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q40, _q20 };
				    if (gimple_simplify_468 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case INTEGER_CST:
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			  if ((INTEGRAL_TYPE_P (type)
 && TYPE_UNSIGNED (type))
 || (!TYPE_OVERFLOW_SANITIZED (type)
 && may_negate_without_overflow_p (captures[2]))
)
			    {
			      gimple_seq *lseq = seq;
			      if (lseq
			          && (!single_use (captures[0])))
			        lseq = NULL;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1280;
			      {
				res_op->set_op (PLUS_EXPR, type, 2);
				{
				  tree _o1[1], _r1;
				  _o1[0] = captures[1];
				  gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail1280;
				  res_op->ops[0] = _r1;
				}
				res_op->ops[1] =  const_unop (NEGATE_EXPR, type, captures[2]);
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 878, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail1280:;
			    }
			}
		        break;
		      }
		    default:;
		    }
		if (integer_all_onesp (_q21))
		  {
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_469 (res_op, seq, valueize, type, captures))
		        return true;
		    }
		  }
	          break;
	        }
	      case RSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
		    if (!TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[0])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1281;
			{
			  res_op->set_op (RSHIFT_EXPR, type, 2);
			  {
			    tree _o1[1], _r1;
			    _o1[0] = captures[1];
			    gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail1281;
			    res_op->ops[0] = _r1;
			  }
			  res_op->ops[1] = captures[2];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 879, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail1281:;
		      }
		    else
		      {
			if (INTEGRAL_TYPE_P (type)
 && !wi::neg_p (tree_nonzero_bits (captures[1]))
)
			  {
			    {
 tree stype = signed_type_for (TREE_TYPE (captures[1]));
				gimple_seq *lseq = seq;
				if (lseq
				    && (!single_use (captures[0])))
				  lseq = NULL;
				if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1282;
				{
				  res_op->set_op (NOP_EXPR, type, 1);
				  {
				    tree _o1[2], _r1;
				    {
				      tree _o2[1], _r2;
				      {
					tree _o3[1], _r3;
					_o3[0] = captures[1];
					if (stype != TREE_TYPE (_o3[0])
					    && !useless_type_conversion_p (stype, TREE_TYPE (_o3[0])))
					  {
					    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, stype, _o3[0]);
					    tem_op.resimplify (lseq, valueize);
					    _r3 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r3) goto next_after_fail1282;
					  }
					else
					  _r3 = _o3[0];
					_o2[0] = _r3;
				      }
				      gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o2[0]), _o2[0]);
				      tem_op.resimplify (NULL, valueize);
				      _r2 = maybe_push_res_to_seq (&tem_op, NULL);
				      if (!_r2) goto next_after_fail1282;
				      _o1[0] = _r2;
				    }
				    _o1[1] = captures[2];
				    gimple_match_op tem_op (res_op->cond.any_else (), RSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				    tem_op.resimplify (lseq, valueize);
				    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				    if (!_r1) goto next_after_fail1282;
				    res_op->ops[0] = _r1;
				  }
				  res_op->resimplify (lseq, valueize);
				  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 880, __FILE__, __LINE__, true);
				  return true;
				}
next_after_fail1282:;
			    }
			  }
		      }
		  }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q40, _q21 };
						    if (gimple_simplify_470 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q30, _q21 };
				    if (gimple_simplify_470 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1283;
		    {
		      tree tem;
		      tem = captures[0];
		      res_op->set_value (tem);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 881, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1283:;
		  }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NEGATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
				    if (gimple_simplify_471 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_each_onep (_q31))
				    {
				      {
					tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
					if (gimple_simplify_467 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      case PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_all_onesp (_q31))
				    {
				      {
					tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
					if (gimple_simplify_469 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q31 };
					  if (gimple_simplify_472 (res_op, seq, valueize, type, captures))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q40, _q31 };
						    if (gimple_simplify_473 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q31))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q31))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q50, _q30 };
						    if (gimple_simplify_473 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case RSHIFT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  switch (TREE_CODE (_q40))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q40))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_NOT_EXPR:
							        {
								  tree _q50 = gimple_assign_rhs1 (_a4);
								  _q50 = do_valueize (valueize, _q50);
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q50, _q31 };
								    if (gimple_simplify_474 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q40, _q31 };
						    if (gimple_simplify_474 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case LROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  switch (TREE_CODE (_q40))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q40))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_NOT_EXPR:
							        {
								  tree _q50 = gimple_assign_rhs1 (_a4);
								  _q50 = do_valueize (valueize, _q50);
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q50, _q31 };
								    if (gimple_simplify_475 (res_op, seq, valueize, type, captures, LROTATE_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q40, _q31 };
						    if (gimple_simplify_475 (res_op, seq, valueize, type, captures, LROTATE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case RROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  switch (TREE_CODE (_q40))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q40))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_NOT_EXPR:
							        {
								  tree _q50 = gimple_assign_rhs1 (_a4);
								  _q50 = do_valueize (valueize, _q50);
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q50, _q31 };
								    if (gimple_simplify_475 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q40, _q31 };
						    if (gimple_simplify_475 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    if (gimple_simplify_471 (res_op, seq, valueize, type, captures))
		      return true;
		  }
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			  if (gimple_simplify_472 (res_op, seq, valueize, type, captures))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q21 };
				    if (gimple_simplify_473 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q40, _q20 };
				    if (gimple_simplify_473 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (gimple_truth_valued_p (_q20, valueize))
		    {
		      if (gimple_truth_valued_p (_q21, valueize))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			    if (INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && TYPE_PRECISION (TREE_TYPE (captures[1])) == 1
)
			      {
				gimple_seq *lseq = seq;
				if (lseq
				    && (!single_use (captures[0])))
				  lseq = NULL;
				if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1284;
				{
				  res_op->set_op (NOP_EXPR, type, 1);
				  {
				    tree _o1[2], _r1;
				    _o1[0] = captures[1];
				    _o1[1] = captures[2];
				    gimple_match_op tem_op (res_op->cond.any_else (), EQ_EXPR, boolean_type_node, _o1[0], _o1[1]);
				    tem_op.resimplify (lseq, valueize);
				    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				    if (!_r1) goto next_after_fail1284;
				    res_op->ops[0] = _r1;
				  }
				  res_op->resimplify (lseq, valueize);
				  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 882, __FILE__, __LINE__, true);
				  return true;
				}
next_after_fail1284:;
			      }
			  }
		        }
		    }
	          break;
	        }
	      case MIN_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q21 };
				    if (gimple_simplify_476 (res_op, seq, valueize, type, captures, MIN_EXPR, MAX_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q40, _q20 };
				    if (gimple_simplify_476 (res_op, seq, valueize, type, captures, MIN_EXPR, MAX_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MAX_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q21 };
				    if (gimple_simplify_476 (res_op, seq, valueize, type, captures, MAX_EXPR, MIN_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q40, _q20 };
				    if (gimple_simplify_476 (res_op, seq, valueize, type, captures, MAX_EXPR, MIN_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q40, _q21 };
						    if (gimple_simplify_477 (res_op, seq, valueize, type, captures, LROTATE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q30, _q21 };
				    if (gimple_simplify_477 (res_op, seq, valueize, type, captures, LROTATE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case RROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q40, _q21 };
						    if (gimple_simplify_477 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q30, _q21 };
				    if (gimple_simplify_477 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22 };
		    gimple_seq *lseq = seq;
		    if (lseq
		        && (!single_use (captures[0])))
		      lseq = NULL;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1285;
		    {
		      res_op->set_op (VEC_COND_EXPR, type, 3);
		      res_op->ops[0] = captures[1];
		      {
			tree _o1[1], _r1;
			_o1[0] = captures[2];
			gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
			tem_op.resimplify (NULL, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, NULL);
			if (!_r1) goto next_after_fail1285;
			res_op->ops[1] = _r1;
		      }
		      {
			tree _o1[1], _r1;
			_o1[0] = captures[3];
			gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
			tem_op.resimplify (NULL, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, NULL);
			if (!_r1) goto next_after_fail1285;
			res_op->ops[2] = _r1;
		      }
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 842, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1285:;
		  }
	          break;
	        }
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR, UNGE_EXPR))
		      return true;
		  }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR, UNGT_EXPR))
		      return true;
		  }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR, NE_EXPR))
		      return true;
		  }
	          break;
	        }
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR, EQ_EXPR))
		      return true;
		  }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR, UNLT_EXPR))
		      return true;
		  }
	          break;
	        }
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR, UNLE_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNORDERED_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR, ORDERED_EXPR))
		      return true;
		  }
	          break;
	        }
	      case ORDERED_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR, UNORDERED_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNLT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR, GE_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNLE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR, GT_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR, LE_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNGE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR, LT_EXPR))
		      return true;
		  }
	          break;
	        }
	      case UNEQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR, LTGT_EXPR))
		      return true;
		  }
	          break;
	        }
	      case LTGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    if (gimple_simplify_478 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR, UNEQ_EXPR))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_SIN (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_ATAN:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		      if (gimple_simplify_601 (res_op, seq, valueize, type, captures, CFN_SIN, CFN_ATAN, CFN_SQRT, CFN_COPYSIGN))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_SINHL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_ATANHL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		      if (gimple_simplify_602 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SINHL, CFN_BUILT_IN_ATANHL, CFN_BUILT_IN_SQRTL))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_TRUNCF32X (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_TRUNCF32X:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_603 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TRUNCF32X))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_604 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TRUNCF32X))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_FLOORF32 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_FLOORF32:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_603 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FLOORF32))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_604 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FLOORF32))
        return true;
    }
  }
if (tree_expr_nonnegative_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_607 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FLOORF32, CFN_BUILT_IN_TRUNCF32))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CEILF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_CEILF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_603 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CEILF))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_604 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CEILF))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CEILF64X (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_CEILF64X:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_603 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CEILF64X))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_604 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CEILF64X))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_ROUNDF128 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_ROUNDF128:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_603 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ROUNDF128))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_604 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ROUNDF128))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_NEARBYINTF16 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_NEARBYINTF16:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_603 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_NEARBYINTF16))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_604 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_NEARBYINTF16))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_NEARBYINT (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_NEARBYINT:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_603 (res_op, seq, valueize, type, captures, CFN_NEARBYINT))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_604 (res_op, seq, valueize, type, captures, CFN_NEARBYINT))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_RINTF64X (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_RINTF64X:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_603 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_RINTF64X))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_604 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_RINTF64X))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_ICEILL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_double_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_610 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ICEILL, CFN_BUILT_IN_ICEIL))
			  return true;
		      }
		    }
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_611 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ICEILL, CFN_BUILT_IN_ICEILF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_613 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ICEILL))
        return true;
    }
  }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_614 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ICEILL, CFN_BUILT_IN_LCEILL, CFN_BUILT_IN_LLCEILL))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_IRINTL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_double_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_610 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IRINTL, CFN_BUILT_IN_IRINT))
			  return true;
		      }
		    }
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_611 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IRINTL, CFN_BUILT_IN_IRINTF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_616 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IRINTL))
        return true;
    }
  }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_614 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IRINTL, CFN_BUILT_IN_LRINTL, CFN_BUILT_IN_LLRINTL))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_LROUND (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_611 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LROUND, CFN_BUILT_IN_LROUNDF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_613 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LROUND))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_IFLOOR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_expr_nonnegative_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_612 (res_op, seq, valueize, type, captures, CFN_IFLOOR))
	  return true;
      }
    }
  if (integer_valued_real_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_613 (res_op, seq, valueize, type, captures, CFN_IFLOOR))
	  return true;
      }
    }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_614 (res_op, seq, valueize, type, captures, CFN_IFLOOR, CFN_LFLOOR, CFN_LLFLOOR))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_LCEIL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_valued_real_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_613 (res_op, seq, valueize, type, captures, CFN_LCEIL))
	  return true;
      }
    }
  return false;
}

bool
gimple_simplify_CFN_LROUND (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_valued_real_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_613 (res_op, seq, valueize, type, captures, CFN_LROUND))
	  return true;
      }
    }
  return false;
}

bool
gimple_simplify_CFN_LRINT (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_valued_real_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_616 (res_op, seq, valueize, type, captures, CFN_LRINT))
	  return true;
      }
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_SIGNBITL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_expr_nonnegative_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_617 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SIGNBITL))
	  return true;
      }
    }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_618 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SIGNBITL))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_CTZ (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		    if (gimple_simplify_628 (res_op, seq, valueize, type, captures, CFN_CTZ))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_PARITY (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    if (gimple_simplify_635 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
		      return true;
		  }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
				    if (gimple_simplify_637 (res_op, seq, valueize, type, captures, LROTATE_EXPR, CFN_BUILT_IN_PARITY))
				      return true;
				  }
			          break;
			        }
			      case RROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
				    if (gimple_simplify_637 (res_op, seq, valueize, type, captures, RROTATE_EXPR, CFN_BUILT_IN_PARITY))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  else if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			    switch (gimple_call_combined_fn (_c2))
			      {
			      case CFN_BUILT_IN_BSWAP128:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_636 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128, CFN_BUILT_IN_PARITY))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP16:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_636 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16, CFN_BUILT_IN_PARITY))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP32:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_636 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32, CFN_BUILT_IN_PARITY))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP64:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_636 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64, CFN_BUILT_IN_PARITY))
				        return true;
				    }
			          }
			        break;
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		    if (gimple_simplify_638 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
		      return true;
		  }
	          break;
	        }
	      case LROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
		    if (gimple_simplify_640 (res_op, seq, valueize, type, captures, LROTATE_EXPR, CFN_BUILT_IN_PARITY))
		      return true;
		  }
	          break;
	        }
	      case RROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
		    if (gimple_simplify_640 (res_op, seq, valueize, type, captures, RROTATE_EXPR, CFN_BUILT_IN_PARITY))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_BSWAP128:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_639 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128, CFN_BUILT_IN_PARITY))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP16:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_639 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16, CFN_BUILT_IN_PARITY))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP32:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_639 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32, CFN_BUILT_IN_PARITY))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP64:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_639 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64, CFN_BUILT_IN_PARITY))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_634 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_FFS (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		    if (gimple_simplify_642 (res_op, seq, valueize, type, captures, CFN_FFS))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (tree_expr_nonzero_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_641 (res_op, seq, valueize, type, captures, CFN_FFS, CFN_CTZ))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_REDUC_AND (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case VECTOR_CST:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1505;
			  {
			    res_op->set_op (BIT_AND_EXPR, type, 2);
			    {
			      tree _o1[1], _r1;
			      _o1[0] = captures[0];
			      gimple_match_op tem_op (res_op->cond.any_else (), CFN_REDUC_AND, type, _o1[0]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1505;
			      res_op->ops[0] = _r1;
			    }
			    {
			      tree _o1[1], _r1;
			      _o1[0] = captures[1];
			      gimple_match_op tem_op (res_op->cond.any_else (), CFN_REDUC_AND, type, _o1[0]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1505;
			      res_op->ops[1] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 919, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1505:;
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_MINUS_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_zerop (_p1))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	gimple_seq *lseq = seq;
	if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1588;
	{
	  tree tem;
	  tem = captures[0];
	  res_op->set_value (tem);
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 920, __FILE__, __LINE__, true);
	  return true;
	}
next_after_fail1588:;
      }
    }
  if (real_zerop (_p1))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (fold_real_zero_addition_p (type, captures[0], captures[1], 1)
)
	  {
	    gimple_seq *lseq = seq;
	    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1589;
	    {
	      tree tem;
	      tem = captures[0];
	      res_op->set_value (tem);
	      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 940, __FILE__, __LINE__, true);
	      return true;
	    }
next_after_fail1589:;
	  }
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case REAL_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case REAL_CST:
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
				if (gimple_simplify_45 (res_op, seq, valueize, type, captures, MINUS_EXPR, PLUS_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case REAL_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case REAL_CST:
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
				if (gimple_simplify_45 (res_op, seq, valueize, type, captures, MINUS_EXPR, MINUS_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  if ((_p1 == _p0 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _p0, 0) && types_match (_p1, _p0)))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (!FLOAT_TYPE_P (type)
 || (!tree_expr_maybe_nan_p (captures[0])
 && !tree_expr_maybe_infinite_p (captures[0])
 && (!HONOR_SIGN_DEPENDENT_ROUNDING (type)
 || !HONOR_SIGNED_ZEROS (type)))
)
	  {
	    gimple_seq *lseq = seq;
	    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1590;
	    {
	      tree tem;
	      tem =  build_zero_cst (type);
	      res_op->set_value (tem);
	      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 941, __FILE__, __LINE__, true);
	      return true;
	    }
next_after_fail1590:;
	  }
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case MULT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_q50))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q50))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case TRUNC_DIV_EXPR:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  tree _q61 = gimple_assign_rhs2 (_a4);
								  _q61 = do_valueize (valueize, _q61);
								  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || operand_equal_p (_q60, _q20, 0))
								    {
								      if ((_q51 == _q61 && ! TREE_SIDE_EFFECTS (_q51)) || operand_equal_p (_q51, _q61, 0))
									{
									  {
									    tree captures[4] ATTRIBUTE_UNUSED = { _q60, _q61, _q20, _q61 };
									    if (gimple_simplify_76 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q51))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q51))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case TRUNC_DIV_EXPR:
							        {
								  tree _q70 = gimple_assign_rhs1 (_a4);
								  _q70 = do_valueize (valueize, _q70);
								  tree _q71 = gimple_assign_rhs2 (_a4);
								  _q71 = do_valueize (valueize, _q71);
								  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || operand_equal_p (_q70, _q20, 0))
								    {
								      if ((_q71 == _q50 && ! TREE_SIDE_EFFECTS (_q71)) || operand_equal_p (_q71, _q50, 0))
									{
									  {
									    tree captures[4] ATTRIBUTE_UNUSED = { _q70, _q71, _q20, _q50 };
									    if (gimple_simplify_76 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case MULT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case TRUNC_DIV_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || operand_equal_p (_q50, _q20, 0))
						    {
						      if ((_q41 == _q51 && ! TREE_SIDE_EFFECTS (_q41)) || operand_equal_p (_q41, _q51, 0))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q50, _q51, _q20, _q51 };
							    if (gimple_simplify_76 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q41))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q41))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case TRUNC_DIV_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || operand_equal_p (_q60, _q20, 0))
						    {
						      if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || operand_equal_p (_q61, _q40, 0))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q60, _q61, _q20, _q40 };
							    if (gimple_simplify_76 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MULT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case TRUNC_DIV_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || operand_equal_p (_q50, _p0, 0))
						    {
						      if ((_q41 == _q51 && ! TREE_SIDE_EFFECTS (_q41)) || operand_equal_p (_q41, _q51, 0))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q50, _q51, _p0, _q51 };
							    if (gimple_simplify_76 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q41))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q41))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case TRUNC_DIV_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if ((_q60 == _p0 && ! TREE_SIDE_EFFECTS (_q60)) || operand_equal_p (_q60, _p0, 0))
						    {
						      if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || operand_equal_p (_q61, _q40, 0))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q60, _q61, _p0, _q40 };
							    if (gimple_simplify_76 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MULT_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case TRUNC_DIV_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || operand_equal_p (_q40, _p0, 0))
				    {
				      if ((_q31 == _q41 && ! TREE_SIDE_EFFECTS (_q31)) || operand_equal_p (_q31, _q41, 0))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q40, _q41, _p0, _q41 };
					    if (gimple_simplify_76 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q31))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q31))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case TRUNC_DIV_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || operand_equal_p (_q50, _p0, 0))
				    {
				      if ((_q51 == _q30 && ! TREE_SIDE_EFFECTS (_q51)) || operand_equal_p (_q51, _q30, 0))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q50, _q51, _p0, _q30 };
					    if (gimple_simplify_76 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MULT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case PLUS_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case TRUNC_DIV_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
						    {
						      if (integer_onep (_q41))
							{
							  if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
							    {
							      {
								tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q40, _q50 };
								if (gimple_simplify_77 (res_op, seq, valueize, type, captures))
								  return true;
							      }
							    }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case TRUNC_DIV_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (integer_onep (_q31))
						    {
						      if ((_q21 == _q41 && ! TREE_SIDE_EFFECTS (_q21)) || (operand_equal_p (_q21, _q41, 0) && types_match (_q21, _q41)))
							{
							  if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
							    {
							      {
								tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q41, _q20, _q30, _q40 };
								if (gimple_simplify_77 (res_op, seq, valueize, type, captures))
								  return true;
							      }
							    }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LSHIFT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50 };
					if (gimple_simplify_47 (res_op, seq, valueize, type, captures, MINUS_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q40, _p1 };
							    if (gimple_simplify_78 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q40, _p1 };
							    if (gimple_simplify_78 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q21, _q30, _p1 };
							    if (gimple_simplify_78 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q21, _q30, _p1 };
							    if (gimple_simplify_78 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case BIT_AND_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
						    if (~wi::to_wide (captures[2]) == wi::to_wide (captures[4])
)
						      {
							gimple_seq *lseq = seq;
							if (lseq
							    && (!single_use (captures[0])
							        || !single_use (captures[3])))
							  lseq = NULL;
							if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1591;
							{
							  res_op->set_op (MINUS_EXPR, type, 2);
							  {
							    tree _o1[2], _r1;
							    _o1[0] = captures[1];
							    _o1[1] = captures[4];
							    gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
							    tem_op.resimplify (lseq, valueize);
							    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
							    if (!_r1) goto next_after_fail1591;
							    res_op->ops[0] = _r1;
							  }
							  res_op->ops[1] = captures[4];
							  res_op->resimplify (lseq, valueize);
							  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 942, __FILE__, __LINE__, true);
							  return true;
							}
next_after_fail1591:;
						      }
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_q51))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q51))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case BIT_NOT_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
							    if (gimple_simplify_79 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
							    if (gimple_simplify_79 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1 };
							    if (gimple_simplify_79 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_q51))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q51))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case BIT_NOT_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1 };
							    if (gimple_simplify_79 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case PLUS_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_IOR_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
							{
							  if (integer_onep (_q51))
							    {
							      {
								tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
								  return true;
							      }
							    }
						        }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
							{
							  if (integer_onep (_q51))
							    {
							      {
								tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
								  return true;
							      }
							    }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				{
				  tree _q50_pops[1];
				  if (gimple_nop_convert (_q50, _q50_pops, valueize))
				    {
				      tree _q60 = _q50_pops[0];
				      switch (TREE_CODE (_q60))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q60))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case BIT_IOR_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      tree _q71 = gimple_assign_rhs2 (_a3);
						      _q71 = do_valueize (valueize, _q71);
						      if (tree_swap_operands_p (_q70, _q71))
						        std::swap (_q70, _q71);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  if ((_q71 == _q21 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q21, 0) && types_match (_q71, _q21)))
							    {
							      if (integer_onep (_q51))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								    if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						        }
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  if ((_q71 == _q20 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q20, 0) && types_match (_q71, _q20)))
							    {
							      if (integer_onep (_q51))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								    if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
}
				}
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		{
		  tree _p1_pops[1];
		  if (gimple_nop_convert (_p1, _p1_pops, valueize))
		    {
		      tree _q50 = _p1_pops[0];
		      switch (TREE_CODE (_q50))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q50))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      switch (TREE_CODE (_q60))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q60))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case BIT_IOR_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      tree _q71 = gimple_assign_rhs2 (_a3);
						      _q71 = do_valueize (valueize, _q71);
						      if (tree_swap_operands_p (_q70, _q71))
						        std::swap (_q70, _q71);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  if ((_q71 == _q21 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q21, 0) && types_match (_q71, _q21)))
							    {
							      if (integer_onep (_q61))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
								    if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						        }
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  if ((_q71 == _q20 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q20, 0) && types_match (_q71, _q20)))
							    {
							      if (integer_onep (_q61))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
								    if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    {
				      tree _q60_pops[1];
				      if (gimple_nop_convert (_q60, _q60_pops, valueize))
				        {
					  tree _q70 = _q60_pops[0];
					  switch (TREE_CODE (_q70))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _q70))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case BIT_IOR_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      if ((_q81 == _q21 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q21, 0) && types_match (_q81, _q21)))
								{
								  if (integer_onep (_q61))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
									if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							    }
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      if ((_q81 == _q20 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q20, 0) && types_match (_q81, _q20)))
								{
								  if (integer_onep (_q61))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
									if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
}
				    }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
}
		}
	          break;
	        }
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
				    if (!TYPE_OVERFLOW_SANITIZED (type)
)
				      {
					{
 tree utype = unsigned_type_for (type);
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1592;
					    {
					      res_op->set_op (NOP_EXPR, type, 1);
					      {
						tree _o1[2], _r1;
						{
						  tree _o2[1], _r2;
						  _o2[0] = captures[1];
						  if (utype != TREE_TYPE (_o2[0])
						      && !useless_type_conversion_p (utype, TREE_TYPE (_o2[0])))
						    {
						      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, utype, _o2[0]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail1592;
						    }
						  else
						    _r2 = _o2[0];
						  _o1[0] = _r2;
						}
						{
						  tree _o2[1], _r2;
						  _o2[0] = captures[0];
						  if (utype != TREE_TYPE (_o2[0])
						      && !useless_type_conversion_p (utype, TREE_TYPE (_o2[0])))
						    {
						      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, utype, _o2[0]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail1592;
						    }
						  else
						    _r2 = _o2[0];
						  _o1[1] = _r2;
						}
						gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (lseq, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, lseq);
						if (!_r1) goto next_after_fail1592;
						res_op->ops[0] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 943, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1592:;
					}
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (!TYPE_OVERFLOW_SANITIZED (type) && !TYPE_OVERFLOW_TRAPS (type)
 && !TYPE_SATURATING (type)
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1593;
						{
						  res_op->set_op (BIT_AND_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 944, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail1593:;
					      }
					  }
				        }
				    }
			          break;
			        }
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (!TYPE_OVERFLOW_SANITIZED (type) && !TYPE_OVERFLOW_TRAPS (type)
 && !TYPE_SATURATING (type)
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1594;
						{
						  res_op->set_op (BIT_IOR_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 945, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail1594:;
					      }
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_all_onesp (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case BIT_IOR_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      tree _q71 = gimple_assign_rhs2 (_a3);
						      _q71 = do_valueize (valueize, _q71);
						      if (tree_swap_operands_p (_q70, _q71))
						        std::swap (_q70, _q71);
						      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
							{
							  if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q31, 0) && types_match (_q71, _q31)))
							    {
							      {
								tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q31 };
								if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
								  return true;
							      }
							    }
						        }
						      if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q31, 0) && types_match (_q70, _q31)))
							{
							  if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
							    {
							      {
								tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q31, _q30 };
								if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    {
				      tree _p1_pops[1];
				      if (gimple_nop_convert (_p1, _p1_pops, valueize))
				        {
					  tree _q70 = _p1_pops[0];
					  switch (TREE_CODE (_q70))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _q70))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case BIT_IOR_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q31 };
								    if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q31, _q30 };
								    if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
}
				    }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      switch (TREE_CODE (_q30))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q30))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_AND_EXPR:
				    {
				      tree _q40 = gimple_assign_rhs1 (_a2);
				      _q40 = do_valueize (valueize, _q40);
				      tree _q41 = gimple_assign_rhs2 (_a2);
				      _q41 = do_valueize (valueize, _q41);
				      if (tree_swap_operands_p (_q40, _q41))
				        std::swap (_q40, _q41);
				      if (integer_all_onesp (_q21))
					{
					  switch (TREE_CODE (_p1))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p1))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case BIT_IOR_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q40, _q41 };
								    if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
							  if ((_q80 == _q41 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q41, 0) && types_match (_q80, _q41)))
							    {
							      if ((_q81 == _q40 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q40, 0) && types_match (_q81, _q40)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q41, _q40 };
								    if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					{
					  tree _p1_pops[1];
					  if (gimple_nop_convert (_p1, _p1_pops, valueize))
					    {
					      tree _q80 = _p1_pops[0];
					      switch (TREE_CODE (_q80))
					        {
						case SSA_NAME:
						  if (gimple *_d3 = get_def (valueize, _q80))
						    {
						      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						        switch (gimple_assign_rhs_code (_a3))
							  {
							  case BIT_IOR_EXPR:
							    {
							      tree _q90 = gimple_assign_rhs1 (_a3);
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = gimple_assign_rhs2 (_a3);
							      _q91 = do_valueize (valueize, _q91);
							      if (tree_swap_operands_p (_q90, _q91))
							        std::swap (_q90, _q91);
							      if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								{
								  if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q40, _q41 };
									if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							      if ((_q90 == _q41 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q41, 0) && types_match (_q90, _q41)))
								{
								  if ((_q91 == _q40 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q40, 0) && types_match (_q91, _q40)))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q41, _q40 };
									if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							      break;
							    }
							  default:;
							  }
						    }
						  break;
					        default:;
					        }
}
					}
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
}
		}
	          break;
	        }
	      case BIT_IOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_82 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q21, _q20 };
			if (gimple_simplify_82 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1595;
					    {
					      res_op->set_op (BIT_AND_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[1];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 946, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1595:;
					  }
				        }
				    }
			          break;
			        }
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1596;
					    {
					      res_op->set_op (BIT_XOR_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[1];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 947, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1596:;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_nop_convert (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      switch (TREE_CODE (_q20))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q20))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case PLUS_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      tree _q31 = gimple_assign_rhs2 (_a1);
		      _q31 = do_valueize (valueize, _q31);
		      if (tree_swap_operands_p (_q30, _q31))
		        std::swap (_q30, _q31);
		      switch (TREE_CODE (_q30))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q30))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_AND_EXPR:
				    {
				      tree _q40 = gimple_assign_rhs1 (_a2);
				      _q40 = do_valueize (valueize, _q40);
				      tree _q41 = gimple_assign_rhs2 (_a2);
				      _q41 = do_valueize (valueize, _q41);
				      if (tree_swap_operands_p (_q40, _q41))
				        std::swap (_q40, _q41);
				      if (integer_all_onesp (_q31))
					{
					  switch (TREE_CODE (_p1))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p1))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case BIT_IOR_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q40, _q41 };
								    if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
							  if ((_q80 == _q41 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q41, 0) && types_match (_q80, _q41)))
							    {
							      if ((_q81 == _q40 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q40, 0) && types_match (_q81, _q40)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q41, _q40 };
								    if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					{
					  tree _p1_pops[1];
					  if (gimple_nop_convert (_p1, _p1_pops, valueize))
					    {
					      tree _q80 = _p1_pops[0];
					      switch (TREE_CODE (_q80))
					        {
						case SSA_NAME:
						  if (gimple *_d3 = get_def (valueize, _q80))
						    {
						      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						        switch (gimple_assign_rhs_code (_a3))
							  {
							  case BIT_IOR_EXPR:
							    {
							      tree _q90 = gimple_assign_rhs1 (_a3);
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = gimple_assign_rhs2 (_a3);
							      _q91 = do_valueize (valueize, _q91);
							      if (tree_swap_operands_p (_q90, _q91))
							        std::swap (_q90, _q91);
							      if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								{
								  if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q40, _q41 };
									if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							      if ((_q90 == _q41 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q41, 0) && types_match (_q90, _q41)))
								{
								  if ((_q91 == _q40 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q40, 0) && types_match (_q91, _q40)))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q41, _q40 };
									if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							      break;
							    }
							  default:;
							  }
						    }
						  break;
					        default:;
					        }
}
					}
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    {
		      tree _q30_pops[1];
		      if (gimple_nop_convert (_q30, _q30_pops, valueize))
		        {
			  tree _q40 = _q30_pops[0];
			  switch (TREE_CODE (_q40))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _q40))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case BIT_AND_EXPR:
				        {
					  tree _q50 = gimple_assign_rhs1 (_a2);
					  _q50 = do_valueize (valueize, _q50);
					  tree _q51 = gimple_assign_rhs2 (_a2);
					  _q51 = do_valueize (valueize, _q51);
					  if (tree_swap_operands_p (_q50, _q51))
					    std::swap (_q50, _q51);
					  if (integer_all_onesp (_q31))
					    {
					      switch (TREE_CODE (_p1))
					        {
						case SSA_NAME:
						  if (gimple *_d3 = get_def (valueize, _p1))
						    {
						      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						        switch (gimple_assign_rhs_code (_a3))
							  {
							  case BIT_IOR_EXPR:
							    {
							      tree _q90 = gimple_assign_rhs1 (_a3);
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = gimple_assign_rhs2 (_a3);
							      _q91 = do_valueize (valueize, _q91);
							      if (tree_swap_operands_p (_q90, _q91))
							        std::swap (_q90, _q91);
							      if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								{
								  if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
									if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							      if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
								{
								  if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
									if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							      break;
							    }
							  default:;
							  }
						    }
						  break;
					        default:;
					        }
					    {
					      tree _p1_pops[1];
					      if (gimple_nop_convert (_p1, _p1_pops, valueize))
					        {
						  tree _q90 = _p1_pops[0];
						  switch (TREE_CODE (_q90))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _q90))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      case BIT_IOR_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a3);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a3);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
								    {
								      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
									    if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
								  if ((_q100 == _q51 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q51, 0) && types_match (_q100, _q51)))
								    {
								      if ((_q101 == _q50 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q50, 0) && types_match (_q101, _q50)))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
									    if (gimple_simplify_81 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
}
					    }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
}
		    }
		      break;
		    }
		  case BIT_AND_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      tree _q31 = gimple_assign_rhs2 (_a1);
		      _q31 = do_valueize (valueize, _q31);
		      if (tree_swap_operands_p (_q30, _q31))
		        std::swap (_q30, _q31);
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      switch (TREE_CODE (_q60))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q60))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case BIT_IOR_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      tree _q71 = gimple_assign_rhs2 (_a3);
						      _q71 = do_valueize (valueize, _q71);
						      if (tree_swap_operands_p (_q70, _q71))
						        std::swap (_q70, _q71);
						      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
							{
							  if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q31, 0) && types_match (_q71, _q31)))
							    {
							      if (integer_onep (_q61))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p1 };
								    if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						        }
						      if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q31, 0) && types_match (_q70, _q31)))
							{
							  if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
							    {
							      if (integer_onep (_q61))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p1 };
								    if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    {
				      tree _q60_pops[1];
				      if (gimple_nop_convert (_q60, _q60_pops, valueize))
				        {
					  tree _q70 = _q60_pops[0];
					  switch (TREE_CODE (_q70))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _q70))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case BIT_IOR_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
								{
								  if (integer_onep (_q61))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p1 };
									if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							    }
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  if (integer_onep (_q61))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p1 };
									if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
}
				    }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    {
		      tree _p1_pops[1];
		      if (gimple_nop_convert (_p1, _p1_pops, valueize))
		        {
			  tree _q60 = _p1_pops[0];
			  switch (TREE_CODE (_q60))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _q60))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case PLUS_EXPR:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a2);
					  _q70 = do_valueize (valueize, _q70);
					  tree _q71 = gimple_assign_rhs2 (_a2);
					  _q71 = do_valueize (valueize, _q71);
					  if (tree_swap_operands_p (_q70, _q71))
					    std::swap (_q70, _q71);
					  switch (TREE_CODE (_q70))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _q70))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case BIT_IOR_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
								{
								  if (integer_onep (_q71))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q60 };
									if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							    }
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  if (integer_onep (_q71))
								    {
								      {
									tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q60 };
									if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					{
					  tree _q70_pops[1];
					  if (gimple_nop_convert (_q70, _q70_pops, valueize))
					    {
					      tree _q80 = _q70_pops[0];
					      switch (TREE_CODE (_q80))
					        {
						case SSA_NAME:
						  if (gimple *_d3 = get_def (valueize, _q80))
						    {
						      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						        switch (gimple_assign_rhs_code (_a3))
							  {
							  case BIT_IOR_EXPR:
							    {
							      tree _q90 = gimple_assign_rhs1 (_a3);
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = gimple_assign_rhs2 (_a3);
							      _q91 = do_valueize (valueize, _q91);
							      if (tree_swap_operands_p (_q90, _q91))
							        std::swap (_q90, _q91);
							      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								{
								  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
								    {
								      if (integer_onep (_q71))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q60 };
									    if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
							        }
							      if ((_q90 == _q31 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q31, 0) && types_match (_q90, _q31)))
								{
								  if ((_q91 == _q30 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q30, 0) && types_match (_q91, _q30)))
								    {
								      if (integer_onep (_q71))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q60 };
									    if (gimple_simplify_80 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
							        }
							      break;
							    }
							  default:;
							  }
						    }
						  break;
					        default:;
					        }
}
					}
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
}
		    }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
}
}
  if (gimple_negate_expr_p (_p1, valueize))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (!FIXED_POINT_TYPE_P (type)
)
	  {
	    gimple_seq *lseq = seq;
	    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1597;
	    {
	      res_op->set_op (PLUS_EXPR, type, 2);
	      res_op->ops[0] = captures[0];
	      {
		tree _o1[1], _r1;
		_o1[0] = captures[1];
		gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
		tem_op.resimplify (lseq, valueize);
		_r1 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r1) goto next_after_fail1597;
		res_op->ops[1] = _r1;
	      }
	      res_op->resimplify (lseq, valueize);
	      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 948, __FILE__, __LINE__, true);
	      return true;
	    }
next_after_fail1597:;
	  }
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || operand_equal_p (_q50, _q20, 0))
						    {
						      {
							tree captures[5] ATTRIBUTE_UNUSED = { _q50, _p1, _q40, _q51, _q20 };
							if (gimple_simplify_83 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
						  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || operand_equal_p (_q51, _q20, 0))
						    {
						      {
							tree captures[5] ATTRIBUTE_UNUSED = { _q51, _p1, _q40, _q50, _q20 };
							if (gimple_simplify_83 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_AND_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q40 == _q20 && ! TREE_SIDE_EFFECTS (_q40)) || operand_equal_p (_q40, _q20, 0))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q40, _p1, _p1, _q41, _q20 };
					if (gimple_simplify_84 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
				  if ((_q41 == _q20 && ! TREE_SIDE_EFFECTS (_q41)) || operand_equal_p (_q41, _q20, 0))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q41, _p1, _p1, _q40, _q20 };
					if (gimple_simplify_84 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case ADDR_EXPR:
			        {
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  switch (TREE_CODE (_q40))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q40))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case POINTER_PLUS_EXPR:
							        {
								  tree _q50 = gimple_assign_rhs1 (_a4);
								  _q50 = do_valueize (valueize, _q50);
								  tree _q51 = gimple_assign_rhs2 (_a4);
								  _q51 = do_valueize (valueize, _q51);
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
								    if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
								      {
									{
 poly_int64 diff;
									    if (ptr_difference_const (captures[0], captures[1], &diff)
)
									      {
										gimple_seq *lseq = seq;
										if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1598;
										{
										  res_op->set_op (MINUS_EXPR, type, 2);
										  res_op->ops[0] =  build_int_cst_type (type, diff);
										  {
										    tree _o1[1], _r1;
										    _o1[0] = captures[2];
										    if (type != TREE_TYPE (_o1[0])
										        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
										      {
											gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
											tem_op.resimplify (lseq, valueize);
											_r1 = maybe_push_res_to_seq (&tem_op, lseq);
											if (!_r1) goto next_after_fail1598;
										      }
										    else
										      _r1 = _o1[0];
										    res_op->ops[1] = _r1;
										  }
										  res_op->resimplify (lseq, valueize);
										  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 949, __FILE__, __LINE__, true);
										  return true;
										}
next_after_fail1598:;
									      }
									}
								      }
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
						    if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
						      {
							{
 poly_int64 diff;
							    if (ptr_difference_const (captures[0], captures[1], &diff)
)
							      {
								gimple_seq *lseq = seq;
								if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1599;
								{
								  tree tem;
								  tem =  build_int_cst_type (type, diff);
								  res_op->set_value (tem);
								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 950, __FILE__, __LINE__, true);
								  return true;
								}
next_after_fail1599:;
							      }
							}
						      }
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case POINTER_PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  switch (TREE_CODE (_q60))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q60))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case ADDR_EXPR:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q60 };
								    if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
								      {
									{
 poly_int64 diff;
									    if (ptr_difference_const (captures[0], captures[2], &diff)
)
									      {
										gimple_seq *lseq = seq;
										if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1600;
										{
										  res_op->set_op (PLUS_EXPR, type, 2);
										  {
										    tree _o1[1], _r1;
										    _o1[0] = captures[1];
										    if (type != TREE_TYPE (_o1[0])
										        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
										      {
											gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
											tem_op.resimplify (lseq, valueize);
											_r1 = maybe_push_res_to_seq (&tem_op, lseq);
											if (!_r1) goto next_after_fail1600;
										      }
										    else
										      _r1 = _o1[0];
										    res_op->ops[0] = _r1;
										  }
										  res_op->ops[1] =  build_int_cst_type (type, diff);
										  res_op->resimplify (lseq, valueize);
										  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 951, __FILE__, __LINE__, true);
										  return true;
										}
next_after_fail1600:;
									      }
									}
								      }
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    case ADDR_EXPR:
						      {
							{
							  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q60 };
							  if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
							    {
							      {
 poly_int64 diff;
								  if (ptr_difference_const (captures[0], captures[2], &diff)
)
								    {
								      gimple_seq *lseq = seq;
								      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1601;
								      {
									res_op->set_op (PLUS_EXPR, type, 2);
									{
									  tree _o1[1], _r1;
									  _o1[0] = captures[1];
									  if (type != TREE_TYPE (_o1[0])
									      && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
									    {
									      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
									      tem_op.resimplify (lseq, valueize);
									      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
									      if (!_r1) goto next_after_fail1601;
									    }
									  else
									    _r1 = _o1[0];
									  res_op->ops[0] = _r1;
									}
									res_op->ops[1] =  build_int_cst_type (type, diff);
									res_op->resimplify (lseq, valueize);
									if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 951, __FILE__, __LINE__, true);
									return true;
								      }
next_after_fail1601:;
								    }
							      }
							    }
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case ADDR_EXPR:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q40 = gimple_assign_rhs1 (_a2);
					_q40 = do_valueize (valueize, _q40);
					switch (TREE_CODE (_q40))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q40))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case POINTER_PLUS_EXPR:
						      {
							tree _q50 = gimple_assign_rhs1 (_a3);
							_q50 = do_valueize (valueize, _q50);
							tree _q51 = gimple_assign_rhs2 (_a3);
							_q51 = do_valueize (valueize, _q51);
							{
							  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
							  if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
							    {
							      {
 poly_int64 diff;
								  if (ptr_difference_const (captures[0], captures[1], &diff)
)
								    {
								      gimple_seq *lseq = seq;
								      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1602;
								      {
									res_op->set_op (MINUS_EXPR, type, 2);
									res_op->ops[0] =  build_int_cst_type (type, diff);
									{
									  tree _o1[1], _r1;
									  _o1[0] = captures[2];
									  if (type != TREE_TYPE (_o1[0])
									      && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
									    {
									      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
									      tem_op.resimplify (lseq, valueize);
									      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
									      if (!_r1) goto next_after_fail1602;
									    }
									  else
									    _r1 = _o1[0];
									  res_op->ops[1] = _r1;
									}
									res_op->resimplify (lseq, valueize);
									if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 949, __FILE__, __LINE__, true);
									return true;
								      }
next_after_fail1602:;
								    }
							      }
							    }
							}
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
					  if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
					    {
					      {
 poly_int64 diff;
						  if (ptr_difference_const (captures[0], captures[1], &diff)
)
						    {
						      gimple_seq *lseq = seq;
						      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1603;
						      {
							tree tem;
							tem =  build_int_cst_type (type, diff);
							res_op->set_value (tem);
							if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 950, __FILE__, __LINE__, true);
							return true;
						      }
next_after_fail1603:;
						    }
					      }
					    }
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case ADDR_EXPR:
					        {
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
						    if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
						      {
							{
 poly_int64 diff;
							    if (ptr_difference_const (captures[0], captures[1], &diff)
)
							      {
								gimple_seq *lseq = seq;
								if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1604;
								{
								  tree tem;
								  tem =  build_int_cst_type (type, diff);
								  res_op->set_value (tem);
								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 952, __FILE__, __LINE__, true);
								  return true;
								}
next_after_fail1604:;
							      }
							}
						      }
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    case ADDR_EXPR:
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
					  if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
					    {
					      {
 poly_int64 diff;
						  if (ptr_difference_const (captures[0], captures[1], &diff)
)
						    {
						      gimple_seq *lseq = seq;
						      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1605;
						      {
							tree tem;
							tem =  build_int_cst_type (type, diff);
							res_op->set_value (tem);
							if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 952, __FILE__, __LINE__, true);
							return true;
						      }
next_after_fail1605:;
						    }
					      }
					    }
					}
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_onep (_p0))
  {
    switch (TREE_CODE (_p1))
      {
      case SSA_NAME:
        {
	  {
	    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	    if (INTEGRAL_TYPE_P (type)
 && ssa_name_has_boolean_range (captures[1])
)
	      {
		gimple_seq *lseq = seq;
		if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1606;
		{
		  res_op->set_op (BIT_XOR_EXPR, type, 2);
		  res_op->ops[0] = captures[1];
		  res_op->ops[1] = captures[0];
		  res_op->resimplify (lseq, valueize);
		  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 953, __FILE__, __LINE__, true);
		  return true;
		}
next_after_fail1606:;
	      }
	  }
          break;
        }
      default:;
      }
  }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || operand_equal_p (_q40, _p0, 0))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q40, _p1, _q30, _q41, _p0 };
					if (gimple_simplify_83 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
				  if ((_q41 == _p0 && ! TREE_SIDE_EFFECTS (_q41)) || operand_equal_p (_q41, _p0, 0))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q41, _p1, _q30, _q40, _p0 };
					if (gimple_simplify_83 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_AND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || operand_equal_p (_q30, _p0, 0))
		    {
		      {
			tree captures[5] ATTRIBUTE_UNUSED = { _q30, _p1, _p1, _q31, _p0 };
			if (gimple_simplify_84 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || operand_equal_p (_q31, _p0, 0))
		    {
		      {
			tree captures[5] ATTRIBUTE_UNUSED = { _q31, _p1, _p1, _q30, _p0 };
			if (gimple_simplify_84 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case PLUS_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[0])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1607;
					    {
					      res_op->set_op (MINUS_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[2];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 954, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1607:;
					  }
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q51 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[0])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1608;
					    {
					      res_op->set_op (MINUS_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[2];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 954, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1608:;
					  }
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _q50 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[0])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1609;
					    {
					      res_op->set_op (MINUS_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[2];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 954, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1609:;
					  }
				      }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _q51 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[0])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1610;
					    {
					      res_op->set_op (MINUS_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[2];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 954, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1610:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[0])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1611;
					    {
					      res_op->set_op (MINUS_EXPR, type, 2);
					      res_op->ops[0] = captures[0];
					      res_op->ops[1] = captures[2];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 955, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1611:;
					  }
				      }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q51 };
					if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[1]))
 || TYPE_OVERFLOW_WRAPS (TREE_TYPE (captures[1])))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1612;
					    {
					      res_op->set_op (MINUS_EXPR, type, 2);
					      res_op->ops[0] = captures[2];
					      res_op->ops[1] = captures[1];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 956, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1612:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case POINTER_DIFF_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case POINTER_DIFF_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q50 };
					if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 && !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (captures[2]))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1613;
					    {
					      res_op->set_op (POINTER_DIFF_EXPR, type, 2);
					      res_op->ops[0] = captures[1];
					      res_op->ops[1] = captures[3];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 957, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1613:;
					  }
				      }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q51 };
					if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[0]))
 && !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (captures[1]))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1614;
					    {
					      res_op->set_op (POINTER_DIFF_EXPR, type, 2);
					      res_op->ops[0] = captures[3];
					      res_op->ops[1] = captures[2];
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 958, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1614:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NEGATE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q40 };
				    if (gimple_simplify_85 (res_op, seq, valueize, type, captures))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
		    if (gimple_simplify_85 (res_op, seq, valueize, type, captures))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q21 };
			      if (gimple_simplify_86 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _q40, _q20 };
			      if (gimple_simplify_86 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
}
		  }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_86 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			if (gimple_simplify_86 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q21 };
			      if (gimple_simplify_87 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
}
		  }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_87 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_nop_convert (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      switch (TREE_CODE (_q20))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q20))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case PLUS_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      tree _q31 = gimple_assign_rhs2 (_a1);
		      _q31 = do_valueize (valueize, _q31);
		      if (tree_swap_operands_p (_q30, _q31))
		        std::swap (_q30, _q31);
		      {
			tree _q30_pops[1];
			if (gimple_nop_convert (_q30, _q30_pops, valueize))
			  {
			    tree _q40 = _q30_pops[0];
			    if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			      {
				{
				  tree captures[2] ATTRIBUTE_UNUSED = { _q40, _q31 };
				  if (gimple_simplify_86 (res_op, seq, valueize, type, captures))
				    return true;
				}
			      }
}
		      }
		      {
			tree _q31_pops[1];
			if (gimple_nop_convert (_q31, _q31_pops, valueize))
			  {
			    tree _q50 = _q31_pops[0];
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				{
				  tree captures[2] ATTRIBUTE_UNUSED = { _q50, _q30 };
				  if (gimple_simplify_86 (res_op, seq, valueize, type, captures))
				    return true;
				}
			      }
}
		      }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q31 };
			    if (gimple_simplify_86 (res_op, seq, valueize, type, captures))
			      return true;
			  }
		        }
		      if ((_p1 == _q31 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q31, 0) && types_match (_p1, _q31)))
			{
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q31, _q30 };
			    if (gimple_simplify_86 (res_op, seq, valueize, type, captures))
			      return true;
			  }
		        }
		      break;
		    }
		  case MINUS_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      tree _q31 = gimple_assign_rhs2 (_a1);
		      _q31 = do_valueize (valueize, _q31);
		      {
			tree _q30_pops[1];
			if (gimple_nop_convert (_q30, _q30_pops, valueize))
			  {
			    tree _q40 = _q30_pops[0];
			    if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			      {
				{
				  tree captures[2] ATTRIBUTE_UNUSED = { _q40, _q31 };
				  if (gimple_simplify_87 (res_op, seq, valueize, type, captures))
				    return true;
				}
			      }
}
		      }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q31 };
			    if (gimple_simplify_87 (res_op, seq, valueize, type, captures))
			      return true;
			  }
		        }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
}
}
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PLUS_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  {
		    tree _q30_pops[1];
		    if (gimple_nop_convert (_q30, _q30_pops, valueize))
		      {
			tree _q40 = _q30_pops[0];
			if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q31 };
			      if (gimple_simplify_88 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
}
		  }
		  {
		    tree _q31_pops[1];
		    if (gimple_nop_convert (_q31, _q31_pops, valueize))
		      {
			tree _q50 = _q31_pops[0];
			if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _p0, 0) && types_match (_q50, _p0)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			      if (gimple_simplify_88 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
}
		  }
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q31 };
			if (gimple_simplify_88 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			if (gimple_simplify_88 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  {
		    tree _q30_pops[1];
		    if (gimple_nop_convert (_q30, _q30_pops, valueize))
		      {
			tree _q40 = _q30_pops[0];
			if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q31 };
			      if (gimple_simplify_89 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
}
		  }
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q31 };
			if (gimple_simplify_89 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p1_pops[1];
  if (gimple_nop_convert (_p1, _p1_pops, valueize))
    {
      tree _q30 = _p1_pops[0];
      switch (TREE_CODE (_q30))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q30))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case PLUS_EXPR:
		    {
		      tree _q40 = gimple_assign_rhs1 (_a1);
		      _q40 = do_valueize (valueize, _q40);
		      tree _q41 = gimple_assign_rhs2 (_a1);
		      _q41 = do_valueize (valueize, _q41);
		      if (tree_swap_operands_p (_q40, _q41))
		        std::swap (_q40, _q41);
		      {
			tree _q40_pops[1];
			if (gimple_nop_convert (_q40, _q40_pops, valueize))
			  {
			    tree _q50 = _q40_pops[0];
			    if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _p0, 0) && types_match (_q50, _p0)))
			      {
				{
				  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q41 };
				  if (gimple_simplify_88 (res_op, seq, valueize, type, captures))
				    return true;
				}
			      }
}
		      }
		      {
			tree _q41_pops[1];
			if (gimple_nop_convert (_q41, _q41_pops, valueize))
			  {
			    tree _q60 = _q41_pops[0];
			    if ((_q60 == _p0 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p0, 0) && types_match (_q60, _p0)))
			      {
				{
				  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q40 };
				  if (gimple_simplify_88 (res_op, seq, valueize, type, captures))
				    return true;
				}
			      }
}
		      }
		      if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
			{
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q41 };
			    if (gimple_simplify_88 (res_op, seq, valueize, type, captures))
			      return true;
			  }
		        }
		      if ((_q41 == _p0 && ! TREE_SIDE_EFFECTS (_q41)) || (operand_equal_p (_q41, _p0, 0) && types_match (_q41, _p0)))
			{
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q40 };
			    if (gimple_simplify_88 (res_op, seq, valueize, type, captures))
			      return true;
			  }
		        }
		      break;
		    }
		  case MINUS_EXPR:
		    {
		      tree _q40 = gimple_assign_rhs1 (_a1);
		      _q40 = do_valueize (valueize, _q40);
		      tree _q41 = gimple_assign_rhs2 (_a1);
		      _q41 = do_valueize (valueize, _q41);
		      {
			tree _q40_pops[1];
			if (gimple_nop_convert (_q40, _q40_pops, valueize))
			  {
			    tree _q50 = _q40_pops[0];
			    if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _p0, 0) && types_match (_q50, _p0)))
			      {
				{
				  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q41 };
				  if (gimple_simplify_89 (res_op, seq, valueize, type, captures))
				    return true;
				}
			      }
}
		      }
		      if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
			{
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q41 };
			    if (gimple_simplify_89 (res_op, seq, valueize, type, captures))
			      return true;
			  }
		        }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
}
}
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q51 };
					if (gimple_simplify_90 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _q51 };
					if (gimple_simplify_90 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (CONSTANT_CLASS_P (_q21))
		    {
		      if (CONSTANT_CLASS_P (_p1))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_55 (res_op, seq, valueize, type, captures, PLUS_EXPR, MINUS_EXPR, MINUS_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (CONSTANT_CLASS_P (_q21))
		    {
		      if (CONSTANT_CLASS_P (_p1))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_55 (res_op, seq, valueize, type, captures, MINUS_EXPR, PLUS_EXPR, MINUS_EXPR))
			      return true;
			  }
		        }
		    }
		  if (CONSTANT_CLASS_P (_q20))
		    {
		      if (CONSTANT_CLASS_P (_p1))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_56 (res_op, seq, valueize, type, captures, MINUS_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
				    if (gimple_simplify_61 (res_op, seq, valueize, type, captures, MINUS_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NEGATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_each_onep (_p1))
				    {
				      {
					tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
					if (gimple_simplify_92 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      case PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || operand_equal_p (_q60, _q30, 0))
						    {
						      {
							tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q30 };
							if (gimple_simplify_93 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
						  if ((_q60 == _q31 && ! TREE_SIDE_EFFECTS (_q60)) || operand_equal_p (_q60, _q31, 0))
						    {
						      {
							tree captures[3] ATTRIBUTE_UNUSED = { _q31, _q30, _q31 };
							if (gimple_simplify_93 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || operand_equal_p (_p1, _q30, 0))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q30 };
					if (gimple_simplify_93 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
				  if ((_p1 == _q31 && ! TREE_SIDE_EFFECTS (_p1)) || operand_equal_p (_p1, _q31, 0))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q31, _q30, _q31 };
					if (gimple_simplify_93 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      case POINTER_PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || operand_equal_p (_q60, _q30, 0))
						    {
						      {
							tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _q30 };
							if (!TYPE_SATURATING (type)
)
							  {
							    if ((!FLOAT_TYPE_P (type) || flag_associative_math)
 && !FIXED_POINT_TYPE_P (type)
)
							      {
								if (element_precision (type) <= element_precision (TREE_TYPE (captures[1]))
 || (POINTER_TYPE_P (TREE_TYPE (captures[0]))
 && TREE_CODE (captures[1]) == INTEGER_CST
 && tree_int_cst_sign_bit (captures[1]) == 0)
)
								  {
								    gimple_seq *lseq = seq;
								    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1615;
								    {
								      res_op->set_op (NOP_EXPR, type, 1);
								      res_op->ops[0] = captures[1];
								      res_op->resimplify (lseq, valueize);
								      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 959, __FILE__, __LINE__, true);
								      return true;
								    }
next_after_fail1615:;
								  }
							      }
							  }
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case PLUS_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || operand_equal_p (_q50, _q20, 0))
						    {
						      {
							tree captures[3] ATTRIBUTE_UNUSED = { _q50, _q51, _q20 };
							if (gimple_simplify_94 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
						  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || operand_equal_p (_q51, _q20, 0))
						    {
						      {
							tree captures[3] ATTRIBUTE_UNUSED = { _q51, _q50, _q20 };
							if (gimple_simplify_94 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (integer_each_onep (_p1))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_92 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_nop_convert (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      switch (TREE_CODE (_q20))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q20))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case PLUS_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      tree _q31 = gimple_assign_rhs2 (_a1);
		      _q31 = do_valueize (valueize, _q31);
		      if (tree_swap_operands_p (_q30, _q31))
		        std::swap (_q30, _q31);
		      if (CONSTANT_CLASS_P (_q31))
			{
			  if (CONSTANT_CLASS_P (_p1))
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p1 };
				if (gimple_simplify_55 (res_op, seq, valueize, type, captures, PLUS_EXPR, MINUS_EXPR, MINUS_EXPR))
				  return true;
			      }
			    }
		        }
		      break;
		    }
		  case MINUS_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      tree _q31 = gimple_assign_rhs2 (_a1);
		      _q31 = do_valueize (valueize, _q31);
		      if (CONSTANT_CLASS_P (_q31))
			{
			  if (CONSTANT_CLASS_P (_p1))
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p1 };
				if (gimple_simplify_55 (res_op, seq, valueize, type, captures, MINUS_EXPR, PLUS_EXPR, MINUS_EXPR))
				  return true;
			      }
			    }
		        }
		      if (CONSTANT_CLASS_P (_q30))
			{
			  if (CONSTANT_CLASS_P (_p1))
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p1 };
				if (gimple_simplify_56 (res_op, seq, valueize, type, captures, MINUS_EXPR))
				  return true;
			      }
			    }
		        }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
}
}
if (CONSTANT_CLASS_P (_p0))
  {
    switch (TREE_CODE (_p1))
      {
      case SSA_NAME:
        if (gimple *_d1 = get_def (valueize, _p1))
          {
	    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	      switch (gimple_assign_rhs_code (_a1))
		{
		case MINUS_EXPR:
		  {
		    tree _q30 = gimple_assign_rhs1 (_a1);
		    _q30 = do_valueize (valueize, _q30);
		    tree _q31 = gimple_assign_rhs2 (_a1);
		    _q31 = do_valueize (valueize, _q31);
		    if (CONSTANT_CLASS_P (_q30))
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q31 };
			  if (gimple_simplify_91 (res_op, seq, valueize, type, captures))
			    return true;
			}
		      }
		    break;
		  }
		default:;
		}
          }
        break;
      default:;
      }
  {
    tree _p1_pops[1];
    if (gimple_nop_convert (_p1, _p1_pops, valueize))
      {
	tree _q30 = _p1_pops[0];
	switch (TREE_CODE (_q30))
	  {
	  case SSA_NAME:
	    if (gimple *_d1 = get_def (valueize, _q30))
	      {
		if (gassign *_a1 = dyn_cast <gassign *> (_d1))
		  switch (gimple_assign_rhs_code (_a1))
		    {
		    case MINUS_EXPR:
		      {
			tree _q40 = gimple_assign_rhs1 (_a1);
			_q40 = do_valueize (valueize, _q40);
			tree _q41 = gimple_assign_rhs2 (_a1);
			_q41 = do_valueize (valueize, _q41);
			if (CONSTANT_CLASS_P (_q40))
			  {
			    {
			      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q40, _q41 };
			      if (gimple_simplify_91 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
		        break;
		      }
		    default:;
		    }
	      }
	    break;
          default:;
          }
}
  }
  }
if (integer_all_onesp (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p1 };
      if (!TYPE_SATURATING (type)
)
	{
	  if ((!FLOAT_TYPE_P (type) || flag_associative_math)
 && !FIXED_POINT_TYPE_P (type)
)
	    {
	      if (TREE_CODE (type) != COMPLEX_TYPE
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1616;
		  {
		    res_op->set_op (BIT_NOT_EXPR, type, 1);
		    res_op->ops[0] = captures[0];
		    res_op->resimplify (lseq, valueize);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 960, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail1616:;
		}
	    }
	}
    }
  }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case PLUS_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || operand_equal_p (_q40, _p0, 0))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q40, _q41, _p0 };
					if (gimple_simplify_94 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
				  if ((_q41 == _p0 && ! TREE_SIDE_EFFECTS (_q41)) || operand_equal_p (_q41, _p0, 0))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q41, _q40, _p0 };
					if (gimple_simplify_94 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case POINTER_PLUS_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || operand_equal_p (_q50, _q20, 0))
						    {
						      {
							tree captures[3] ATTRIBUTE_UNUSED = { _q50, _q51, _q20 };
							if (!TYPE_SATURATING (type)
)
							  {
							    if ((!FLOAT_TYPE_P (type) || flag_associative_math)
 && !FIXED_POINT_TYPE_P (type)
)
							      {
								if (INTEGRAL_TYPE_P (type)
 && TYPE_OVERFLOW_UNDEFINED (type)
 && TREE_CODE (captures[1]) != INTEGER_CST
 && element_precision (type) <= element_precision (TREE_TYPE (captures[1]))
)
								  {
								    {
 tree utype = unsigned_type_for (type);
									gimple_seq *lseq = seq;
									if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1617;
									{
									  res_op->set_op (NOP_EXPR, type, 1);
									  {
									    tree _o1[1], _r1;
									    {
									      tree _o2[1], _r2;
									      _o2[0] = captures[1];
									      if (utype != TREE_TYPE (_o2[0])
									          && !useless_type_conversion_p (utype, TREE_TYPE (_o2[0])))
										{
										  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, utype, _o2[0]);
										  tem_op.resimplify (lseq, valueize);
										  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
										  if (!_r2) goto next_after_fail1617;
									        }
									      else
									        _r2 = _o2[0];
									      _o1[0] = _r2;
									    }
									    gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
									    tem_op.resimplify (lseq, valueize);
									    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
									    if (!_r1) goto next_after_fail1617;
									    res_op->ops[0] = _r1;
									  }
									  res_op->resimplify (lseq, valueize);
									  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 961, __FILE__, __LINE__, true);
									  return true;
									}
next_after_fail1617:;
								    }
								  }
								else
								  {
								    if (element_precision (type) <= element_precision (TREE_TYPE (captures[1]))
 || (POINTER_TYPE_P (TREE_TYPE (captures[0]))
 && TREE_CODE (captures[1]) == INTEGER_CST
 && tree_int_cst_sign_bit (captures[1]) == 0)
)
								      {
									gimple_seq *lseq = seq;
									if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1618;
									{
									  res_op->set_op (NEGATE_EXPR, type, 1);
									  {
									    tree _o1[1], _r1;
									    _o1[0] = captures[1];
									    if (type != TREE_TYPE (_o1[0])
									        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
									      {
										gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
										tem_op.resimplify (lseq, valueize);
										_r1 = maybe_push_res_to_seq (&tem_op, lseq);
										if (!_r1) goto next_after_fail1618;
									      }
									    else
									      _r1 = _o1[0];
									    res_op->ops[0] = _r1;
									  }
									  res_op->resimplify (lseq, valueize);
									  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 962, __FILE__, __LINE__, true);
									  return true;
									}
next_after_fail1618:;
								      }
								  }
							      }
							  }
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  switch (TREE_CODE (_q60))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q60))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case PLUS_EXPR:
							        {
								  tree _q70 = gimple_assign_rhs1 (_a4);
								  _q70 = do_valueize (valueize, _q70);
								  tree _q71 = gimple_assign_rhs2 (_a4);
								  _q71 = do_valueize (valueize, _q71);
								  if (tree_swap_operands_p (_q70, _q71))
								    std::swap (_q70, _q71);
								  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || operand_equal_p (_q70, _q30, 0))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q71, _q30 };
									if (gimple_simplify_95 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
								  if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || operand_equal_p (_q71, _q30, 0))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q70, _q30 };
									if (gimple_simplify_95 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
								  if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || operand_equal_p (_q70, _q31, 0))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q31, _q30, _q71, _q31 };
									if (gimple_simplify_95 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
								  if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || operand_equal_p (_q71, _q31, 0))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q31, _q30, _q70, _q31 };
									if (gimple_simplify_95 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case POINTER_PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  switch (TREE_CODE (_q60))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q60))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case POINTER_PLUS_EXPR:
							        {
								  tree _q70 = gimple_assign_rhs1 (_a4);
								  _q70 = do_valueize (valueize, _q70);
								  tree _q71 = gimple_assign_rhs2 (_a4);
								  _q71 = do_valueize (valueize, _q71);
								  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || operand_equal_p (_q70, _q30, 0))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q71, _q30 };
									if (!TYPE_SATURATING (type)
)
									  {
									    if ((!FLOAT_TYPE_P (type) || flag_associative_math)
 && !FIXED_POINT_TYPE_P (type)
)
									      {
										if (INTEGRAL_TYPE_P (type)
 && TYPE_OVERFLOW_UNDEFINED (type)
 && element_precision (type) <= element_precision (TREE_TYPE (captures[1]))
)
										  {
										    {
 tree utype = unsigned_type_for (type);
											gimple_seq *lseq = seq;
											if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1619;
											{
											  res_op->set_op (NOP_EXPR, type, 1);
											  {
											    tree _o1[2], _r1;
											    {
											      tree _o2[1], _r2;
											      _o2[0] = captures[1];
											      if (utype != TREE_TYPE (_o2[0])
											          && !useless_type_conversion_p (utype, TREE_TYPE (_o2[0])))
												{
												  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, utype, _o2[0]);
												  tem_op.resimplify (lseq, valueize);
												  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
												  if (!_r2) goto next_after_fail1619;
											        }
											      else
											        _r2 = _o2[0];
											      _o1[0] = _r2;
											    }
											    {
											      tree _o2[1], _r2;
											      _o2[0] = captures[2];
											      if (utype != TREE_TYPE (_o2[0])
											          && !useless_type_conversion_p (utype, TREE_TYPE (_o2[0])))
												{
												  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, utype, _o2[0]);
												  tem_op.resimplify (lseq, valueize);
												  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
												  if (!_r2) goto next_after_fail1619;
											        }
											      else
											        _r2 = _o2[0];
											      _o1[1] = _r2;
											    }
											    gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
											    tem_op.resimplify (lseq, valueize);
											    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
											    if (!_r1) goto next_after_fail1619;
											    res_op->ops[0] = _r1;
											  }
											  res_op->resimplify (lseq, valueize);
											  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 963, __FILE__, __LINE__, true);
											  return true;
											}
next_after_fail1619:;
										    }
										  }
										else
										  {
										    if (element_precision (type) <= element_precision (TREE_TYPE (captures[1]))
 || (POINTER_TYPE_P (TREE_TYPE (captures[0]))
 && TREE_CODE (captures[1]) == INTEGER_CST
 && tree_int_cst_sign_bit (captures[1]) == 0
 && TREE_CODE (captures[2]) == INTEGER_CST
 && tree_int_cst_sign_bit (captures[2]) == 0)
)
										      {
											gimple_seq *lseq = seq;
											if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1620;
											{
											  res_op->set_op (MINUS_EXPR, type, 2);
											  {
											    tree _o1[1], _r1;
											    _o1[0] = captures[1];
											    if (type != TREE_TYPE (_o1[0])
											        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
											      {
												gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
												tem_op.resimplify (lseq, valueize);
												_r1 = maybe_push_res_to_seq (&tem_op, lseq);
												if (!_r1) goto next_after_fail1620;
											      }
											    else
											      _r1 = _o1[0];
											    res_op->ops[0] = _r1;
											  }
											  {
											    tree _o1[1], _r1;
											    _o1[0] = captures[2];
											    if (type != TREE_TYPE (_o1[0])
											        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
											      {
												gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
												tem_op.resimplify (lseq, valueize);
												_r1 = maybe_push_res_to_seq (&tem_op, lseq);
												if (!_r1) goto next_after_fail1620;
											      }
											    else
											      _r1 = _o1[0];
											    res_op->ops[1] = _r1;
											  }
											  res_op->resimplify (lseq, valueize);
											  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 964, __FILE__, __LINE__, true);
											  return true;
											}
next_after_fail1620:;
										      }
										  }
									      }
									  }
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MULT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MULT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_64 (res_op, seq, valueize, type, captures, MINUS_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50 };
					if (gimple_simplify_64 (res_op, seq, valueize, type, captures, MINUS_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51 };
					if (gimple_simplify_64 (res_op, seq, valueize, type, captures, MINUS_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50 };
					if (gimple_simplify_64 (res_op, seq, valueize, type, captures, MINUS_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MULT_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _q31 };
			if (gimple_simplify_65 (res_op, seq, valueize, type, captures, MINUS_EXPR))
			  return true;
		      }
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _q30 };
			if (gimple_simplify_65 (res_op, seq, valueize, type, captures, MINUS_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MULT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			if (gimple_simplify_66 (res_op, seq, valueize, type, captures, MINUS_EXPR))
			  return true;
		      }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q21, _q20 };
			if (gimple_simplify_66 (res_op, seq, valueize, type, captures, MINUS_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MULT_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
				    {
				      if (gimple_zero_one_valued_p (_q31, valueize))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q41, _q31 };
					    if (gimple_simplify_96 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		if (gimple_zero_one_valued_p (_q30, valueize))
		  {
		    switch (TREE_CODE (_q31))
		      {
		      case SSA_NAME:
		        if (gimple *_d2 = get_def (valueize, _q31))
		          {
			    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			      switch (gimple_assign_rhs_code (_a2))
				{
				case MINUS_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a2);
				    _q50 = do_valueize (valueize, _q50);
				    tree _q51 = gimple_assign_rhs2 (_a2);
				    _q51 = do_valueize (valueize, _q51);
				    if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _p0, 0) && types_match (_q50, _p0)))
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q51, _q30 };
					  if (gimple_simplify_96 (res_op, seq, valueize, type, captures))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q60 = gimple_assign_rhs1 (_a2);
				  _q60 = do_valueize (valueize, _q60);
				  tree _q61 = gimple_assign_rhs2 (_a2);
				  _q61 = do_valueize (valueize, _q61);
				  tree _q62 = gimple_assign_rhs3 (_a2);
				  _q62 = do_valueize (valueize, _q62);
				  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1, _q61, _q62 };
					if (TREE_CODE_CLASS (MINUS_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]), ERROR_MARK)
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]),
 TREE_TYPE (captures[1]), ERROR_MARK))
)
					  {
					    gimple_seq *lseq = seq;
					    if (lseq
					        && (!single_use (captures[0])
					            || !single_use (captures[4])))
					      lseq = NULL;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1621;
					    {
					      res_op->set_op (VEC_COND_EXPR, type, 3);
					      res_op->ops[0] = captures[1];
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[2];
						_o1[1] = captures[5];
						gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail1621;
						res_op->ops[1] = _r1;
					      }
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[3];
						_o1[1] = captures[6];
						gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail1621;
						res_op->ops[2] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 925, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1621:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1 };
		    if (TREE_CODE_CLASS (MINUS_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]), ERROR_MARK)
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]),
 TREE_TYPE (captures[1]), ERROR_MARK))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[0])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1622;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[1];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[2];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail1622;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[3];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail1622;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 926, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail1622:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_zerop (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p1 };
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1623;
      {
	res_op->set_op (NEGATE_EXPR, type, 1);
	res_op->ops[0] = captures[0];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 965, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1623:;
    }
  }
if (real_zerop (_p0))
  {
    {
      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
      if (fold_real_zero_addition_p (type, captures[1], captures[0], 0)
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1624;
	  {
	    res_op->set_op (NEGATE_EXPR, type, 1);
	    res_op->ops[0] = captures[1];
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 966, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1624:;
	}
    }
  }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q30, _q31, _q32 };
		    if (TREE_CODE_CLASS (MINUS_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[3]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[2]), ERROR_MARK)
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[3]),
 TREE_TYPE (captures[2]), ERROR_MARK))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[1])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1625;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[2];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[3];
			    gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail1625;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail1625;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 927, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail1625:;
		      }
		  }
		  if (integer_each_onep (_q31))
		    {
		      if (integer_zerop (_q32))
			{
			  {
			    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q30, _q31, _q32 };
			    if (gimple_simplify_97 (res_op, seq, valueize, type, captures))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case VIEW_CONVERT_EXPR:
	        {
		  tree _q30 = TREE_OPERAND (gimple_assign_rhs1 (_a1), 0);
		  if ((TREE_CODE (_q30) == SSA_NAME
		       || is_gimple_min_invariant (_q30)))
		    {
		      _q30 = do_valueize (valueize, _q30);
		      switch (TREE_CODE (_q30))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q30))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case VEC_COND_EXPR:
				    {
				      tree _q40 = gimple_assign_rhs1 (_a2);
				      _q40 = do_valueize (valueize, _q40);
				      tree _q41 = gimple_assign_rhs2 (_a2);
				      _q41 = do_valueize (valueize, _q41);
				      tree _q42 = gimple_assign_rhs3 (_a2);
				      _q42 = do_valueize (valueize, _q42);
				      if (integer_each_onep (_q41))
					{
					  if (integer_zerop (_q42))
					    {
					      {
						tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q30, _q40, _q41, _q42 };
						if (gimple_simplify_97 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case RDIV_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case RDIV_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					if (gimple_simplify_70 (res_op, seq, valueize, type, captures, MINUS_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			    switch (gimple_call_combined_fn (_c2))
			      {
			      case CFN_BUILT_IN_POPCOUNT:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    switch (TREE_CODE (_q21))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q21))
				          {
					    if (gcall *_c3 = dyn_cast <gcall *> (_d3))
					      switch (gimple_call_combined_fn (_c3))
						{
						case CFN_BUILT_IN_POPCOUNT:
						  if (gimple_call_num_args (_c3) == 1)
						    {
						      tree _q50 = gimple_call_arg (_c3, 0);
						      _q50 = do_valueize (valueize, _q50);
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gcall *_c4 = dyn_cast <gcall *> (_d4))
							        switch (gimple_call_combined_fn (_c4))
								  {
								  case CFN_BUILT_IN_POPCOUNT:
								    if (gimple_call_num_args (_c4) == 1)
								      {
									tree _q70 = gimple_call_arg (_c4, 0);
									_q70 = do_valueize (valueize, _q70);
									switch (TREE_CODE (_q70))
									  {
									  case SSA_NAME:
									    if (gimple *_d5 = get_def (valueize, _q70))
									      {
										if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										  switch (gimple_assign_rhs_code (_a5))
										    {
										    case BIT_AND_EXPR:
										      {
											tree _q80 = gimple_assign_rhs1 (_a5);
											_q80 = do_valueize (valueize, _q80);
											tree _q81 = gimple_assign_rhs2 (_a5);
											_q81 = do_valueize (valueize, _q81);
											if (tree_swap_operands_p (_q80, _q81))
											  std::swap (_q80, _q81);
											if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
											  {
											    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, BIT_IOR_EXPR, CFN_BUILT_IN_POPCOUNT))
												    return true;
												}
											      }
											  }
											if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
											  {
											    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, BIT_IOR_EXPR, CFN_BUILT_IN_POPCOUNT))
												    return true;
												}
											      }
											  }
										        break;
										      }
										    case BIT_IOR_EXPR:
										      {
											tree _q80 = gimple_assign_rhs1 (_a5);
											_q80 = do_valueize (valueize, _q80);
											tree _q81 = gimple_assign_rhs2 (_a5);
											_q81 = do_valueize (valueize, _q81);
											if (tree_swap_operands_p (_q80, _q81))
											  std::swap (_q80, _q81);
											if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
											  {
											    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR, CFN_BUILT_IN_POPCOUNT))
												    return true;
												}
											      }
											  }
											if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
											  {
											    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR, CFN_BUILT_IN_POPCOUNT))
												    return true;
												}
											      }
											  }
										        break;
										      }
										    default:;
										    }
									      }
									    break;
								          default:;
								          }
								      }
								    break;
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
						  break;
						default:;
						}
				          }
				        break;
				      default:;
				      }
			          }
			        break;
			      case CFN_BUILT_IN_POPCOUNTLL:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    switch (TREE_CODE (_q21))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q21))
				          {
					    if (gcall *_c3 = dyn_cast <gcall *> (_d3))
					      switch (gimple_call_combined_fn (_c3))
						{
						case CFN_BUILT_IN_POPCOUNTLL:
						  if (gimple_call_num_args (_c3) == 1)
						    {
						      tree _q50 = gimple_call_arg (_c3, 0);
						      _q50 = do_valueize (valueize, _q50);
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gcall *_c4 = dyn_cast <gcall *> (_d4))
							        switch (gimple_call_combined_fn (_c4))
								  {
								  case CFN_BUILT_IN_POPCOUNTLL:
								    if (gimple_call_num_args (_c4) == 1)
								      {
									tree _q70 = gimple_call_arg (_c4, 0);
									_q70 = do_valueize (valueize, _q70);
									switch (TREE_CODE (_q70))
									  {
									  case SSA_NAME:
									    if (gimple *_d5 = get_def (valueize, _q70))
									      {
										if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										  switch (gimple_assign_rhs_code (_a5))
										    {
										    case BIT_AND_EXPR:
										      {
											tree _q80 = gimple_assign_rhs1 (_a5);
											_q80 = do_valueize (valueize, _q80);
											tree _q81 = gimple_assign_rhs2 (_a5);
											_q81 = do_valueize (valueize, _q81);
											if (tree_swap_operands_p (_q80, _q81))
											  std::swap (_q80, _q81);
											if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
											  {
											    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, BIT_IOR_EXPR, CFN_BUILT_IN_POPCOUNTLL))
												    return true;
												}
											      }
											  }
											if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
											  {
											    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, BIT_IOR_EXPR, CFN_BUILT_IN_POPCOUNTLL))
												    return true;
												}
											      }
											  }
										        break;
										      }
										    case BIT_IOR_EXPR:
										      {
											tree _q80 = gimple_assign_rhs1 (_a5);
											_q80 = do_valueize (valueize, _q80);
											tree _q81 = gimple_assign_rhs2 (_a5);
											_q81 = do_valueize (valueize, _q81);
											if (tree_swap_operands_p (_q80, _q81))
											  std::swap (_q80, _q81);
											if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
											  {
											    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR, CFN_BUILT_IN_POPCOUNTLL))
												    return true;
												}
											      }
											  }
											if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
											  {
											    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR, CFN_BUILT_IN_POPCOUNTLL))
												    return true;
												}
											      }
											  }
										        break;
										      }
										    default:;
										    }
									      }
									    break;
								          default:;
								          }
								      }
								    break;
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
						  break;
						default:;
						}
				          }
				        break;
				      default:;
				      }
			          }
			        break;
			      case CFN_POPCOUNT:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    switch (TREE_CODE (_q21))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q21))
				          {
					    if (gcall *_c3 = dyn_cast <gcall *> (_d3))
					      switch (gimple_call_combined_fn (_c3))
						{
						case CFN_POPCOUNT:
						  if (gimple_call_num_args (_c3) == 1)
						    {
						      tree _q50 = gimple_call_arg (_c3, 0);
						      _q50 = do_valueize (valueize, _q50);
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gcall *_c4 = dyn_cast <gcall *> (_d4))
							        switch (gimple_call_combined_fn (_c4))
								  {
								  case CFN_POPCOUNT:
								    if (gimple_call_num_args (_c4) == 1)
								      {
									tree _q70 = gimple_call_arg (_c4, 0);
									_q70 = do_valueize (valueize, _q70);
									switch (TREE_CODE (_q70))
									  {
									  case SSA_NAME:
									    if (gimple *_d5 = get_def (valueize, _q70))
									      {
										if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										  switch (gimple_assign_rhs_code (_a5))
										    {
										    case BIT_AND_EXPR:
										      {
											tree _q80 = gimple_assign_rhs1 (_a5);
											_q80 = do_valueize (valueize, _q80);
											tree _q81 = gimple_assign_rhs2 (_a5);
											_q81 = do_valueize (valueize, _q81);
											if (tree_swap_operands_p (_q80, _q81))
											  std::swap (_q80, _q81);
											if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
											  {
											    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, BIT_IOR_EXPR, CFN_POPCOUNT))
												    return true;
												}
											      }
											  }
											if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
											  {
											    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, BIT_IOR_EXPR, CFN_POPCOUNT))
												    return true;
												}
											      }
											  }
										        break;
										      }
										    case BIT_IOR_EXPR:
										      {
											tree _q80 = gimple_assign_rhs1 (_a5);
											_q80 = do_valueize (valueize, _q80);
											tree _q81 = gimple_assign_rhs2 (_a5);
											_q81 = do_valueize (valueize, _q81);
											if (tree_swap_operands_p (_q80, _q81))
											  std::swap (_q80, _q81);
											if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
											  {
											    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR, CFN_POPCOUNT))
												    return true;
												}
											      }
											  }
											if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
											  {
											    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR, CFN_POPCOUNT))
												    return true;
												}
											      }
											  }
										        break;
										      }
										    default:;
										    }
									      }
									    break;
								          default:;
								          }
								      }
								    break;
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
						  break;
						default:;
						}
				          }
				        break;
				      default:;
				      }
			          }
			        break;
			      case CFN_BUILT_IN_POPCOUNTIMAX:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    switch (TREE_CODE (_q21))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q21))
				          {
					    if (gcall *_c3 = dyn_cast <gcall *> (_d3))
					      switch (gimple_call_combined_fn (_c3))
						{
						case CFN_BUILT_IN_POPCOUNTIMAX:
						  if (gimple_call_num_args (_c3) == 1)
						    {
						      tree _q50 = gimple_call_arg (_c3, 0);
						      _q50 = do_valueize (valueize, _q50);
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gcall *_c4 = dyn_cast <gcall *> (_d4))
							        switch (gimple_call_combined_fn (_c4))
								  {
								  case CFN_BUILT_IN_POPCOUNTIMAX:
								    if (gimple_call_num_args (_c4) == 1)
								      {
									tree _q70 = gimple_call_arg (_c4, 0);
									_q70 = do_valueize (valueize, _q70);
									switch (TREE_CODE (_q70))
									  {
									  case SSA_NAME:
									    if (gimple *_d5 = get_def (valueize, _q70))
									      {
										if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										  switch (gimple_assign_rhs_code (_a5))
										    {
										    case BIT_AND_EXPR:
										      {
											tree _q80 = gimple_assign_rhs1 (_a5);
											_q80 = do_valueize (valueize, _q80);
											tree _q81 = gimple_assign_rhs2 (_a5);
											_q81 = do_valueize (valueize, _q81);
											if (tree_swap_operands_p (_q80, _q81))
											  std::swap (_q80, _q81);
											if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
											  {
											    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, BIT_IOR_EXPR, CFN_BUILT_IN_POPCOUNTIMAX))
												    return true;
												}
											      }
											  }
											if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
											  {
											    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, BIT_IOR_EXPR, CFN_BUILT_IN_POPCOUNTIMAX))
												    return true;
												}
											      }
											  }
										        break;
										      }
										    case BIT_IOR_EXPR:
										      {
											tree _q80 = gimple_assign_rhs1 (_a5);
											_q80 = do_valueize (valueize, _q80);
											tree _q81 = gimple_assign_rhs2 (_a5);
											_q81 = do_valueize (valueize, _q81);
											if (tree_swap_operands_p (_q80, _q81))
											  std::swap (_q80, _q81);
											if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
											  {
											    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR, CFN_BUILT_IN_POPCOUNTIMAX))
												    return true;
												}
											      }
											  }
											if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
											  {
											    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR, CFN_BUILT_IN_POPCOUNTIMAX))
												    return true;
												}
											      }
											  }
										        break;
										      }
										    default:;
										    }
									      }
									    break;
								          default:;
								          }
								      }
								    break;
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
						  break;
						default:;
						}
				          }
				        break;
				      default:;
				      }
			          }
			        break;
			      case CFN_BUILT_IN_POPCOUNTL:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    switch (TREE_CODE (_q21))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q21))
				          {
					    if (gcall *_c3 = dyn_cast <gcall *> (_d3))
					      switch (gimple_call_combined_fn (_c3))
						{
						case CFN_BUILT_IN_POPCOUNTL:
						  if (gimple_call_num_args (_c3) == 1)
						    {
						      tree _q50 = gimple_call_arg (_c3, 0);
						      _q50 = do_valueize (valueize, _q50);
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gcall *_c4 = dyn_cast <gcall *> (_d4))
							        switch (gimple_call_combined_fn (_c4))
								  {
								  case CFN_BUILT_IN_POPCOUNTL:
								    if (gimple_call_num_args (_c4) == 1)
								      {
									tree _q70 = gimple_call_arg (_c4, 0);
									_q70 = do_valueize (valueize, _q70);
									switch (TREE_CODE (_q70))
									  {
									  case SSA_NAME:
									    if (gimple *_d5 = get_def (valueize, _q70))
									      {
										if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										  switch (gimple_assign_rhs_code (_a5))
										    {
										    case BIT_AND_EXPR:
										      {
											tree _q80 = gimple_assign_rhs1 (_a5);
											_q80 = do_valueize (valueize, _q80);
											tree _q81 = gimple_assign_rhs2 (_a5);
											_q81 = do_valueize (valueize, _q81);
											if (tree_swap_operands_p (_q80, _q81))
											  std::swap (_q80, _q81);
											if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
											  {
											    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, BIT_IOR_EXPR, CFN_BUILT_IN_POPCOUNTL))
												    return true;
												}
											      }
											  }
											if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
											  {
											    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, BIT_IOR_EXPR, CFN_BUILT_IN_POPCOUNTL))
												    return true;
												}
											      }
											  }
										        break;
										      }
										    case BIT_IOR_EXPR:
										      {
											tree _q80 = gimple_assign_rhs1 (_a5);
											_q80 = do_valueize (valueize, _q80);
											tree _q81 = gimple_assign_rhs2 (_a5);
											_q81 = do_valueize (valueize, _q81);
											if (tree_swap_operands_p (_q80, _q81))
											  std::swap (_q80, _q81);
											if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
											  {
											    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR, CFN_BUILT_IN_POPCOUNTL))
												    return true;
												}
											      }
											  }
											if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
											  {
											    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
											      {
												{
												  tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q21, _q50, _p1, _q70 };
												  if (gimple_simplify_98 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR, CFN_BUILT_IN_POPCOUNTL))
												    return true;
												}
											      }
											  }
										        break;
										      }
										    default:;
										    }
									      }
									    break;
								          default:;
								          }
								      }
								    break;
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
						  break;
						default:;
						}
				          }
				        break;
				      default:;
				      }
			          }
			        break;
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case VEC_PERM_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MULT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (gimple_vec_same_elem_p (_q31, valueize))
				    {
				      if ((_q21 == _q20 && ! TREE_SIDE_EFFECTS (_q21)) || (operand_equal_p (_q21, _q20, 0) && types_match (_q21, _q20)))
					{
					  {
					    tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q22, _p1 };
					    if (gimple_simplify_99 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
				  if (gimple_vec_same_elem_p (_q30, valueize))
				    {
				      if ((_q21 == _q20 && ! TREE_SIDE_EFFECTS (_q21)) || (operand_equal_p (_q21, _q20, 0) && types_match (_q21, _q20)))
					{
					  {
					    tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q30, _q22, _p1 };
					    if (gimple_simplify_99 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MAX_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
				    {
				      switch (TREE_CODE (_q41))
				        {
					case INTEGER_CST:
					  {
					    switch (TREE_CODE (_q31))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q41, _q31 };
						    {
 auto i = wi::neg (wi::to_wide (captures[2]));
							if (wi::popcount (i) == 1
 && (wi::to_wide (captures[1])) == (i - 1)
)
							  {
							    if (TYPE_UNSIGNED (TREE_TYPE (captures[0]))
)
							      {
								gimple_seq *lseq = seq;
								if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1626;
								{
								  res_op->set_op (BIT_AND_EXPR, type, 2);
								  res_op->ops[0] = captures[0];
								  res_op->ops[1] = captures[1];
								  res_op->resimplify (lseq, valueize);
								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 967, __FILE__, __LINE__, true);
								  return true;
								}
next_after_fail1626:;
							      }
							    else
							      {
								gimple_seq *lseq = seq;
								if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1627;
								{
								  res_op->set_op (COND_EXPR, type, 3);
								  {
								    tree _o1[2], _r1;
								    _o1[0] = captures[0];
								    _o1[1] = captures[1];
								    gimple_match_op tem_op (res_op->cond.any_else (), LE_EXPR, boolean_type_node, _o1[0], _o1[1]);
								    tem_op.resimplify (lseq, valueize);
								    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
								    if (!_r1) goto next_after_fail1627;
								    res_op->ops[0] = _r1;
								  }
								  res_op->ops[1] = captures[0];
								  {
								    tree _o1[2], _r1;
								    _o1[0] = captures[0];
								    _o1[1] = captures[1];
								    gimple_match_op tem_op (res_op->cond.any_else (), BIT_AND_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
								    tem_op.resimplify (lseq, valueize);
								    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
								    if (!_r1) goto next_after_fail1627;
								    res_op->ops[2] = _r1;
								  }
								  res_op->resimplify (lseq, valueize);
								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 968, __FILE__, __LINE__, true);
								  return true;
								}
next_after_fail1627:;
							      }
							  }
						    }
						  }
					          break;
					        }
					      default:;
					      }
					    break;
					  }
				        default:;
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_PERM_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  if ((_q21 == _q20 && ! TREE_SIDE_EFFECTS (_q21)) || (operand_equal_p (_q21, _q20, 0) && types_match (_q21, _q20)))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case VEC_PERM_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      tree _q62 = gimple_assign_rhs3 (_a2);
				      _q62 = do_valueize (valueize, _q62);
				      if ((_q61 == _q60 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q60, 0) && types_match (_q61, _q60)))
					{
					  if ((_q62 == _q22 && ! TREE_SIDE_EFFECTS (_q62)) || (operand_equal_p (_q62, _q22, 0) && types_match (_q62, _q22)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q22, _q60 };
						if (VECTOR_INTEGER_TYPE_P (type)
)
						  {
						    gimple_seq *lseq = seq;
						    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1628;
						    {
						      res_op->set_op (VEC_PERM_EXPR, type, 3);
						      {
							tree _o1[2], _r1;
							_o1[0] = captures[0];
							_o1[1] = captures[2];
							gimple_match_op tem_op (res_op->cond.any_else (), MINUS_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
							tem_op.resimplify (lseq, valueize);
							_r1 = maybe_push_res_to_seq (&tem_op, lseq);
							if (!_r1) goto next_after_fail1628;
							captures[3] = _r1;
						      }
						      res_op->ops[0] = captures[3];
						      res_op->ops[1] = captures[3];
						      res_op->ops[2] = captures[1];
						      res_op->resimplify (lseq, valueize);
						      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 928, __FILE__, __LINE__, true);
						      return true;
						    }
next_after_fail1628:;
						  }
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_q22))
		        {
			case VECTOR_CST:
			  {
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p1))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					case VEC_PERM_EXPR:
					  {
					    tree _q60 = gimple_assign_rhs1 (_a2);
					    _q60 = do_valueize (valueize, _q60);
					    tree _q61 = gimple_assign_rhs2 (_a2);
					    _q61 = do_valueize (valueize, _q61);
					    tree _q62 = gimple_assign_rhs3 (_a2);
					    _q62 = do_valueize (valueize, _q62);
					    if ((_q61 == _q60 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q60, 0) && types_match (_q61, _q60)))
					      {
						if ((_q62 == _q22 && ! TREE_SIDE_EFFECTS (_q62)) || (operand_equal_p (_q62, _q22, 0) && types_match (_q62, _q22)))
						  {
						    switch (TREE_CODE (_q62))
						      {
						      case VECTOR_CST:
						        {
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q22, _q60 };
							    if (gimple_simplify_75 (res_op, seq, valueize, type, captures, MINUS_EXPR))
							      return true;
							  }
						          break;
						        }
						      default:;
						      }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    break;
			  }
		        default:;
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_RSHIFT_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case TRUNC_MOD_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  {
		    tree _q31_pops[1];
		    if (gimple_power_of_two_cand (_q31, _q31_pops, valueize))
		      {
			tree _q50 = _q31_pops[0];
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q30, _q31, _q50 };
			  if (gimple_simplify_372 (res_op, seq, valueize, type, captures, RSHIFT_EXPR, TRUNC_MOD_EXPR))
			    return true;
			}
}
		  }
	          break;
	        }
	      case FLOOR_MOD_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  {
		    tree _q31_pops[1];
		    if (gimple_power_of_two_cand (_q31, _q31_pops, valueize))
		      {
			tree _q50 = _q31_pops[0];
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q30, _q31, _q50 };
			  if (gimple_simplify_372 (res_op, seq, valueize, type, captures, RSHIFT_EXPR, FLOOR_MOD_EXPR))
			    return true;
			}
}
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
				{
 wide_int c = wi::to_wide (captures[2]);
 wide_int n = wi::to_wide (captures[3]);
 bool shift = RSHIFT_EXPR == RSHIFT_EXPR;
 value_range vr0, vr1, vr3;
				    if (INTEGRAL_TYPE_P (type)
 && get_range_query (cfun)->range_of_expr (vr0, captures[1])
)
				      {
					if ((shift ? wi::ctz (
c
) >= n.to_shwi ()
 : wi::multiple_of_p (
c
, n, TYPE_SIGN (type)))
 && get_range_query (cfun)->range_of_expr (vr1, captures[2])
 && range_op_handler (PLUS_EXPR).overflow_free_p (vr0, vr1)
 && get_range_query (cfun)->range_of_expr (vr3, captures[0])
 && !vr3.undefined_p ()
 && (TYPE_UNSIGNED (type)
 || (vr0.nonnegative_p () && vr3.nonnegative_p ())
 || (vr0.nonpositive_p () && vr3.nonpositive_p ()))
)
					  {
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1975;
					    {
					      res_op->set_op (PLUS_EXPR, type, 2);
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[1];
						_o1[1] = captures[3];
						gimple_match_op tem_op (res_op->cond.any_else (), RSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (lseq, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, lseq);
						if (!_r1) goto next_after_fail1975;
						res_op->ops[0] = _r1;
					      }
					      res_op->ops[1] =  wide_int_to_tree (type,
(shift ? wi::rshift (
c
, n, TYPE_SIGN (type))
 : wi::div_trunc (
c
, n, TYPE_SIGN (type)))
);
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1975:;
					  }
					else
					  {
					    if (!vr0.undefined_p () && TYPE_UNSIGNED (type) && c.sign_mask () < 0
 &&
(shift ? wi::ctz (
-c
) >= n.to_shwi ()
 : wi::multiple_of_p (
-c
, n, TYPE_SIGN (type)))
 && wi::geu_p (vr0.lower_bound (), -c)
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1976;
						{
						  res_op->set_op (PLUS_EXPR, type, 2);
						  {
						    tree _o1[2], _r1;
						    _o1[0] = captures[1];
						    _o1[1] = captures[3];
						    gimple_match_op tem_op (res_op->cond.any_else (), RSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						    tem_op.resimplify (lseq, valueize);
						    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r1) goto next_after_fail1976;
						    res_op->ops[0] = _r1;
						  }
						  res_op->ops[1] =  wide_int_to_tree (type, -
(shift ? wi::rshift (
-c
, n, TYPE_SIGN (type))
 : wi::div_trunc (
-c
, n, TYPE_SIGN (type)))
);
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1018, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail1976:;
					      }
					  }
				      }
				}
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  if (uniform_integer_cst_p (_p1))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_373 (res_op, seq, valueize, type, captures, RSHIFT_EXPR))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case INTEGER_CST:
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			  if (!TYPE_UNSIGNED (type)
 && TYPE_OVERFLOW_UNDEFINED (type)
)
			    {
			      {
 tree stype = TREE_TYPE (captures[2]);
 tree bt = truth_type_for (type);
 tree zeros = build_zero_cst (type);
 tree INTEGER_CST = NULL_TREE;
				  if (INTEGRAL_TYPE_P (type)
 && canonicalize_math_after_vectorization_p ()
 && wi::eq_p (wi::to_wide (captures[2]), TYPE_PRECISION (type) - 1)
)
				    {
				      gimple_seq *lseq = seq;
				      if (lseq
				          && (!single_use (captures[0])))
				        lseq = NULL;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1977;
				      {
					res_op->set_op (NEGATE_EXPR, type, 1);
					{
					  tree _o1[1], _r1;
					  {
					    tree _o2[2], _r2;
					    _o2[0] = captures[1];
					    _o2[1] =  zeros;
					    gimple_match_op tem_op (res_op->cond.any_else (), GT_EXPR, boolean_type_node, _o2[0], _o2[1]);
					    tem_op.resimplify (lseq, valueize);
					    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r2) goto next_after_fail1977;
					    _o1[0] = _r2;
					  }
					  if (type != TREE_TYPE (_o1[0])
					      && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
					    {
					      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
					      tem_op.resimplify (lseq, valueize);
					      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r1) goto next_after_fail1977;
					    }
					  else
					    _r1 = _o1[0];
					  res_op->ops[0] = _r1;
					}
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1038, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail1977:;
				    }
				  else
				    {
				      if (VECTOR_INTEGER_TYPE_P (type)
 && TYPE_MODE (bt) == TYPE_MODE (type)
 && expand_vec_cmp_expr_p (type, bt, GT_EXPR)
 && (INTEGER_CST = uniform_integer_cst_p (captures[2])) != NULL
 && wi::eq_p (wi::to_wide (INTEGER_CST), element_precision (type) - 1)
)
					{
					  gimple_seq *lseq = seq;
					  if (lseq
					      && (!single_use (captures[0])))
					    lseq = NULL;
					  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1978;
					  {
					    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
					    {
					      tree _o1[2], _r1;
					      _o1[0] = captures[1];
					      _o1[1] =  zeros;
					      gimple_match_op tem_op (res_op->cond.any_else (), GT_EXPR, bt, _o1[0], _o1[1]);
					      tem_op.resimplify (lseq, valueize);
					      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r1) goto next_after_fail1978;
					      res_op->ops[0] = _r1;
					    }
					    res_op->resimplify (lseq, valueize);
					    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1039, __FILE__, __LINE__, true);
					    return true;
					  }
next_after_fail1978:;
					}
				    }
			      }
			    }
			}
		        break;
		      }
		    case VECTOR_CST:
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			  if (!TYPE_UNSIGNED (type)
 && TYPE_OVERFLOW_UNDEFINED (type)
)
			    {
			      {
 tree stype = TREE_TYPE (captures[2]);
 tree bt = truth_type_for (type);
 tree zeros = build_zero_cst (type);
 tree VECTOR_CST = NULL_TREE;
				  if (INTEGRAL_TYPE_P (type)
 && canonicalize_math_after_vectorization_p ()
 && wi::eq_p (wi::to_wide (captures[2]), TYPE_PRECISION (type) - 1)
)
				    {
				      gimple_seq *lseq = seq;
				      if (lseq
				          && (!single_use (captures[0])))
				        lseq = NULL;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1979;
				      {
					res_op->set_op (NEGATE_EXPR, type, 1);
					{
					  tree _o1[1], _r1;
					  {
					    tree _o2[2], _r2;
					    _o2[0] = captures[1];
					    _o2[1] =  zeros;
					    gimple_match_op tem_op (res_op->cond.any_else (), GT_EXPR, boolean_type_node, _o2[0], _o2[1]);
					    tem_op.resimplify (lseq, valueize);
					    _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r2) goto next_after_fail1979;
					    _o1[0] = _r2;
					  }
					  if (type != TREE_TYPE (_o1[0])
					      && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
					    {
					      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
					      tem_op.resimplify (lseq, valueize);
					      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r1) goto next_after_fail1979;
					    }
					  else
					    _r1 = _o1[0];
					  res_op->ops[0] = _r1;
					}
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1038, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail1979:;
				    }
				  else
				    {
				      if (VECTOR_INTEGER_TYPE_P (type)
 && TYPE_MODE (bt) == TYPE_MODE (type)
 && expand_vec_cmp_expr_p (type, bt, GT_EXPR)
 && (VECTOR_CST = uniform_integer_cst_p (captures[2])) != NULL
 && wi::eq_p (wi::to_wide (VECTOR_CST), element_precision (type) - 1)
)
					{
					  gimple_seq *lseq = seq;
					  if (lseq
					      && (!single_use (captures[0])))
					    lseq = NULL;
					  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1980;
					  {
					    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
					    {
					      tree _o1[2], _r1;
					      _o1[0] = captures[1];
					      _o1[1] =  zeros;
					      gimple_match_op tem_op (res_op->cond.any_else (), GT_EXPR, bt, _o1[0], _o1[1]);
					      tem_op.resimplify (lseq, valueize);
					      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r1) goto next_after_fail1980;
					      res_op->ops[0] = _r1;
					    }
					    res_op->resimplify (lseq, valueize);
					    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1039, __FILE__, __LINE__, true);
					    return true;
					  }
next_after_fail1980:;
					}
				    }
			      }
			    }
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case LSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || operand_equal_p (_p1, _q21, 0))
			  {
			    {
			      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q21 };
			      if (gimple_simplify_383 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_nop_convert (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      switch (TREE_CODE (_q20))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q20))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case LSHIFT_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      tree _q31 = gimple_assign_rhs2 (_a1);
		      _q31 = do_valueize (valueize, _q31);
		      switch (TREE_CODE (_q31))
		        {
			case INTEGER_CST:
			  {
			    if ((_p1 == _q31 && ! TREE_SIDE_EFFECTS (_p1)) || operand_equal_p (_p1, _q31, 0))
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _p1, _q31 };
				  if (gimple_simplify_383 (res_op, seq, valueize, type, captures))
				    return true;
				}
			      }
			    break;
			  }
		        default:;
		        }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
}
}
if (integer_all_onesp (_p0))
  {
    {
      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
      if (!TYPE_UNSIGNED (type)
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1981;
	  {
	    tree tem;
	    tem = captures[0];
	    res_op->set_value (tem);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1040, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1981:;
	}
    }
  }
  if ((_p1 == _p0 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _p0, 0) && types_match (_p1, _p0)))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	gimple_seq *lseq = seq;
	if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1982;
	{
	  tree tem;
	  tem =  build_zero_cst (type);
	  res_op->set_value (tem);
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1041, __FILE__, __LINE__, true);
	  return true;
	}
next_after_fail1982:;
      }
    }
  if (integer_zerop (_p1))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_375 (res_op, seq, valueize, type, captures, RSHIFT_EXPR))
	  return true;
      }
    }
  if (integer_zerop (_p0))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_376 (res_op, seq, valueize, type, captures, RSHIFT_EXPR))
	  return true;
      }
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case CONSTRUCTOR:
	        {
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
		    if (gimple_simplify_378 (res_op, seq, valueize, type, captures, RSHIFT_EXPR))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
	{
	  {
	    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	    if (gimple_simplify_379 (res_op, seq, valueize, type, captures, RSHIFT_EXPR))
	      return true;
	  }
	}
      break;
    case VECTOR_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (gimple_simplify_377 (res_op, seq, valueize, type, captures, RSHIFT_EXPR))
	    return true;
	}
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case RSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_380 (res_op, seq, valueize, type, captures, RSHIFT_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case INTEGER_CST:
					    {
					      {
						tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _p1 };
						if (gimple_simplify_381 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, RSHIFT_EXPR))
						  return true;
					      }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case INTEGER_CST:
					    {
					      {
						tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _p1 };
						if (gimple_simplify_381 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR, RSHIFT_EXPR))
						  return true;
					      }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      case BIT_IOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case INTEGER_CST:
					    {
					      {
						tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _p1 };
						if (gimple_simplify_381 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, RSHIFT_EXPR))
						  return true;
					      }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
			  else if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			    switch (gimple_call_combined_fn (_c2))
			      {
			      case CFN_BUILT_IN_BSWAP128:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    switch (TREE_CODE (_p1))
				      {
				      case INTEGER_CST:
				        {
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
					    if (gimple_simplify_384 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP16:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    switch (TREE_CODE (_p1))
				      {
				      case INTEGER_CST:
				        {
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
					    if (gimple_simplify_384 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP32:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    switch (TREE_CODE (_p1))
				      {
				      case INTEGER_CST:
				        {
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
					    if (gimple_simplify_384 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP64:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    switch (TREE_CODE (_p1))
				      {
				      case INTEGER_CST:
				        {
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _p1 };
					    if (gimple_simplify_384 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
			          }
			        break;
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21, _p1 };
				if (gimple_simplify_382 (res_op, seq, valueize, type, captures, BIT_AND_EXPR, RSHIFT_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21, _p1 };
				if (gimple_simplify_382 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR, RSHIFT_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case BIT_IOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21, _p1 };
				if (gimple_simplify_382 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, RSHIFT_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q60 = gimple_assign_rhs1 (_a2);
				  _q60 = do_valueize (valueize, _q60);
				  tree _q61 = gimple_assign_rhs2 (_a2);
				  _q61 = do_valueize (valueize, _q61);
				  tree _q62 = gimple_assign_rhs3 (_a2);
				  _q62 = do_valueize (valueize, _q62);
				  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1, _q61, _q62 };
					if (TREE_CODE_CLASS (RSHIFT_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]), ERROR_MARK)
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]),
 TREE_TYPE (captures[1]), ERROR_MARK))
)
					  {
					    gimple_seq *lseq = seq;
					    if (lseq
					        && (!single_use (captures[0])
					            || !single_use (captures[4])))
					      lseq = NULL;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1983;
					    {
					      res_op->set_op (VEC_COND_EXPR, type, 3);
					      res_op->ops[0] = captures[1];
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[2];
						_o1[1] = captures[5];
						gimple_match_op tem_op (res_op->cond.any_else (), RSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail1983;
						res_op->ops[1] = _r1;
					      }
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[3];
						_o1[1] = captures[6];
						gimple_match_op tem_op (res_op->cond.any_else (), RSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail1983;
						res_op->ops[2] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 925, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail1983:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1 };
		    if (TREE_CODE_CLASS (RSHIFT_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]), ERROR_MARK)
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]),
 TREE_TYPE (captures[1]), ERROR_MARK))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[0])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1984;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[1];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[2];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), RSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail1984;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[3];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), RSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail1984;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 926, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail1984:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_BSWAP128:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_384 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP16:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_384 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP32:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_384 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP64:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
			    if (gimple_simplify_384 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64))
			      return true;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q30, _q31, _q32 };
		    if (TREE_CODE_CLASS (RSHIFT_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[3]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[2]), ERROR_MARK)
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[3]),
 TREE_TYPE (captures[2]), ERROR_MARK))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[1])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1985;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[2];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[3];
			    gimple_match_op tem_op (res_op->cond.any_else (), RSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail1985;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), RSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail1985;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 927, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail1985:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MULT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case PLUS_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_q40))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q40))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case RSHIFT_EXPR:
							        {
								  tree _q50 = gimple_assign_rhs1 (_a4);
								  _q50 = do_valueize (valueize, _q50);
								  tree _q51 = gimple_assign_rhs2 (_a4);
								  _q51 = do_valueize (valueize, _q51);
								  switch (TREE_CODE (_q51))
								    {
								    case INTEGER_CST:
								      {
									if ((_q41 == _q50 && ! TREE_SIDE_EFFECTS (_q41)) || (operand_equal_p (_q41, _q50, 0) && types_match (_q41, _q50)))
									  {
									    switch (TREE_CODE (_q41))
									      {
									      case SSA_NAME:
									        if (gimple *_d5 = get_def (valueize, _q41))
									          {
										    if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										      switch (gimple_assign_rhs_code (_a5))
											{
											case PLUS_EXPR:
											  {
											    tree _q90 = gimple_assign_rhs1 (_a5);
											    _q90 = do_valueize (valueize, _q90);
											    tree _q91 = gimple_assign_rhs2 (_a5);
											    _q91 = do_valueize (valueize, _q91);
											    if (tree_swap_operands_p (_q90, _q91))
											      std::swap (_q90, _q91);
											    switch (TREE_CODE (_q90))
											      {
											      case SSA_NAME:
											        if (gimple *_d6 = get_def (valueize, _q90))
											          {
												    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
												      switch (gimple_assign_rhs_code (_a6))
													{
													case BIT_AND_EXPR:
													  {
													    tree _q100 = gimple_assign_rhs1 (_a6);
													    _q100 = do_valueize (valueize, _q100);
													    tree _q101 = gimple_assign_rhs2 (_a6);
													    _q101 = do_valueize (valueize, _q101);
													    if (tree_swap_operands_p (_q100, _q101))
													      std::swap (_q100, _q101);
													    switch (TREE_CODE (_q101))
													      {
													      case INTEGER_CST:
													        {
														  switch (TREE_CODE (_q91))
														    {
														    case SSA_NAME:
														      if (gimple *_d7 = get_def (valueize, _q91))
														        {
															  if (gassign *_a7 = dyn_cast <gassign *> (_d7))
															    switch (gimple_assign_rhs_code (_a7))
															      {
															      case BIT_AND_EXPR:
															        {
																  tree _q130 = gimple_assign_rhs1 (_a7);
																  _q130 = do_valueize (valueize, _q130);
																  tree _q131 = gimple_assign_rhs2 (_a7);
																  _q131 = do_valueize (valueize, _q131);
																  if (tree_swap_operands_p (_q130, _q131))
																    std::swap (_q130, _q131);
																  switch (TREE_CODE (_q130))
																    {
																    case SSA_NAME:
																      if (gimple *_d8 = get_def (valueize, _q130))
																        {
																	  if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																	    switch (gimple_assign_rhs_code (_a8))
																	      {
																	      case RSHIFT_EXPR:
																	        {
																		  tree _q140 = gimple_assign_rhs1 (_a8);
																		  _q140 = do_valueize (valueize, _q140);
																		  tree _q141 = gimple_assign_rhs2 (_a8);
																		  _q141 = do_valueize (valueize, _q141);
																		  if ((_q140 == _q100 && ! TREE_SIDE_EFFECTS (_q140)) || (operand_equal_p (_q140, _q100, 0) && types_match (_q140, _q100)))
																		    {
																		      switch (TREE_CODE (_q140))
																		        {
																			case SSA_NAME:
																			  if (gimple *_d9 = get_def (valueize, _q140))
																			    {
																			      if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																			        switch (gimple_assign_rhs_code (_a9))
																				  {
																				  case MINUS_EXPR:
																				    {
																				      tree _q160 = gimple_assign_rhs1 (_a9);
																				      _q160 = do_valueize (valueize, _q160);
																				      tree _q161 = gimple_assign_rhs2 (_a9);
																				      _q161 = do_valueize (valueize, _q161);
																				      switch (TREE_CODE (_q161))
																				        {
																					case SSA_NAME:
																					  if (gimple *_d10 = get_def (valueize, _q161))
																					    {
																					      if (gassign *_a10 = dyn_cast <gassign *> (_d10))
																					        switch (gimple_assign_rhs_code (_a10))
																						  {
																						  case BIT_AND_EXPR:
																						    {
																						      tree _q180 = gimple_assign_rhs1 (_a10);
																						      _q180 = do_valueize (valueize, _q180);
																						      tree _q181 = gimple_assign_rhs2 (_a10);
																						      _q181 = do_valueize (valueize, _q181);
																						      if (tree_swap_operands_p (_q180, _q181))
																						        std::swap (_q180, _q181);
																						      switch (TREE_CODE (_q180))
																						        {
																							case SSA_NAME:
																							  if (gimple *_d11 = get_def (valueize, _q180))
																							    {
																							      if (gassign *_a11 = dyn_cast <gassign *> (_d11))
																							        switch (gimple_assign_rhs_code (_a11))
																								  {
																								  case RSHIFT_EXPR:
																								    {
																								      tree _q190 = gimple_assign_rhs1 (_a11);
																								      _q190 = do_valueize (valueize, _q190);
																								      tree _q191 = gimple_assign_rhs2 (_a11);
																								      _q191 = do_valueize (valueize, _q191);
																								      if ((_q190 == _q160 && ! TREE_SIDE_EFFECTS (_q190)) || (operand_equal_p (_q190, _q160, 0) && types_match (_q190, _q160)))
																									{
																									  switch (TREE_CODE (_q191))
																									    {
																									    case INTEGER_CST:
																									      {
																										switch (TREE_CODE (_q181))
																										  {
																										  case INTEGER_CST:
																										    {
																										      switch (TREE_CODE (_q141))
																										        {
																											case INTEGER_CST:
																											  {
																											    switch (TREE_CODE (_q131))
																											      {
																											      case INTEGER_CST:
																											        {
																												  switch (TREE_CODE (_q31))
																												    {
																												    case INTEGER_CST:
																												      {
																													switch (TREE_CODE (_q21))
																													  {
																													  case INTEGER_CST:
																													    {
																													      switch (TREE_CODE (_p1))
																													        {
																														case INTEGER_CST:
																														  {
																														    {
																														      tree captures[12] ATTRIBUTE_UNUSED = { _q50, _q51, _q100, _q101, _q160, _q191, _q181, _q141, _q131, _q31, _q21, _p1 };
																														      if (gimple_simplify_385 (res_op, seq, valueize, type, captures))
																														        return true;
																														    }
																														    break;
																														  }
																													        default:;
																													        }
																													      break;
																													    }
																												          default:;
																												          }
																												        break;
																												      }
																												    default:;
																												    }
																											          break;
																											        }
																											      default:;
																											      }
																											    break;
																											  }
																										        default:;
																										        }
																										      break;
																										    }
																									          default:;
																									          }
																									        break;
																									      }
																									    default:;
																									    }
																								        }
																								      break;
																								    }
																								  default:;
																								  }
																							    }
																							  break;
																						        default:;
																						        }
																						      break;
																						    }
																						  default:;
																						  }
																					    }
																					  break;
																				        default:;
																				        }
																				      break;
																				    }
																				  default:;
																				  }
																			    }
																			  break;
																		        default:;
																		        }
																		    }
																	          break;
																	        }
																	      default:;
																	      }
																        }
																      break;
																    default:;
																    }
															          break;
															        }
															      default:;
															      }
														        }
														      break;
														    default:;
														    }
													          break;
													        }
													      default:;
													      }
													    switch (TREE_CODE (_q100))
													      {
													      case SSA_NAME:
													        if (gimple *_d7 = get_def (valueize, _q100))
													          {
														    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
														      switch (gimple_assign_rhs_code (_a7))
															{
															case RSHIFT_EXPR:
															  {
															    tree _q110 = gimple_assign_rhs1 (_a7);
															    _q110 = do_valueize (valueize, _q110);
															    tree _q111 = gimple_assign_rhs2 (_a7);
															    _q111 = do_valueize (valueize, _q111);
															    switch (TREE_CODE (_q110))
															      {
															      case SSA_NAME:
															        if (gimple *_d8 = get_def (valueize, _q110))
															          {
																    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																      switch (gimple_assign_rhs_code (_a8))
																	{
																	case MINUS_EXPR:
																	  {
																	    tree _q120 = gimple_assign_rhs1 (_a8);
																	    _q120 = do_valueize (valueize, _q120);
																	    tree _q121 = gimple_assign_rhs2 (_a8);
																	    _q121 = do_valueize (valueize, _q121);
																	    switch (TREE_CODE (_q121))
																	      {
																	      case SSA_NAME:
																	        if (gimple *_d9 = get_def (valueize, _q121))
																	          {
																		    if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																		      switch (gimple_assign_rhs_code (_a9))
																			{
																			case BIT_AND_EXPR:
																			  {
																			    tree _q140 = gimple_assign_rhs1 (_a9);
																			    _q140 = do_valueize (valueize, _q140);
																			    tree _q141 = gimple_assign_rhs2 (_a9);
																			    _q141 = do_valueize (valueize, _q141);
																			    if (tree_swap_operands_p (_q140, _q141))
																			      std::swap (_q140, _q141);
																			    switch (TREE_CODE (_q140))
																			      {
																			      case SSA_NAME:
																			        if (gimple *_d10 = get_def (valueize, _q140))
																			          {
																				    if (gassign *_a10 = dyn_cast <gassign *> (_d10))
																				      switch (gimple_assign_rhs_code (_a10))
																					{
																					case RSHIFT_EXPR:
																					  {
																					    tree _q150 = gimple_assign_rhs1 (_a10);
																					    _q150 = do_valueize (valueize, _q150);
																					    tree _q151 = gimple_assign_rhs2 (_a10);
																					    _q151 = do_valueize (valueize, _q151);
																					    if ((_q150 == _q120 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q120, 0) && types_match (_q150, _q120)))
																					      {
																						switch (TREE_CODE (_q151))
																						  {
																						  case INTEGER_CST:
																						    {
																						      switch (TREE_CODE (_q141))
																						        {
																							case INTEGER_CST:
																							  {
																							    switch (TREE_CODE (_q111))
																							      {
																							      case INTEGER_CST:
																							        {
																								  switch (TREE_CODE (_q101))
																								    {
																								    case INTEGER_CST:
																								      {
																									switch (TREE_CODE (_q91))
																									  {
																									  case SSA_NAME:
																									    if (gimple *_d11 = get_def (valueize, _q91))
																									      {
																										if (gassign *_a11 = dyn_cast <gassign *> (_d11))
																										  switch (gimple_assign_rhs_code (_a11))
																										    {
																										    case BIT_AND_EXPR:
																										      {
																											tree _q210 = gimple_assign_rhs1 (_a11);
																											_q210 = do_valueize (valueize, _q210);
																											tree _q211 = gimple_assign_rhs2 (_a11);
																											_q211 = do_valueize (valueize, _q211);
																											if (tree_swap_operands_p (_q210, _q211))
																											  std::swap (_q210, _q211);
																											if ((_q210 == _q110 && ! TREE_SIDE_EFFECTS (_q210)) || (operand_equal_p (_q210, _q110, 0) && types_match (_q210, _q110)))
																											  {
																											    switch (TREE_CODE (_q211))
																											      {
																											      case INTEGER_CST:
																											        {
																												  switch (TREE_CODE (_q31))
																												    {
																												    case INTEGER_CST:
																												      {
																													switch (TREE_CODE (_q21))
																													  {
																													  case INTEGER_CST:
																													    {
																													      switch (TREE_CODE (_p1))
																													        {
																														case INTEGER_CST:
																														  {
																														    {
																														      tree captures[12] ATTRIBUTE_UNUSED = { _q50, _q51, _q110, _q211, _q120, _q151, _q141, _q111, _q101, _q31, _q21, _p1 };
																														      if (gimple_simplify_385 (res_op, seq, valueize, type, captures))
																														        return true;
																														    }
																														    break;
																														  }
																													        default:;
																													        }
																													      break;
																													    }
																												          default:;
																												          }
																												        break;
																												      }
																												    default:;
																												    }
																											          break;
																											        }
																											      default:;
																											      }
																											  }
																										        break;
																										      }
																										    default:;
																										    }
																									      }
																									    break;
																								          default:;
																								          }
																								        break;
																								      }
																								    default:;
																								    }
																							          break;
																							        }
																							      default:;
																							      }
																							    break;
																							  }
																						        default:;
																						        }
																						      break;
																						    }
																					          default:;
																					          }
																					      }
																					    break;
																					  }
																					default:;
																					}
																			          }
																			        break;
																			      default:;
																			      }
																			    break;
																			  }
																			default:;
																			}
																	          }
																	        break;
																	      default:;
																	      }
																	    break;
																	  }
																	default:;
																	}
															          }
															        break;
															      default:;
															      }
															    break;
															  }
															default:;
															}
													          }
													        break;
													      default:;
													      }
													    break;
													  }
													default:;
													}
											          }
											        break;
											      default:;
											      }
											    break;
											  }
											default:;
											}
									          }
									        break;
									      default:;
									      }
									  }
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      case PLUS_EXPR:
							        {
								  tree _q50 = gimple_assign_rhs1 (_a4);
								  _q50 = do_valueize (valueize, _q50);
								  tree _q51 = gimple_assign_rhs2 (_a4);
								  _q51 = do_valueize (valueize, _q51);
								  if (tree_swap_operands_p (_q50, _q51))
								    std::swap (_q50, _q51);
								  switch (TREE_CODE (_q50))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q50))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case BIT_AND_EXPR:
									        {
										  tree _q60 = gimple_assign_rhs1 (_a5);
										  _q60 = do_valueize (valueize, _q60);
										  tree _q61 = gimple_assign_rhs2 (_a5);
										  _q61 = do_valueize (valueize, _q61);
										  if (tree_swap_operands_p (_q60, _q61))
										    std::swap (_q60, _q61);
										  switch (TREE_CODE (_q61))
										    {
										    case INTEGER_CST:
										      {
											switch (TREE_CODE (_q51))
											  {
											  case SSA_NAME:
											    if (gimple *_d6 = get_def (valueize, _q51))
											      {
												if (gassign *_a6 = dyn_cast <gassign *> (_d6))
												  switch (gimple_assign_rhs_code (_a6))
												    {
												    case BIT_AND_EXPR:
												      {
													tree _q90 = gimple_assign_rhs1 (_a6);
													_q90 = do_valueize (valueize, _q90);
													tree _q91 = gimple_assign_rhs2 (_a6);
													_q91 = do_valueize (valueize, _q91);
													if (tree_swap_operands_p (_q90, _q91))
													  std::swap (_q90, _q91);
													switch (TREE_CODE (_q90))
													  {
													  case SSA_NAME:
													    if (gimple *_d7 = get_def (valueize, _q90))
													      {
														if (gassign *_a7 = dyn_cast <gassign *> (_d7))
														  switch (gimple_assign_rhs_code (_a7))
														    {
														    case RSHIFT_EXPR:
														      {
															tree _q100 = gimple_assign_rhs1 (_a7);
															_q100 = do_valueize (valueize, _q100);
															tree _q101 = gimple_assign_rhs2 (_a7);
															_q101 = do_valueize (valueize, _q101);
															if ((_q100 == _q60 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q60, 0) && types_match (_q100, _q60)))
															  {
															    switch (TREE_CODE (_q100))
															      {
															      case SSA_NAME:
															        if (gimple *_d8 = get_def (valueize, _q100))
															          {
																    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																      switch (gimple_assign_rhs_code (_a8))
																	{
																	case MINUS_EXPR:
																	  {
																	    tree _q120 = gimple_assign_rhs1 (_a8);
																	    _q120 = do_valueize (valueize, _q120);
																	    tree _q121 = gimple_assign_rhs2 (_a8);
																	    _q121 = do_valueize (valueize, _q121);
																	    switch (TREE_CODE (_q121))
																	      {
																	      case SSA_NAME:
																	        if (gimple *_d9 = get_def (valueize, _q121))
																	          {
																		    if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																		      switch (gimple_assign_rhs_code (_a9))
																			{
																			case BIT_AND_EXPR:
																			  {
																			    tree _q140 = gimple_assign_rhs1 (_a9);
																			    _q140 = do_valueize (valueize, _q140);
																			    tree _q141 = gimple_assign_rhs2 (_a9);
																			    _q141 = do_valueize (valueize, _q141);
																			    if (tree_swap_operands_p (_q140, _q141))
																			      std::swap (_q140, _q141);
																			    switch (TREE_CODE (_q140))
																			      {
																			      case SSA_NAME:
																			        if (gimple *_d10 = get_def (valueize, _q140))
																			          {
																				    if (gassign *_a10 = dyn_cast <gassign *> (_d10))
																				      switch (gimple_assign_rhs_code (_a10))
																					{
																					case RSHIFT_EXPR:
																					  {
																					    tree _q150 = gimple_assign_rhs1 (_a10);
																					    _q150 = do_valueize (valueize, _q150);
																					    tree _q151 = gimple_assign_rhs2 (_a10);
																					    _q151 = do_valueize (valueize, _q151);
																					    if ((_q150 == _q120 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q120, 0) && types_match (_q150, _q120)))
																					      {
																						switch (TREE_CODE (_q151))
																						  {
																						  case INTEGER_CST:
																						    {
																						      switch (TREE_CODE (_q141))
																						        {
																							case INTEGER_CST:
																							  {
																							    switch (TREE_CODE (_q101))
																							      {
																							      case INTEGER_CST:
																							        {
																								  switch (TREE_CODE (_q91))
																								    {
																								    case INTEGER_CST:
																								      {
																									switch (TREE_CODE (_q41))
																									  {
																									  case SSA_NAME:
																									    if (gimple *_d11 = get_def (valueize, _q41))
																									      {
																										if (gassign *_a11 = dyn_cast <gassign *> (_d11))
																										  switch (gimple_assign_rhs_code (_a11))
																										    {
																										    case RSHIFT_EXPR:
																										      {
																											tree _q210 = gimple_assign_rhs1 (_a11);
																											_q210 = do_valueize (valueize, _q210);
																											tree _q211 = gimple_assign_rhs2 (_a11);
																											_q211 = do_valueize (valueize, _q211);
																											if ((_q210 == _q40 && ! TREE_SIDE_EFFECTS (_q210)) || (operand_equal_p (_q210, _q40, 0) && types_match (_q210, _q40)))
																											  {
																											    switch (TREE_CODE (_q211))
																											      {
																											      case INTEGER_CST:
																											        {
																												  switch (TREE_CODE (_q31))
																												    {
																												    case INTEGER_CST:
																												      {
																													switch (TREE_CODE (_q21))
																													  {
																													  case INTEGER_CST:
																													    {
																													      switch (TREE_CODE (_p1))
																													        {
																														case INTEGER_CST:
																														  {
																														    {
																														      tree captures[12] ATTRIBUTE_UNUSED = { _q40, _q211, _q60, _q61, _q120, _q151, _q141, _q101, _q91, _q31, _q21, _p1 };
																														      if (gimple_simplify_385 (res_op, seq, valueize, type, captures))
																														        return true;
																														    }
																														    break;
																														  }
																													        default:;
																													        }
																													      break;
																													    }
																												          default:;
																												          }
																												        break;
																												      }
																												    default:;
																												    }
																											          break;
																											        }
																											      default:;
																											      }
																											  }
																										        break;
																										      }
																										    default:;
																										    }
																									      }
																									    break;
																								          default:;
																								          }
																								        break;
																								      }
																								    default:;
																								    }
																							          break;
																							        }
																							      default:;
																							      }
																							    break;
																							  }
																						        default:;
																						        }
																						      break;
																						    }
																					          default:;
																					          }
																					      }
																					    break;
																					  }
																					default:;
																					}
																			          }
																			        break;
																			      default:;
																			      }
																			    break;
																			  }
																			default:;
																			}
																	          }
																	        break;
																	      default:;
																	      }
																	    break;
																	  }
																	default:;
																	}
															          }
															        break;
															      default:;
															      }
															  }
														        break;
														      }
														    default:;
														    }
													      }
													    break;
												          default:;
												          }
												        break;
												      }
												    default:;
												    }
											      }
											    break;
										          default:;
										          }
										        break;
										      }
										    default:;
										    }
										  switch (TREE_CODE (_q60))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q60))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case RSHIFT_EXPR:
											        {
												  tree _q70 = gimple_assign_rhs1 (_a6);
												  _q70 = do_valueize (valueize, _q70);
												  tree _q71 = gimple_assign_rhs2 (_a6);
												  _q71 = do_valueize (valueize, _q71);
												  switch (TREE_CODE (_q70))
												    {
												    case SSA_NAME:
												      if (gimple *_d7 = get_def (valueize, _q70))
												        {
													  if (gassign *_a7 = dyn_cast <gassign *> (_d7))
													    switch (gimple_assign_rhs_code (_a7))
													      {
													      case MINUS_EXPR:
													        {
														  tree _q80 = gimple_assign_rhs1 (_a7);
														  _q80 = do_valueize (valueize, _q80);
														  tree _q81 = gimple_assign_rhs2 (_a7);
														  _q81 = do_valueize (valueize, _q81);
														  switch (TREE_CODE (_q81))
														    {
														    case SSA_NAME:
														      if (gimple *_d8 = get_def (valueize, _q81))
														        {
															  if (gassign *_a8 = dyn_cast <gassign *> (_d8))
															    switch (gimple_assign_rhs_code (_a8))
															      {
															      case BIT_AND_EXPR:
															        {
																  tree _q100 = gimple_assign_rhs1 (_a8);
																  _q100 = do_valueize (valueize, _q100);
																  tree _q101 = gimple_assign_rhs2 (_a8);
																  _q101 = do_valueize (valueize, _q101);
																  if (tree_swap_operands_p (_q100, _q101))
																    std::swap (_q100, _q101);
																  switch (TREE_CODE (_q100))
																    {
																    case SSA_NAME:
																      if (gimple *_d9 = get_def (valueize, _q100))
																        {
																	  if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																	    switch (gimple_assign_rhs_code (_a9))
																	      {
																	      case RSHIFT_EXPR:
																	        {
																		  tree _q110 = gimple_assign_rhs1 (_a9);
																		  _q110 = do_valueize (valueize, _q110);
																		  tree _q111 = gimple_assign_rhs2 (_a9);
																		  _q111 = do_valueize (valueize, _q111);
																		  if ((_q110 == _q80 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q80, 0) && types_match (_q110, _q80)))
																		    {
																		      switch (TREE_CODE (_q111))
																		        {
																			case INTEGER_CST:
																			  {
																			    switch (TREE_CODE (_q101))
																			      {
																			      case INTEGER_CST:
																			        {
																				  switch (TREE_CODE (_q71))
																				    {
																				    case INTEGER_CST:
																				      {
																					switch (TREE_CODE (_q61))
																					  {
																					  case INTEGER_CST:
																					    {
																					      switch (TREE_CODE (_q51))
																					        {
																						case SSA_NAME:
																						  if (gimple *_d10 = get_def (valueize, _q51))
																						    {
																						      if (gassign *_a10 = dyn_cast <gassign *> (_d10))
																						        switch (gimple_assign_rhs_code (_a10))
																							  {
																							  case BIT_AND_EXPR:
																							    {
																							      tree _q170 = gimple_assign_rhs1 (_a10);
																							      _q170 = do_valueize (valueize, _q170);
																							      tree _q171 = gimple_assign_rhs2 (_a10);
																							      _q171 = do_valueize (valueize, _q171);
																							      if (tree_swap_operands_p (_q170, _q171))
																							        std::swap (_q170, _q171);
																							      if ((_q170 == _q70 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q70, 0) && types_match (_q170, _q70)))
																								{
																								  switch (TREE_CODE (_q171))
																								    {
																								    case INTEGER_CST:
																								      {
																									switch (TREE_CODE (_q41))
																									  {
																									  case SSA_NAME:
																									    if (gimple *_d11 = get_def (valueize, _q41))
																									      {
																										if (gassign *_a11 = dyn_cast <gassign *> (_d11))
																										  switch (gimple_assign_rhs_code (_a11))
																										    {
																										    case RSHIFT_EXPR:
																										      {
																											tree _q200 = gimple_assign_rhs1 (_a11);
																											_q200 = do_valueize (valueize, _q200);
																											tree _q201 = gimple_assign_rhs2 (_a11);
																											_q201 = do_valueize (valueize, _q201);
																											if ((_q200 == _q40 && ! TREE_SIDE_EFFECTS (_q200)) || (operand_equal_p (_q200, _q40, 0) && types_match (_q200, _q40)))
																											  {
																											    switch (TREE_CODE (_q201))
																											      {
																											      case INTEGER_CST:
																											        {
																												  switch (TREE_CODE (_q31))
																												    {
																												    case INTEGER_CST:
																												      {
																													switch (TREE_CODE (_q21))
																													  {
																													  case INTEGER_CST:
																													    {
																													      switch (TREE_CODE (_p1))
																													        {
																														case INTEGER_CST:
																														  {
																														    {
																														      tree captures[12] ATTRIBUTE_UNUSED = { _q40, _q201, _q70, _q171, _q80, _q111, _q101, _q71, _q61, _q31, _q21, _p1 };
																														      if (gimple_simplify_385 (res_op, seq, valueize, type, captures))
																														        return true;
																														    }
																														    break;
																														  }
																													        default:;
																													        }
																													      break;
																													    }
																												          default:;
																												          }
																												        break;
																												      }
																												    default:;
																												    }
																											          break;
																											        }
																											      default:;
																											      }
																											  }
																										        break;
																										      }
																										    default:;
																										    }
																									      }
																									    break;
																								          default:;
																								          }
																								        break;
																								      }
																								    default:;
																								    }
																							        }
																							      break;
																							    }
																							  default:;
																							  }
																						    }
																						  break;
																					        default:;
																					        }
																					      break;
																					    }
																				          default:;
																				          }
																				        break;
																				      }
																				    default:;
																				    }
																			          break;
																			        }
																			      default:;
																			      }
																			    break;
																			  }
																		        default:;
																		        }
																		    }
																	          break;
																	        }
																	      default:;
																	      }
																        }
																      break;
																    default:;
																    }
															          break;
															        }
															      default:;
															      }
														        }
														      break;
														    default:;
														    }
													          break;
													        }
													      default:;
													      }
												        }
												      break;
												    default:;
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case VEC_PERM_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  if ((_q21 == _q20 && ! TREE_SIDE_EFFECTS (_q21)) || (operand_equal_p (_q21, _q20, 0) && types_match (_q21, _q20)))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case VEC_PERM_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      tree _q62 = gimple_assign_rhs3 (_a2);
				      _q62 = do_valueize (valueize, _q62);
				      if ((_q61 == _q60 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q60, 0) && types_match (_q61, _q60)))
					{
					  if ((_q62 == _q22 && ! TREE_SIDE_EFFECTS (_q62)) || (operand_equal_p (_q62, _q22, 0) && types_match (_q62, _q22)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q22, _q60 };
						if (VECTOR_INTEGER_TYPE_P (type)
)
						  {
						    gimple_seq *lseq = seq;
						    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1986;
						    {
						      res_op->set_op (VEC_PERM_EXPR, type, 3);
						      {
							tree _o1[2], _r1;
							_o1[0] = captures[0];
							_o1[1] = captures[2];
							gimple_match_op tem_op (res_op->cond.any_else (), RSHIFT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
							tem_op.resimplify (lseq, valueize);
							_r1 = maybe_push_res_to_seq (&tem_op, lseq);
							if (!_r1) goto next_after_fail1986;
							captures[3] = _r1;
						      }
						      res_op->ops[0] = captures[3];
						      res_op->ops[1] = captures[3];
						      res_op->ops[2] = captures[1];
						      res_op->resimplify (lseq, valueize);
						      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 928, __FILE__, __LINE__, true);
						      return true;
						    }
next_after_fail1986:;
						  }
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_RROTATE_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_all_onesp (_p0))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_568 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
	  return true;
      }
    }
  if (integer_zerop (_p1))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_375 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
	  return true;
      }
    }
  if (integer_zerop (_p0))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_376 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
	  return true;
      }
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case CONSTRUCTOR:
	        {
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
		    if (gimple_simplify_378 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case VECTOR_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (gimple_simplify_377 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
	    return true;
	}
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case RROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
				if (gimple_simplify_380 (res_op, seq, valueize, type, captures, RROTATE_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_UNLE_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q60 = gimple_assign_rhs1 (_a2);
				  _q60 = do_valueize (valueize, _q60);
				  tree _q61 = gimple_assign_rhs2 (_a2);
				  _q61 = do_valueize (valueize, _q61);
				  tree _q62 = gimple_assign_rhs3 (_a2);
				  _q62 = do_valueize (valueize, _q62);
				  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1, _q61, _q62 };
					if (TREE_CODE_CLASS (UNLE_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]), ERROR_MARK)
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]),
 TREE_TYPE (captures[1]), ERROR_MARK))
)
					  {
					    gimple_seq *lseq = seq;
					    if (lseq
					        && (!single_use (captures[0])
					            || !single_use (captures[4])))
					      lseq = NULL;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2151;
					    {
					      res_op->set_op (VEC_COND_EXPR, type, 3);
					      res_op->ops[0] = captures[1];
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[2];
						_o1[1] = captures[5];
						gimple_match_op tem_op (res_op->cond.any_else (), UNLE_EXPR, type, _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2151;
						res_op->ops[1] = _r1;
					      }
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[3];
						_o1[1] = captures[6];
						gimple_match_op tem_op (res_op->cond.any_else (), UNLE_EXPR, type, _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2151;
						res_op->ops[2] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 925, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2151:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1 };
		    if (TREE_CODE_CLASS (UNLE_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]), ERROR_MARK)
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]),
 TREE_TYPE (captures[1]), ERROR_MARK))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[0])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2152;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[1];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[2];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), UNLE_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2152;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[3];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), UNLE_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2152;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 926, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2152:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q30, _q31, _q32 };
		    if (TREE_CODE_CLASS (UNLE_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[3]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[2]), ERROR_MARK)
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[3]),
 TREE_TYPE (captures[2]), ERROR_MARK))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[1])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2153;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[2];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[3];
			    gimple_match_op tem_op (res_op->cond.any_else (), UNLE_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2153;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), UNLE_EXPR, type, _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2153;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 927, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2153:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  if ((_p1 == _p0 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _p0, 0) && types_match (_p1, _p0)))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_596 (res_op, seq, valueize, type, captures, UNLE_EXPR))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case FLOAT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case FLOAT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q40 };
				    if (gimple_simplify_257 (res_op, seq, valueize, type, captures, UNLE_EXPR, LE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NEGATE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
				    if (gimple_simplify_260 (res_op, seq, valueize, type, captures, UNLE_EXPR, UNGE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		if (CONSTANT_CLASS_P (_p1))
		  {
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
		      if (gimple_simplify_261 (res_op, seq, valueize, type, captures, UNLE_EXPR, UNGE_EXPR))
		        return true;
		    }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case REAL_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (gimple_simplify_594 (res_op, seq, valueize, type, captures, UNLE_EXPR))
	    return true;
	}
        break;
      }
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_ADD_OVERFLOW (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _p1 };
		    if (gimple_simplify_597 (res_op, seq, valueize, type, captures, CFN_ADD_OVERFLOW))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _q30 };
		    if (gimple_simplify_598 (res_op, seq, valueize, type, captures, CFN_ADD_OVERFLOW))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_LDEXP (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (real_zerop (_p0))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_608 (res_op, seq, valueize, type, captures))
	  return true;
      }
    }
  if (integer_zerop (_p1))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_609 (res_op, seq, valueize, type, captures))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case REAL_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (!real_isfinite (TREE_REAL_CST_PTR (captures[0]))
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2168;
	      {
		tree tem;
		tem = captures[0];
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1085, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail2168:;
	    }
	}
        break;
      }
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_SCALBLNF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (real_zerop (_p0))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_608 (res_op, seq, valueize, type, captures))
	  return true;
      }
    }
  if (integer_zerop (_p1))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	if (gimple_simplify_609 (res_op, seq, valueize, type, captures))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case REAL_CST:
      {
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	  if (!real_isfinite (TREE_REAL_CST_PTR (captures[0]))
)
	    {
	      gimple_seq *lseq = seq;
	      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2174;
	      {
		tree tem;
		tem = captures[0];
		res_op->set_value (tem);
		if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1085, __FILE__, __LINE__, true);
		return true;
	      }
next_after_fail2174:;
	    }
	}
        break;
      }
    default:;
    }
  return false;
}

bool
gimple_simplify_COND_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1, tree _p2)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      if (integer_zerop (_p2))
						{
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						    if (gimple_simplify_496 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					        }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (gimple_zero_one_valued_p (_q20, valueize))
		    {
		      if (integer_zerop (_q21))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case BIT_XOR_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  tree _q61 = gimple_assign_rhs2 (_a2);
					  _q61 = do_valueize (valueize, _q61);
					  if (tree_swap_operands_p (_q60, _q61))
					    std::swap (_q60, _q61);
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
						if (gimple_simplify_497 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
					  if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
						if (gimple_simplify_497 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      case BIT_IOR_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  tree _q61 = gimple_assign_rhs2 (_a2);
					  _q61 = do_valueize (valueize, _q61);
					  if (tree_swap_operands_p (_q60, _q61))
					    std::swap (_q60, _q61);
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
						if (gimple_simplify_497 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
					  if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
						if (gimple_simplify_497 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      case PLUS_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  tree _q61 = gimple_assign_rhs2 (_a2);
					  _q61 = do_valueize (valueize, _q61);
					  if (tree_swap_operands_p (_q60, _q61))
					    std::swap (_q60, _q61);
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
						if (gimple_simplify_497 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
					  if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
						if (gimple_simplify_497 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_498 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_498 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case BIT_IOR_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_498 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_498 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case BIT_XOR_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_498 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_498 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case LROTATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case RROTATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case LSHIFT_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case RSHIFT_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case MINUS_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case POINTER_PLUS_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  if (integer_onep (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case TRUNC_DIV_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_500 (res_op, seq, valueize, type, captures, TRUNC_DIV_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case CEIL_DIV_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_500 (res_op, seq, valueize, type, captures, CEIL_DIV_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case FLOOR_DIV_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_500 (res_op, seq, valueize, type, captures, FLOOR_DIV_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case ROUND_DIV_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_500 (res_op, seq, valueize, type, captures, ROUND_DIV_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case EXACT_DIV_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_500 (res_op, seq, valueize, type, captures, EXACT_DIV_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  case MULT_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_501 (res_op, seq, valueize, type, captures, MULT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_501 (res_op, seq, valueize, type, captures, MULT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  if (integer_all_onesp (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_AND_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_502 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
						if (gimple_simplify_502 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (gimple_zero_one_valued_p (_q20, valueize))
		    {
		      if (integer_zerop (_q21))
			{
			  switch (TREE_CODE (_p1))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p1))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case BIT_XOR_EXPR:
				        {
					  tree _q50 = gimple_assign_rhs1 (_a2);
					  _q50 = do_valueize (valueize, _q50);
					  tree _q51 = gimple_assign_rhs2 (_a2);
					  _q51 = do_valueize (valueize, _q51);
					  if (tree_swap_operands_p (_q50, _q51))
					    std::swap (_q50, _q51);
					  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
						if (gimple_simplify_503 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
						if (gimple_simplify_503 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      case BIT_IOR_EXPR:
				        {
					  tree _q50 = gimple_assign_rhs1 (_a2);
					  _q50 = do_valueize (valueize, _q50);
					  tree _q51 = gimple_assign_rhs2 (_a2);
					  _q51 = do_valueize (valueize, _q51);
					  if (tree_swap_operands_p (_q50, _q51))
					    std::swap (_q50, _q51);
					  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
						if (gimple_simplify_503 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
						if (gimple_simplify_503 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      case PLUS_EXPR:
				        {
					  tree _q50 = gimple_assign_rhs1 (_a2);
					  _q50 = do_valueize (valueize, _q50);
					  tree _q51 = gimple_assign_rhs2 (_a2);
					  _q51 = do_valueize (valueize, _q51);
					  if (tree_swap_operands_p (_q50, _q51))
					    std::swap (_q50, _q51);
					  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
						if (gimple_simplify_503 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
						if (gimple_simplify_503 (res_op, seq, valueize, type, captures, PLUS_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case LE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p1))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				      {
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						  if (gimple_simplify_496 (res_op, seq, valueize, type, captures))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
	      }
	  }
        break;
      }
    case EQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (gimple_zero_one_valued_p (_q20, valueize))
		  {
		    if (integer_zerop (_q21))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case BIT_XOR_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					tree _q61 = gimple_assign_rhs2 (_a1);
					_q61 = do_valueize (valueize, _q61);
					if (tree_swap_operands_p (_q60, _q61))
					  std::swap (_q60, _q61);
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
					      if (gimple_simplify_497 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
					if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
					      if (gimple_simplify_497 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    case BIT_IOR_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					tree _q61 = gimple_assign_rhs2 (_a1);
					_q61 = do_valueize (valueize, _q61);
					if (tree_swap_operands_p (_q60, _q61))
					  std::swap (_q60, _q61);
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
					      if (gimple_simplify_497 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
					if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
					      if (gimple_simplify_497 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    case PLUS_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					tree _q61 = gimple_assign_rhs2 (_a1);
					_q61 = do_valueize (valueize, _q61);
					if (tree_swap_operands_p (_q60, _q61))
					  std::swap (_q60, _q61);
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q60 };
					      if (gimple_simplify_497 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
					if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q61 };
					      if (gimple_simplify_497 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case PLUS_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if (tree_swap_operands_p (_q60, _q61))
				      std::swap (_q60, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_498 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
				      }
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_498 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case BIT_IOR_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if (tree_swap_operands_p (_q60, _q61))
				      std::swap (_q60, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_498 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				      }
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_498 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case BIT_XOR_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if (tree_swap_operands_p (_q60, _q61))
				      std::swap (_q60, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_498 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
				      }
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_498 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case LROTATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case RROTATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case LSHIFT_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case RSHIFT_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case MINUS_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case POINTER_PLUS_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_499 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		if (integer_onep (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case TRUNC_DIV_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_500 (res_op, seq, valueize, type, captures, TRUNC_DIV_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case CEIL_DIV_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_500 (res_op, seq, valueize, type, captures, CEIL_DIV_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case FLOOR_DIV_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_500 (res_op, seq, valueize, type, captures, FLOOR_DIV_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case ROUND_DIV_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_500 (res_op, seq, valueize, type, captures, ROUND_DIV_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case EXACT_DIV_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_500 (res_op, seq, valueize, type, captures, EXACT_DIV_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				case MULT_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if (tree_swap_operands_p (_q60, _q61))
				      std::swap (_q60, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_501 (res_op, seq, valueize, type, captures, MULT_EXPR))
					        return true;
					    }
					  }
				      }
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_501 (res_op, seq, valueize, type, captures, MULT_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		if (integer_all_onesp (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case BIT_AND_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    tree _q61 = gimple_assign_rhs2 (_a1);
				    _q61 = do_valueize (valueize, _q61);
				    if (tree_swap_operands_p (_q60, _q61))
				      std::swap (_q60, _q61);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_502 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
				      }
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					if ((_q61 == _p1 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _p1, 0) && types_match (_q61, _p1)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					      if (gimple_simplify_502 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
	      }
	  }
        break;
      }
    case NE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (gimple_zero_one_valued_p (_q20, valueize))
		  {
		    if (integer_zerop (_q21))
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p1))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case BIT_XOR_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a1);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a1);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
					      if (gimple_simplify_503 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
					      if (gimple_simplify_503 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    case BIT_IOR_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a1);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a1);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
					      if (gimple_simplify_503 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
					      if (gimple_simplify_503 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    case PLUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a1);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a1);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _q51 };
					      if (gimple_simplify_503 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _q50 };
					      if (gimple_simplify_503 (res_op, seq, valueize, type, captures, PLUS_EXPR))
					        return true;
					    }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
	      }
	  }
        break;
      }
    case INTEGER_CST:
      {
	{
	  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _p2 };
	  if (integer_zerop (captures[0])
)
	    {
	      if (!VOID_TYPE_P (TREE_TYPE (captures[2])) || VOID_TYPE_P (type)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2209;
		  {
		    tree tem;
		    tem = captures[2];
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1086, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail2209:;
		}
	    }
	  else
	    {
	      if (!VOID_TYPE_P (TREE_TYPE (captures[1])) || VOID_TYPE_P (type)
)
		{
		  gimple_seq *lseq = seq;
		  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2210;
		  {
		    tree tem;
		    tem = captures[1];
		    res_op->set_value (tem);
		    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1087, __FILE__, __LINE__, true);
		    return true;
		  }
next_after_fail2210:;
		}
	    }
	}
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case INTEGER_CST:
      {
	switch (TREE_CODE (_p2))
	  {
	  case INTEGER_CST:
	    {
	      {
		tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _p2 };
		if (integer_zerop (captures[2])
)
		  {
		    if (integer_onep (captures[1])
)
		      {
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2211;
			{
			  res_op->set_op (NOP_EXPR, type, 1);
			  {
			    tree _o1[1], _r1;
			    _o1[0] = captures[0];
			    if (COMPARISON_CLASS_P (_o1[0]))
			      {
			        if (!seq) return false;
			        _o1[0] = gimple_build (seq, TREE_CODE (_o1[0]), TREE_TYPE (_o1[0]), TREE_OPERAND (_o1[0], 0), TREE_OPERAND (_o1[0], 1));
			      }
			    if (boolean_type_node != TREE_TYPE (_o1[0])
			        && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o1[0])))
			      {
				gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o1[0]);
				tem_op.resimplify (lseq, valueize);
				_r1 = maybe_push_res_to_seq (&tem_op, lseq);
				if (!_r1) goto next_after_fail2211;
			      }
			    else
			      _r1 = _o1[0];
			    res_op->ops[0] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1088, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2211:;
		      }
		    else
		      {
			if (INTEGRAL_TYPE_P (type) && integer_all_onesp (captures[1])
)
			  {
			    if (TYPE_PRECISION (type) == 1
)
			      {
				gimple_seq *lseq = seq;
				if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2212;
				{
				  res_op->set_op (NOP_EXPR, type, 1);
				  {
				    tree _o1[1], _r1;
				    _o1[0] = captures[0];
				    if (COMPARISON_CLASS_P (_o1[0]))
				      {
				        if (!seq) return false;
				        _o1[0] = gimple_build (seq, TREE_CODE (_o1[0]), TREE_TYPE (_o1[0]), TREE_OPERAND (_o1[0], 0), TREE_OPERAND (_o1[0], 1));
				      }
				    if (boolean_type_node != TREE_TYPE (_o1[0])
				        && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o1[0])))
				      {
					gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o1[0]);
					tem_op.resimplify (lseq, valueize);
					_r1 = maybe_push_res_to_seq (&tem_op, lseq);
					if (!_r1) goto next_after_fail2212;
				      }
				    else
				      _r1 = _o1[0];
				    res_op->ops[0] = _r1;
				  }
				  res_op->resimplify (lseq, valueize);
				  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1089, __FILE__, __LINE__, true);
				  return true;
				}
next_after_fail2212:;
			      }
			    else
			      {
				if (TREE_CODE (type) == BOOLEAN_TYPE
)
				  {
				    {
 tree intt = build_nonstandard_integer_type (TYPE_PRECISION (type),
 TYPE_UNSIGNED (type));
					gimple_seq *lseq = seq;
					if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2213;
					{
					  res_op->set_op (NOP_EXPR, type, 1);
					  {
					    tree _o1[1], _r1;
					    {
					      tree _o2[1], _r2;
					      {
						tree _o3[1], _r3;
						_o3[0] = captures[0];
						if (COMPARISON_CLASS_P (_o3[0]))
						  {
						    if (!seq) return false;
						    _o3[0] = gimple_build (seq, TREE_CODE (_o3[0]), TREE_TYPE (_o3[0]), TREE_OPERAND (_o3[0], 0), TREE_OPERAND (_o3[0], 1));
						  }
						if (boolean_type_node != TREE_TYPE (_o3[0])
						    && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o3[0])))
						  {
						    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o3[0]);
						    tem_op.resimplify (lseq, valueize);
						    _r3 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r3) goto next_after_fail2213;
						  }
						else
						  _r3 = _o3[0];
						_o2[0] = _r3;
					      }
					      if (intt != TREE_TYPE (_o2[0])
					          && !useless_type_conversion_p (intt, TREE_TYPE (_o2[0])))
						{
						  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, intt, _o2[0]);
						  tem_op.resimplify (lseq, valueize);
						  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						  if (!_r2) goto next_after_fail2213;
					        }
					      else
					        _r2 = _o2[0];
					      _o1[0] = _r2;
					    }
					    gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
					    tem_op.resimplify (lseq, valueize);
					    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r1) goto next_after_fail2213;
					    res_op->ops[0] = _r1;
					  }
					  res_op->resimplify (lseq, valueize);
					  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1090, __FILE__, __LINE__, true);
					  return true;
					}
next_after_fail2213:;
				    }
				  }
				else
				  {
				    gimple_seq *lseq = seq;
				    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2214;
				    {
				      res_op->set_op (NEGATE_EXPR, type, 1);
				      {
					tree _o1[1], _r1;
					{
					  tree _o2[1], _r2;
					  _o2[0] = captures[0];
					  if (COMPARISON_CLASS_P (_o2[0]))
					    {
					      if (!seq) return false;
					      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
					    }
					  if (boolean_type_node != TREE_TYPE (_o2[0])
					      && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o2[0])))
					    {
					      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o2[0]);
					      tem_op.resimplify (lseq, valueize);
					      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r2) goto next_after_fail2214;
					    }
					  else
					    _r2 = _o2[0];
					  _o1[0] = _r2;
					}
					if (type != TREE_TYPE (_o1[0])
					    && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
					  {
					    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
					    tem_op.resimplify (lseq, valueize);
					    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r1) goto next_after_fail2214;
					  }
					else
					  _r1 = _o1[0];
					res_op->ops[0] = _r1;
				      }
				      res_op->resimplify (lseq, valueize);
				      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1091, __FILE__, __LINE__, true);
				      return true;
				    }
next_after_fail2214:;
				  }
			      }
			  }
			else
			  {
			    if (INTEGRAL_TYPE_P (type) && integer_pow2p (captures[1])
)
			      {
				{
 tree shift = build_int_cst (integer_type_node, tree_log2 (captures[1]));
				    gimple_seq *lseq = seq;
				    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2215;
				    {
				      res_op->set_op (LSHIFT_EXPR, type, 2);
				      {
					tree _o1[1], _r1;
					{
					  tree _o2[1], _r2;
					  _o2[0] = captures[0];
					  if (COMPARISON_CLASS_P (_o2[0]))
					    {
					      if (!seq) return false;
					      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
					    }
					  if (boolean_type_node != TREE_TYPE (_o2[0])
					      && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o2[0])))
					    {
					      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o2[0]);
					      tem_op.resimplify (lseq, valueize);
					      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r2) goto next_after_fail2215;
					    }
					  else
					    _r2 = _o2[0];
					  _o1[0] = _r2;
					}
					if (type != TREE_TYPE (_o1[0])
					    && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
					  {
					    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
					    tem_op.resimplify (lseq, valueize);
					    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					    if (!_r1) goto next_after_fail2215;
					  }
					else
					  _r1 = _o1[0];
					res_op->ops[0] = _r1;
				      }
				      res_op->ops[1] =  shift;
				      res_op->resimplify (lseq, valueize);
				      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1092, __FILE__, __LINE__, true);
				      return true;
				    }
next_after_fail2215:;
				}
			      }
			  }
		      }
		  }
		else
		  {
		    if (integer_zerop (captures[1])
)
		      {
			if (integer_onep (captures[2])
)
			  {
			    gimple_seq *lseq = seq;
			    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2216;
			    {
			      res_op->set_op (NOP_EXPR, type, 1);
			      {
				tree _o1[2], _r1;
				{
				  tree _o2[1], _r2;
				  _o2[0] = captures[0];
				  if (COMPARISON_CLASS_P (_o2[0]))
				    {
				      if (!seq) return false;
				      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
				    }
				  if (boolean_type_node != TREE_TYPE (_o2[0])
				      && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o2[0])))
				    {
				      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o2[0]);
				      tem_op.resimplify (lseq, valueize);
				      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r2) goto next_after_fail2216;
				    }
				  else
				    _r2 = _o2[0];
				  _o1[0] = _r2;
				}
				_o1[1] =  boolean_true_node;
				gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				tem_op.resimplify (lseq, valueize);
				_r1 = maybe_push_res_to_seq (&tem_op, lseq);
				if (!_r1) goto next_after_fail2216;
				res_op->ops[0] = _r1;
			      }
			      res_op->resimplify (lseq, valueize);
			      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1093, __FILE__, __LINE__, true);
			      return true;
			    }
next_after_fail2216:;
			  }
			else
			  {
			    if (INTEGRAL_TYPE_P (type) && integer_all_onesp (captures[2])
)
			      {
				if (TYPE_PRECISION (type) == 1
)
				  {
				    gimple_seq *lseq = seq;
				    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2217;
				    {
				      res_op->set_op (NOP_EXPR, type, 1);
				      {
					tree _o1[2], _r1;
					{
					  tree _o2[1], _r2;
					  _o2[0] = captures[0];
					  if (COMPARISON_CLASS_P (_o2[0]))
					    {
					      if (!seq) return false;
					      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
					    }
					  if (boolean_type_node != TREE_TYPE (_o2[0])
					      && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o2[0])))
					    {
					      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o2[0]);
					      tem_op.resimplify (lseq, valueize);
					      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r2) goto next_after_fail2217;
					    }
					  else
					    _r2 = _o2[0];
					  _o1[0] = _r2;
					}
					_o1[1] =  boolean_true_node;
					gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
					tem_op.resimplify (lseq, valueize);
					_r1 = maybe_push_res_to_seq (&tem_op, lseq);
					if (!_r1) goto next_after_fail2217;
					res_op->ops[0] = _r1;
				      }
				      res_op->resimplify (lseq, valueize);
				      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1094, __FILE__, __LINE__, true);
				      return true;
				    }
next_after_fail2217:;
				  }
				else
				  {
				    if (TREE_CODE (type) == BOOLEAN_TYPE
)
				      {
					{
 tree intt = build_nonstandard_integer_type (TYPE_PRECISION (type),
 TYPE_UNSIGNED (type));
					    gimple_seq *lseq = seq;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2218;
					    {
					      res_op->set_op (NOP_EXPR, type, 1);
					      {
						tree _o1[1], _r1;
						{
						  tree _o2[1], _r2;
						  {
						    tree _o3[2], _r3;
						    {
						      tree _o4[1], _r4;
						      _o4[0] = captures[0];
						      if (COMPARISON_CLASS_P (_o4[0]))
						        {
						          if (!seq) return false;
						          _o4[0] = gimple_build (seq, TREE_CODE (_o4[0]), TREE_TYPE (_o4[0]), TREE_OPERAND (_o4[0], 0), TREE_OPERAND (_o4[0], 1));
						        }
						      if (boolean_type_node != TREE_TYPE (_o4[0])
						          && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o4[0])))
							{
							  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o4[0]);
							  tem_op.resimplify (lseq, valueize);
							  _r4 = maybe_push_res_to_seq (&tem_op, lseq);
							  if (!_r4) goto next_after_fail2218;
						        }
						      else
						        _r4 = _o4[0];
						      _o3[0] = _r4;
						    }
						    _o3[1] =  boolean_true_node;
						    gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
						    tem_op.resimplify (lseq, valueize);
						    _r3 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r3) goto next_after_fail2218;
						    _o2[0] = _r3;
						  }
						  if (intt != TREE_TYPE (_o2[0])
						      && !useless_type_conversion_p (intt, TREE_TYPE (_o2[0])))
						    {
						      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, intt, _o2[0]);
						      tem_op.resimplify (lseq, valueize);
						      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
						      if (!_r2) goto next_after_fail2218;
						    }
						  else
						    _r2 = _o2[0];
						  _o1[0] = _r2;
						}
						gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
						tem_op.resimplify (lseq, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, lseq);
						if (!_r1) goto next_after_fail2218;
						res_op->ops[0] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1095, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2218:;
					}
				      }
				    else
				      {
					gimple_seq *lseq = seq;
					if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2219;
					{
					  res_op->set_op (NEGATE_EXPR, type, 1);
					  {
					    tree _o1[1], _r1;
					    {
					      tree _o2[2], _r2;
					      {
						tree _o3[1], _r3;
						_o3[0] = captures[0];
						if (COMPARISON_CLASS_P (_o3[0]))
						  {
						    if (!seq) return false;
						    _o3[0] = gimple_build (seq, TREE_CODE (_o3[0]), TREE_TYPE (_o3[0]), TREE_OPERAND (_o3[0], 0), TREE_OPERAND (_o3[0], 1));
						  }
						if (boolean_type_node != TREE_TYPE (_o3[0])
						    && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o3[0])))
						  {
						    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o3[0]);
						    tem_op.resimplify (lseq, valueize);
						    _r3 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r3) goto next_after_fail2219;
						  }
						else
						  _r3 = _o3[0];
						_o2[0] = _r3;
					      }
					      _o2[1] =  boolean_true_node;
					      gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
					      tem_op.resimplify (lseq, valueize);
					      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r2) goto next_after_fail2219;
					      _o1[0] = _r2;
					    }
					    if (type != TREE_TYPE (_o1[0])
					        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
					      {
						gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
						tem_op.resimplify (lseq, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, lseq);
						if (!_r1) goto next_after_fail2219;
					      }
					    else
					      _r1 = _o1[0];
					    res_op->ops[0] = _r1;
					  }
					  res_op->resimplify (lseq, valueize);
					  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1096, __FILE__, __LINE__, true);
					  return true;
					}
next_after_fail2219:;
				      }
				  }
			      }
			    else
			      {
				if (INTEGRAL_TYPE_P (type) && integer_pow2p (captures[2])
)
				  {
				    {
 tree shift = build_int_cst (integer_type_node, tree_log2 (captures[2]));
					gimple_seq *lseq = seq;
					if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2220;
					{
					  res_op->set_op (LSHIFT_EXPR, type, 2);
					  {
					    tree _o1[1], _r1;
					    {
					      tree _o2[2], _r2;
					      {
						tree _o3[1], _r3;
						_o3[0] = captures[0];
						if (COMPARISON_CLASS_P (_o3[0]))
						  {
						    if (!seq) return false;
						    _o3[0] = gimple_build (seq, TREE_CODE (_o3[0]), TREE_TYPE (_o3[0]), TREE_OPERAND (_o3[0], 0), TREE_OPERAND (_o3[0], 1));
						  }
						if (boolean_type_node != TREE_TYPE (_o3[0])
						    && !useless_type_conversion_p (boolean_type_node, TREE_TYPE (_o3[0])))
						  {
						    gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, boolean_type_node, _o3[0]);
						    tem_op.resimplify (lseq, valueize);
						    _r3 = maybe_push_res_to_seq (&tem_op, lseq);
						    if (!_r3) goto next_after_fail2220;
						  }
						else
						  _r3 = _o3[0];
						_o2[0] = _r3;
					      }
					      _o2[1] =  boolean_true_node;
					      gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o2[0]), _o2[0], _o2[1]);
					      tem_op.resimplify (lseq, valueize);
					      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					      if (!_r2) goto next_after_fail2220;
					      _o1[0] = _r2;
					    }
					    if (type != TREE_TYPE (_o1[0])
					        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
					      {
						gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
						tem_op.resimplify (lseq, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, lseq);
						if (!_r1) goto next_after_fail2220;
					      }
					    else
					      _r1 = _o1[0];
					    res_op->ops[0] = _r1;
					  }
					  res_op->ops[1] =  shift;
					  res_op->resimplify (lseq, valueize);
					  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1097, __FILE__, __LINE__, true);
					  return true;
					}
next_after_fail2220:;
				    }
				  }
			      }
			  }
		      }
		  }
	      }
	      break;
	    }
          default:;
          }
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_onep (_q21))
		    {
		      if (integer_zerop (_p1))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      CASE_CONVERT:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q60 };
					    if (gimple_simplify_504 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
			    if (gimple_simplify_504 (res_op, seq, valueize, type, captures))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GT_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GT_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case PLUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if (tree_swap_operands_p (_q60, _q61))
							  std::swap (_q60, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GT_EXPR, PLUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    case MINUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GT_EXPR, MINUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GT_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GT_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case PLUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GT_EXPR, PLUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case MINUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GT_EXPR, MINUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, NE_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, NE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
			{
			  switch (TREE_CODE (_q21))
			    {
			    case INTEGER_CST:
			      {
				switch (TREE_CODE (_p1))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p2))
				        {
					case INTEGER_CST:
					  {
					    {
					      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
					      if (gimple_simplify_513 (res_op, seq, valueize, type, captures, NE_EXPR))
					        return true;
					    }
					    break;
					  }
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
			}
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, NE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, NE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_514 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_514 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_515 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_515 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_515 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_515 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      case BIT_IOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MIN_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MIN_EXPR))
						  return true;
					      }
					    }
				        }
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MIN_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MIN_EXPR))
						  return true;
					      }
					    }
				        }
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MAX_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MAX_EXPR))
						  return true;
					      }
					    }
				        }
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MAX_EXPR))
						  return true;
					      }
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MAX_EXPR))
						  return true;
					      }
					    }
				        }
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case MULT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MULT_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      if ((_q81 == _q20 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q20, 0) && types_match (_q81, _q20)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								    if (gimple_simplify_517 (res_op, seq, valueize, type, captures, MULT_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MULT_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      if ((_q81 == _q21 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q21, 0) && types_match (_q81, _q21)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
								    if (gimple_simplify_518 (res_op, seq, valueize, type, captures, MULT_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      case PLUS_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case PLUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      if ((_q81 == _q20 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q20, 0) && types_match (_q81, _q20)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								    if (gimple_simplify_519 (res_op, seq, valueize, type, captures, PLUS_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      case MULT_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      if (uniform_integer_cst_p (_q81))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q81 };
								    if (gimple_simplify_520 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      if (uniform_integer_cst_p (_q81))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q81 };
								    if (gimple_simplify_521 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case PLUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      if ((_q81 == _q21 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q21, 0) && types_match (_q81, _q21)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
								    if (gimple_simplify_522 (res_op, seq, valueize, type, captures, PLUS_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      case MULT_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if (tree_swap_operands_p (_q80, _q81))
							    std::swap (_q80, _q81);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      if (uniform_integer_cst_p (_q81))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q81 };
								    if (gimple_simplify_523 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      if (uniform_integer_cst_p (_q81))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q81 };
								    if (gimple_simplify_524 (res_op, seq, valueize, type, captures))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, EQ_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, EQ_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
			{
			  switch (TREE_CODE (_q21))
			    {
			    case INTEGER_CST:
			      {
				switch (TREE_CODE (_p1))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p2))
				        {
					case INTEGER_CST:
					  {
					    {
					      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
					      if (gimple_simplify_513 (res_op, seq, valueize, type, captures, EQ_EXPR))
					        return true;
					    }
					    break;
					  }
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
			}
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, EQ_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, EQ_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LT_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LT_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case PLUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if (tree_swap_operands_p (_q60, _q61))
							  std::swap (_q60, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LT_EXPR, PLUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    case MINUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LT_EXPR, MINUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LT_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LT_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case PLUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LT_EXPR, PLUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case MINUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LT_EXPR, MINUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LE_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case PLUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if (tree_swap_operands_p (_q60, _q61))
							  std::swap (_q60, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LE_EXPR, PLUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    case MINUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LE_EXPR, MINUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case PLUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LE_EXPR, PLUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case MINUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LE_EXPR, MINUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q21))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GE_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case PLUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if (tree_swap_operands_p (_q60, _q61))
							  std::swap (_q60, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GE_EXPR, PLUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    case MINUS_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							tree _q61 = gimple_assign_rhs2 (_a3);
							_q61 = do_valueize (valueize, _q61);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    switch (TREE_CODE (_q61))
							      {
							      case INTEGER_CST:
							        {
								  switch (TREE_CODE (_p2))
								    {
								    case INTEGER_CST:
								      {
									{
									  tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GE_EXPR, MINUS_EXPR))
									    return true;
									}
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GE_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case INTEGER_CST:
			        {
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				    if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GE_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  }
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case PLUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GE_EXPR, PLUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case MINUS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  switch (TREE_CODE (_p2))
						    {
						    case INTEGER_CST:
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							  if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GE_EXPR, MINUS_EXPR))
							    return true;
							}
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
			      return true;
			  }
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MIN_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case MAX_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      if (tree_swap_operands_p (_q80, _q81))
						        std::swap (_q80, _q81);
						      if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							    if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
					if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case UNLE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case UNLT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case UNGE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case UNGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case UNEQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case LTGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			{
			  tree _q21_pops[1];
			  if (gimple_nop_convert (_q21, _q21_pops, valueize))
			    {
			      tree _q50 = _q21_pops[0];
			      switch (TREE_CODE (_p1))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _p1))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  CASE_CONVERT:
					    {
					      tree _q70 = gimple_assign_rhs1 (_a2);
					      _q70 = do_valueize (valueize, _q70);
					      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							  return true;
						      }
						    }
					        }
					      if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
						{
						  switch (TREE_CODE (_p2))
						    {
						    case SSA_NAME:
						      if (gimple *_d3 = get_def (valueize, _p2))
						        {
							  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							    switch (gimple_assign_rhs_code (_a3))
							      {
							      CASE_CONVERT:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a3);
								  _q90 = do_valueize (valueize, _q90);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
									if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							  return true;
						      }
						    }
					        }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					  return true;
				      }
				    }
			        }
			      if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
				{
				  switch (TREE_CODE (_p2))
				    {
				    case SSA_NAME:
				      if (gimple *_d2 = get_def (valueize, _p2))
				        {
					  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					    switch (gimple_assign_rhs_code (_a2))
					      {
					      CASE_CONVERT:
					        {
						  tree _q80 = gimple_assign_rhs1 (_a2);
						  _q80 = do_valueize (valueize, _q80);
						  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
							if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
					if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					  return true;
				      }
				    }
			        }
}
			}
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					  }
					if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case SSA_NAME:
					        if (gimple *_d3 = get_def (valueize, _p2))
					          {
						    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						      switch (gimple_assign_rhs_code (_a3))
							{
							CASE_CONVERT:
							  {
							    tree _q80 = gimple_assign_rhs1 (_a3);
							    _q80 = do_valueize (valueize, _q80);
							    if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								    return true;
								}
							      }
							    break;
							  }
							default:;
							}
					          }
					        break;
					      default:;
					      }
					    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				  if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				    return true;
				}
			      }
			  }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    switch (TREE_CODE (_p2))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _p2))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						    return true;
						}
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			      {
				{
				  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				  if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				    return true;
				}
			      }
			  }
}
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_p2))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p2))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  CASE_CONVERT:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			      return true;
			  }
		        }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			{
			  {
			    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			    if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case GT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (integer_onep (_q21))
		  {
		    if (integer_zerop (_p1))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    CASE_CONVERT:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q60 };
					  if (gimple_simplify_504 (res_op, seq, valueize, type, captures))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
			  if (gimple_simplify_504 (res_op, seq, valueize, type, captures))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case PLUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if (tree_swap_operands_p (_q60, _q61))
						        std::swap (_q60, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GT_EXPR, PLUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  case MINUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GT_EXPR, MINUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GT_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GT_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GT_EXPR, PLUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case MINUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GT_EXPR, MINUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MIN_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    case MAX_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case NE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		      {
			switch (TREE_CODE (_q21))
			  {
			  case INTEGER_CST:
			    {
			      switch (TREE_CODE (_p1))
			        {
				case INTEGER_CST:
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case INTEGER_CST:
				        {
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
					    if (gimple_simplify_513 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
				    break;
				  }
			        default:;
			        }
			      break;
			    }
		          default:;
		          }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, NE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, NE_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, NE_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, NE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, NE_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, NE_EXPR))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_514 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_514 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    case BIT_XOR_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_515 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_515 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_515 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_515 (res_op, seq, valueize, type, captures))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    case BIT_AND_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    case BIT_IOR_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    case MIN_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MIN_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MIN_EXPR))
					        return true;
					    }
					  }
				      }
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MIN_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MIN_EXPR))
					        return true;
					    }
					  }
				      }
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			        break;
			      }
			    case MAX_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MAX_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MAX_EXPR))
					        return true;
					    }
					  }
				      }
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MAX_EXPR))
					        return true;
					    }
					  }
					if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					      if (gimple_simplify_516 (res_op, seq, valueize, type, captures, MAX_EXPR))
					        return true;
					    }
					  }
				      }
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, NE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			        break;
			      }
			    case MULT_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MULT_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							  {
							    if ((_q81 == _q20 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q20, 0) && types_match (_q81, _q20)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								  if (gimple_simplify_517 (res_op, seq, valueize, type, captures, MULT_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MULT_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							  {
							    if ((_q81 == _q21 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q21, 0) && types_match (_q81, _q21)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
								  if (gimple_simplify_518 (res_op, seq, valueize, type, captures, MULT_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    case PLUS_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case PLUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							  {
							    if ((_q81 == _q20 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q20, 0) && types_match (_q81, _q20)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
								  if (gimple_simplify_519 (res_op, seq, valueize, type, captures, PLUS_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    case MULT_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							  {
							    if (uniform_integer_cst_p (_q81))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q81 };
								  if (gimple_simplify_520 (res_op, seq, valueize, type, captures))
								    return true;
								}
							      }
							  }
							if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							  {
							    if (uniform_integer_cst_p (_q81))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q81 };
								  if (gimple_simplify_521 (res_op, seq, valueize, type, captures))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case PLUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							  {
							    if ((_q81 == _q21 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q21, 0) && types_match (_q81, _q21)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
								  if (gimple_simplify_522 (res_op, seq, valueize, type, captures, PLUS_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    case MULT_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							  {
							    if (uniform_integer_cst_p (_q81))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q81 };
								  if (gimple_simplify_523 (res_op, seq, valueize, type, captures))
								    return true;
								}
							      }
							  }
							if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							  {
							    if (uniform_integer_cst_p (_q81))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q81 };
								  if (gimple_simplify_524 (res_op, seq, valueize, type, captures))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case EQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		      {
			switch (TREE_CODE (_q21))
			  {
			  case INTEGER_CST:
			    {
			      switch (TREE_CODE (_p1))
			        {
				case INTEGER_CST:
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case INTEGER_CST:
				        {
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
					    if (gimple_simplify_513 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
				    break;
				  }
			        default:;
			        }
			      break;
			    }
		          default:;
		          }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, EQ_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, EQ_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, EQ_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, EQ_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, EQ_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case LT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case PLUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if (tree_swap_operands_p (_q60, _q61))
						        std::swap (_q60, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LT_EXPR, PLUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  case MINUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LT_EXPR, MINUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LT_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LT_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LT_EXPR, PLUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case MINUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LT_EXPR, MINUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LT_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GT_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GT_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LT_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LT_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GT_EXPR))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MIN_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GT_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    case MAX_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GT_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LT_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case LE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case PLUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if (tree_swap_operands_p (_q60, _q61))
						        std::swap (_q60, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LE_EXPR, PLUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  case MINUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LE_EXPR, MINUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, LE_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LE_EXPR, PLUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case MINUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_506 (res_op, seq, valueize, type, captures, LE_EXPR, MINUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MIN_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    case MAX_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case GE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				switch (TREE_CODE (_q21))
				  {
				  case INTEGER_CST:
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case PLUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if (tree_swap_operands_p (_q60, _q61))
						        std::swap (_q60, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GE_EXPR, PLUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  case MINUS_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      tree _q61 = gimple_assign_rhs2 (_a2);
						      _q61 = do_valueize (valueize, _q61);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  switch (TREE_CODE (_q61))
							    {
							    case INTEGER_CST:
							      {
								switch (TREE_CODE (_p2))
								  {
								  case INTEGER_CST:
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q21, _q61, _p2 };
									if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GE_EXPR, MINUS_EXPR))
									  return true;
								      }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      break;
				    }
			          default:;
			          }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
						  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GE_EXPR))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case INTEGER_CST:
			      {
				{
				  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p2 };
				  if (gimple_simplify_505 (res_op, seq, valueize, type, captures, GE_EXPR))
				    return true;
				}
			        break;
			      }
			    default:;
			    }
		        }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  case PLUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GE_EXPR, PLUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case MINUS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a1);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						switch (TREE_CODE (_p2))
						  {
						  case INTEGER_CST:
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _p2 };
							if (gimple_simplify_506 (res_op, seq, valueize, type, captures, GE_EXPR, MINUS_EXPR))
							  return true;
						      }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
	          default:;
	          }
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, GE_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LE_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, GE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LE_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, GE_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, GE_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LE_EXPR))
			    return true;
			}
		      }
		  }
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MIN_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MIN_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MIN_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, GE_EXPR, MIN_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    case MAX_EXPR:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				tree _q51 = gimple_assign_rhs2 (_a1);
				_q51 = do_valueize (valueize, _q51);
				if (tree_swap_operands_p (_q50, _q51))
				  std::swap (_q50, _q51);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, GE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q51 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q51, 0) && types_match (_q81, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q51 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q51, 0) && types_match (_q80, _q51)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
				if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case MAX_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    if (tree_swap_operands_p (_q80, _q81))
						      std::swap (_q80, _q81);
						    if ((_q81 == _q50 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q50, 0) && types_match (_q81, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q80 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q81 };
							  if (gimple_simplify_511 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    {
				      tree captures[5] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50, _p2 };
				      if (gimple_simplify_512 (res_op, seq, valueize, type, captures, LE_EXPR, MAX_EXPR))
				        return true;
				    }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case UNLE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case UNLT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case UNGE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLE_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGE_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGE_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLE_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case UNGT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNLT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNGT_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNGT_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNLT_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case UNEQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    case LTGT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		{
		  tree _q20_pops[1];
		  if (gimple_nop_convert (_q20, _q20_pops, valueize))
		    {
		      tree _q30 = _q20_pops[0];
		      {
			tree _q21_pops[1];
			if (gimple_nop_convert (_q21, _q21_pops, valueize))
			  {
			    tree _q50 = _q21_pops[0];
			    switch (TREE_CODE (_p1))
			      {
			      case SSA_NAME:
			        if (gimple *_d1 = get_def (valueize, _p1))
			          {
				    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				      switch (gimple_assign_rhs_code (_a1))
					{
					CASE_CONVERT:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a1);
					    _q70 = do_valueize (valueize, _q70);
					    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						        return true;
						    }
						  }
					      }
					    if ((_q70 == _q50 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q50, 0) && types_match (_q70, _q50)))
					      {
						switch (TREE_CODE (_p2))
						  {
						  case SSA_NAME:
						    if (gimple *_d2 = get_def (valueize, _p2))
						      {
							if (gassign *_a2 = dyn_cast <gassign *> (_d2))
							  switch (gimple_assign_rhs_code (_a2))
							    {
							    CASE_CONVERT:
							      {
								tree _q90 = gimple_assign_rhs1 (_a2);
								_q90 = do_valueize (valueize, _q90);
								if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
								      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
					          default:;
					          }
						if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						        return true;
						    }
						  }
					      }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			    if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q50 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q50, 0) && types_match (_q80, _q50)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q50 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				        return true;
				    }
				  }
			      }
			    if ((_p1 == _q50 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q50, 0) && types_match (_p1, _q50)))
			      {
				switch (TREE_CODE (_p2))
				  {
				  case SSA_NAME:
				    if (gimple *_d1 = get_def (valueize, _p2))
				      {
					if (gassign *_a1 = dyn_cast <gassign *> (_d1))
					  switch (gimple_assign_rhs_code (_a1))
					    {
					    CASE_CONVERT:
					      {
						tree _q80 = gimple_assign_rhs1 (_a1);
						_q80 = do_valueize (valueize, _q80);
						if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
						      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
				if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
				  {
				    {
				      tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _q20, _q30 };
				      if (gimple_simplify_507 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				        return true;
				    }
				  }
			      }
}
		      }
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q21, _q21 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q30 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		{
		  tree _q21_pops[1];
		  if (gimple_nop_convert (_q21, _q21_pops, valueize))
		    {
		      tree _q40 = _q21_pops[0];
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  CASE_CONVERT:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a1);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
								if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d2 = get_def (valueize, _p2))
					        {
						  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						    switch (gimple_assign_rhs_code (_a2))
						      {
						      CASE_CONVERT:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a2);
							  _q80 = do_valueize (valueize, _q80);
							  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
								if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								  return true;
							      }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
					  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
						if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q40, _q20, _q20 };
				if (gimple_simplify_508 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				  return true;
			      }
			    }
		        }
		      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d1 = get_def (valueize, _p2))
			        {
				  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				    switch (gimple_assign_rhs_code (_a1))
				      {
				      CASE_CONVERT:
				        {
					  tree _q70 = gimple_assign_rhs1 (_a1);
					  _q70 = do_valueize (valueize, _q70);
					  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
						if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
			  if ((_p2 == _q40 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q40, 0) && types_match (_p2, _q40)))
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q40 };
				if (gimple_simplify_509 (res_op, seq, valueize, type, captures, LTGT_EXPR))
				  return true;
			      }
			    }
		        }
}
		}
		switch (TREE_CODE (_p1))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _p1))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    CASE_CONVERT:
			      {
				tree _q50 = gimple_assign_rhs1 (_a1);
				_q50 = do_valueize (valueize, _q50);
				if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					    return true;
					}
				      }
				  }
				if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				  {
				    switch (TREE_CODE (_p2))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p2))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						CASE_CONVERT:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						      {
							{
							  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
							  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
							    return true;
							}
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					    return true;
					}
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q21 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q21, 0) && types_match (_p2, _q21)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q20, _q21, _q21 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			    return true;
			}
		      }
		  }
		if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				CASE_CONVERT:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
					  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if ((_p2 == _q20 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q20, 0) && types_match (_p2, _q20)))
		      {
			{
			  tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q21, _q20, _q20 };
			  if (gimple_simplify_510 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			    return true;
			}
		      }
		  }
	      }
	  }
        break;
      }
    default:;
    }
  if (gimple_zero_one_valued_p (_p1, valueize))
    {
      if (gimple_zero_one_valued_p (_p2, valueize))
	{
	  {
	    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _p2 };
	    if (integer_zerop (captures[2])
)
	      {
		gimple_seq *lseq = seq;
		if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2221;
		{
		  res_op->set_op (BIT_AND_EXPR, type, 2);
		  {
		    tree _o1[1], _r1;
		    _o1[0] = captures[0];
		    if (COMPARISON_CLASS_P (_o1[0]))
		      {
		        if (!seq) return false;
		        _o1[0] = gimple_build (seq, TREE_CODE (_o1[0]), TREE_TYPE (_o1[0]), TREE_OPERAND (_o1[0], 0), TREE_OPERAND (_o1[0], 1));
		      }
		    if (type != TREE_TYPE (_o1[0])
		        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
		      {
			gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
			tem_op.resimplify (lseq, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r1) goto next_after_fail2221;
		      }
		    else
		      _r1 = _o1[0];
		    res_op->ops[0] = _r1;
		  }
		  res_op->ops[1] = captures[1];
		  res_op->resimplify (lseq, valueize);
		  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1098, __FILE__, __LINE__, true);
		  return true;
		}
next_after_fail2221:;
	      }
	    else
	      {
		if (integer_zerop (captures[1])
)
		  {
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2222;
		    {
		      res_op->set_op (BIT_AND_EXPR, type, 2);
		      {
			tree _o1[2], _r1;
			{
			  tree _o2[1], _r2;
			  _o2[0] = captures[0];
			  if (COMPARISON_CLASS_P (_o2[0]))
			    {
			      if (!seq) return false;
			      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
			    }
			  if (type != TREE_TYPE (_o2[0])
			      && !useless_type_conversion_p (type, TREE_TYPE (_o2[0])))
			    {
			      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o2[0]);
			      tem_op.resimplify (lseq, valueize);
			      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r2) goto next_after_fail2222;
			    }
			  else
			    _r2 = _o2[0];
			  _o1[0] = _r2;
			}
			_o1[1] =  build_one_cst (type);
			gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			tem_op.resimplify (lseq, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r1) goto next_after_fail2222;
			res_op->ops[0] = _r1;
		      }
		      res_op->ops[1] = captures[2];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1099, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail2222:;
		  }
		else
		  {
		    if (integer_onep (captures[1])
)
		      {
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2223;
			{
			  res_op->set_op (BIT_IOR_EXPR, type, 2);
			  {
			    tree _o1[1], _r1;
			    _o1[0] = captures[0];
			    if (COMPARISON_CLASS_P (_o1[0]))
			      {
			        if (!seq) return false;
			        _o1[0] = gimple_build (seq, TREE_CODE (_o1[0]), TREE_TYPE (_o1[0]), TREE_OPERAND (_o1[0], 0), TREE_OPERAND (_o1[0], 1));
			      }
			    if (type != TREE_TYPE (_o1[0])
			        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
			      {
				gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
				tem_op.resimplify (lseq, valueize);
				_r1 = maybe_push_res_to_seq (&tem_op, lseq);
				if (!_r1) goto next_after_fail2223;
			      }
			    else
			      _r1 = _o1[0];
			    res_op->ops[0] = _r1;
			  }
			  res_op->ops[1] = captures[2];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1100, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2223:;
		      }
		    else
		      {
			if (integer_onep (captures[2])
)
			  {
			    gimple_seq *lseq = seq;
			    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2224;
			    {
			      res_op->set_op (BIT_IOR_EXPR, type, 2);
			      {
				tree _o1[2], _r1;
				{
				  tree _o2[1], _r2;
				  _o2[0] = captures[0];
				  if (COMPARISON_CLASS_P (_o2[0]))
				    {
				      if (!seq) return false;
				      _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
				    }
				  if (type != TREE_TYPE (_o2[0])
				      && !useless_type_conversion_p (type, TREE_TYPE (_o2[0])))
				    {
				      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o2[0]);
				      tem_op.resimplify (lseq, valueize);
				      _r2 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r2) goto next_after_fail2224;
				    }
				  else
				    _r2 = _o2[0];
				  _o1[0] = _r2;
				}
				_o1[1] = captures[2];
				gimple_match_op tem_op (res_op->cond.any_else (), BIT_XOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				tem_op.resimplify (lseq, valueize);
				_r1 = maybe_push_res_to_seq (&tem_op, lseq);
				if (!_r1) goto next_after_fail2224;
				res_op->ops[0] = _r1;
			      }
			      res_op->ops[1] = captures[1];
			      res_op->resimplify (lseq, valueize);
			      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1101, __FILE__, __LINE__, true);
			      return true;
			    }
next_after_fail2224:;
			  }
		      }
		  }
	      }
	  }
        }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case NEGATE_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						    if (gimple_simplify_525 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case BIT_NOT_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						    if (gimple_simplify_526 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case ABS_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						    if (gimple_simplify_527 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    case ABSU_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						    if (gimple_simplify_528 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_onep (_q31))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
							{
							  if (integer_onep (_p2))
							    {
							      {
								tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
								if (gimple_simplify_529 (res_op, seq, valueize, type, captures))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case NE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		switch (TREE_CODE (_q21))
		  {
		  case INTEGER_CST:
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d1 = get_def (valueize, _p1))
			    {
			      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			        switch (gimple_assign_rhs_code (_a1))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_525 (res_op, seq, valueize, type, captures))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case BIT_NOT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_526 (res_op, seq, valueize, type, captures))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case ABS_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_527 (res_op, seq, valueize, type, captures))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  case ABSU_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a1);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_528 (res_op, seq, valueize, type, captures))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
	          default:;
	          }
	      }
	  }
        break;
      }
    case GT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case PLUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (tree_swap_operands_p (_q30, _q31))
				  std::swap (_q30, _q31);
				if (integer_onep (_q31))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case NEGATE_EXPR:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						      {
							if (integer_onep (_p2))
							  {
							    {
							      tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q21, _p2 };
							      if (gimple_simplify_529 (res_op, seq, valueize, type, captures))
							        return true;
							    }
							  }
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q31, _q32, _p2 };
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2225;
			{
			  res_op->set_op (COND_EXPR, type, 3);
			  res_op->ops[0] = captures[0];
			  res_op->ops[0] = unshare_expr (res_op->ops[0]);
			  res_op->ops[1] = captures[1];
			  res_op->ops[2] = captures[3];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1102, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2225:;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p2))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p2))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COND_EXPR:
	        {
		  tree _q40 = gimple_assign_rhs1 (_a1);
		  _q40 = do_valueize (valueize, _q40);
		  tree _q41 = gimple_assign_rhs2 (_a1);
		  _q41 = do_valueize (valueize, _q41);
		  tree _q42 = gimple_assign_rhs3 (_a1);
		  _q42 = do_valueize (valueize, _q42);
		  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p1, _q41, _q42 };
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2226;
			{
			  res_op->set_op (COND_EXPR, type, 3);
			  res_op->ops[0] = captures[0];
			  res_op->ops[0] = unshare_expr (res_op->ops[0]);
			  res_op->ops[1] = captures[1];
			  res_op->ops[2] = captures[3];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1103, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2226:;
		      }
		    }
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q40, _q41, _q42 };
		    if (inverse_conditions_p (captures[0], captures[2])
)
		      {
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2227;
			{
			  res_op->set_op (COND_EXPR, type, 3);
			  res_op->ops[0] = captures[0];
			  res_op->ops[0] = unshare_expr (res_op->ops[0]);
			  res_op->ops[1] = captures[1];
			  res_op->ops[2] = captures[3];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1104, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2227:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q30, _q31, _q32, _p2 };
		    if (inverse_conditions_p (captures[0], captures[1])
)
		      {
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2228;
			{
			  res_op->set_op (COND_EXPR, type, 3);
			  res_op->ops[0] = captures[0];
			  res_op->ops[0] = unshare_expr (res_op->ops[0]);
			  res_op->ops[1] = captures[3];
			  res_op->ops[2] = captures[4];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1105, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2228:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  if ((_p2 == _p1 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _p1, 0) && types_match (_p2, _p1)))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	gimple_seq *lseq = seq;
	if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2229;
	{
	  tree tem;
	  tem = captures[1];
	  res_op->set_value (tem);
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1106, __FILE__, __LINE__, true);
	  return true;
	}
next_after_fail2229:;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					    if (gimple_simplify_530 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if (zerop (_p1))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case NEGATE_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p2, _q60 };
					    if (gimple_simplify_531 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								    if (gimple_simplify_532 (res_op, seq, valueize, type, captures, EQ_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if (integer_zerop (_q21))
				    {
				      if (integer_zerop (_p1))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								    if (gimple_simplify_533 (res_op, seq, valueize, type, captures, EQ_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case UNEQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					    if (gimple_simplify_534 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      if (zerop (_p1))
			{
			  switch (TREE_CODE (_p2))
			    {
			    case SSA_NAME:
			      if (gimple *_d2 = get_def (valueize, _p2))
			        {
				  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				    switch (gimple_assign_rhs_code (_a2))
				      {
				      case NEGATE_EXPR:
				        {
					  tree _q60 = gimple_assign_rhs1 (_a2);
					  _q60 = do_valueize (valueize, _q60);
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p2, _q60 };
					    if (gimple_simplify_535 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					      return true;
					  }
				          break;
				        }
				      default:;
				      }
			        }
			      break;
			    default:;
			    }
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								    if (gimple_simplify_536 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if (integer_zerop (_q21))
				    {
				      if (integer_zerop (_p1))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								    if (gimple_simplify_533 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_537 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    if (integer_zerop (_p2))
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  if (gimple_simplify_538 (res_op, seq, valueize, type, captures, NE_EXPR))
			    return true;
			}
		      }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_539 (res_op, seq, valueize, type, captures, NE_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if (integer_zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
						if (gimple_simplify_540 (res_op, seq, valueize, type, captures, NE_EXPR))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_pow2p (_q31))
				    {
				      if (integer_zerop (_q21))
					{
					  switch (TREE_CODE (_p1))
					    {
					    case INTEGER_CST:
					      {
						if (integer_zerop (_p2))
						  {
						    {
						      tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p1 };
						      if (gimple_simplify_541 (res_op, seq, valueize, type, captures))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LTGT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_542 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    if (integer_zerop (_p2))
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			  if (gimple_simplify_543 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			    return true;
			}
		      }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_544 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
				  if (integer_zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
						if (gimple_simplify_540 (res_op, seq, valueize, type, captures, LTGT_EXPR))
						  return true;
					      }
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_545 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_546 (res_op, seq, valueize, type, captures, GE_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_NOT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					    if (gimple_simplify_547 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_NOT_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_548 (res_op, seq, valueize, type, captures, GE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_549 (res_op, seq, valueize, type, captures, GT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_550 (res_op, seq, valueize, type, captures, GT_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_551 (res_op, seq, valueize, type, captures, LE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_552 (res_op, seq, valueize, type, captures, LE_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (zerop (_q21))
		    {
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_553 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q21))
				    {
				      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case SSA_NAME:
					      if (gimple *_d3 = get_def (valueize, _p2))
					        {
						  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						    switch (gimple_assign_rhs_code (_a3))
						      {
						      case MINUS_EXPR:
						        {
							  tree _q80 = gimple_assign_rhs1 (_a3);
							  _q80 = do_valueize (valueize, _q80);
							  tree _q81 = gimple_assign_rhs2 (_a3);
							  _q81 = do_valueize (valueize, _q81);
							  if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							    {
							      if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
								{
								  {
								    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								    if (gimple_simplify_554 (res_op, seq, valueize, type, captures, LT_EXPR))
								      return true;
								  }
							        }
							    }
						          break;
						        }
						      default:;
						      }
					        }
					      break;
					    default:;
					    }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_NOT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					    if (gimple_simplify_547 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_p2))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p2))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_NOT_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					    if (gimple_simplify_548 (res_op, seq, valueize, type, captures, LT_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_p1))
		        {
			case INTEGER_CST:
			  {
			    if (integer_zerop (_p2))
			      {
				{
				  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
				  if (gimple_simplify_555 (res_op, seq, valueize, type, captures))
				    return true;
				}
			      }
			    break;
			  }
		        default:;
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case EQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					  if (gimple_simplify_530 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if (zerop (_p1))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case NEGATE_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p2, _q60 };
					  if (gimple_simplify_531 (res_op, seq, valueize, type, captures, EQ_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								  if (gimple_simplify_532 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if (integer_zerop (_q21))
				  {
				    if (integer_zerop (_p1))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								  if (gimple_simplify_533 (res_op, seq, valueize, type, captures, EQ_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case UNEQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
					  if (gimple_simplify_534 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    if (zerop (_p1))
		      {
			switch (TREE_CODE (_p2))
			  {
			  case SSA_NAME:
			    if (gimple *_d1 = get_def (valueize, _p2))
			      {
				if (gassign *_a1 = dyn_cast <gassign *> (_d1))
				  switch (gimple_assign_rhs_code (_a1))
				    {
				    case NEGATE_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a1);
					_q60 = do_valueize (valueize, _q60);
					{
					  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p2, _q60 };
					  if (gimple_simplify_535 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								  if (gimple_simplify_536 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if (integer_zerop (_q21))
				  {
				    if (integer_zerop (_p1))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _p2 };
								  if (gimple_simplify_533 (res_op, seq, valueize, type, captures, UNEQ_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case NE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_537 (res_op, seq, valueize, type, captures, NE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  if (integer_zerop (_p2))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			if (gimple_simplify_538 (res_op, seq, valueize, type, captures, NE_EXPR))
			  return true;
		      }
		    }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_539 (res_op, seq, valueize, type, captures, NE_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if (integer_zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
					      if (gimple_simplify_540 (res_op, seq, valueize, type, captures, NE_EXPR))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    case BIT_AND_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (tree_swap_operands_p (_q30, _q31))
				  std::swap (_q30, _q31);
				if (integer_pow2p (_q31))
				  {
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case INTEGER_CST:
					    {
					      if (integer_zerop (_p2))
						{
						  {
						    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p1 };
						    if (gimple_simplify_541 (res_op, seq, valueize, type, captures))
						      return true;
						  }
					        }
					      break;
					    }
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case LTGT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_542 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  if (integer_zerop (_p2))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
			if (gimple_simplify_543 (res_op, seq, valueize, type, captures, LTGT_EXPR))
			  return true;
		      }
		    }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_544 (res_op, seq, valueize, type, captures, LTGT_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				if (integer_zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					if (integer_zerop (_p2))
					  {
					    {
					      tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
					      if (gimple_simplify_540 (res_op, seq, valueize, type, captures, LTGT_EXPR))
					        return true;
					    }
					  }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case GE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_545 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_546 (res_op, seq, valueize, type, captures, GE_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p1))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case BIT_NOT_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					  if (gimple_simplify_547 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case BIT_NOT_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_548 (res_op, seq, valueize, type, captures, GE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
	      }
	  }
        break;
      }
    case GT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_549 (res_op, seq, valueize, type, captures, GT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_550 (res_op, seq, valueize, type, captures, GT_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case LE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_551 (res_op, seq, valueize, type, captures, LE_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_552 (res_op, seq, valueize, type, captures, LE_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    case LT_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (zerop (_q21))
		  {
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case NEGATE_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_553 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			  switch (gimple_assign_rhs_code (_a1))
			    {
			    case MINUS_EXPR:
			      {
				tree _q30 = gimple_assign_rhs1 (_a1);
				_q30 = do_valueize (valueize, _q30);
				tree _q31 = gimple_assign_rhs2 (_a1);
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q21))
				  {
				    if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
				      {
					switch (TREE_CODE (_p2))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _p2))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MINUS_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
							  {
							    if ((_q81 == _q30 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q30, 0) && types_match (_q81, _q30)))
							      {
								{
								  tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q31 };
								  if (gimple_simplify_554 (res_op, seq, valueize, type, captures, LT_EXPR))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
			        break;
			      }
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p1))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case BIT_NOT_EXPR:
				  {
				    tree _q50 = gimple_assign_rhs1 (_a1);
				    _q50 = do_valueize (valueize, _q50);
				    if ((_p2 == _q50 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q50, 0) && types_match (_p2, _q50)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					  if (gimple_simplify_547 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    switch (TREE_CODE (_p2))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p2))
		          {
			    if (gassign *_a1 = dyn_cast <gassign *> (_d1))
			      switch (gimple_assign_rhs_code (_a1))
				{
				case BIT_NOT_EXPR:
				  {
				    tree _q60 = gimple_assign_rhs1 (_a1);
				    _q60 = do_valueize (valueize, _q60);
				    if ((_q60 == _p1 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _p1, 0) && types_match (_q60, _p1)))
				      {
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
					  if (gimple_simplify_548 (res_op, seq, valueize, type, captures, LT_EXPR))
					    return true;
					}
				      }
				    break;
				  }
				default:;
				}
		          }
		        break;
		      default:;
		      }
		    switch (TREE_CODE (_p1))
		      {
		      case INTEGER_CST:
		        {
			  if (integer_zerop (_p2))
			    {
			      {
				tree captures[2] ATTRIBUTE_UNUSED = { _q20, _p1 };
				if (gimple_simplify_555 (res_op, seq, valueize, type, captures))
				  return true;
			      }
			    }
		          break;
		        }
		      default:;
		      }
		  }
	      }
	  }
        break;
      }
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_logical_inverted_value (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      if (gimple_truth_valued_p (_q20, valueize))
	{
	  {
	    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _p2 };
	    if (COND_EXPR == VEC_COND_EXPR
 || TYPE_UNSIGNED (TREE_TYPE (captures[0]))
)
	      {
		gimple_seq *lseq = seq;
		if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2230;
		{
		  res_op->set_op (COND_EXPR, type, 3);
		  res_op->ops[0] = captures[0];
		  res_op->ops[1] = captures[2];
		  res_op->ops[2] = captures[1];
		  res_op->resimplify (lseq, valueize);
		  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1107, __FILE__, __LINE__, true);
		  return true;
		}
next_after_fail2230:;
	      }
	  }
        }
}
}
  {
    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _p2 };
    {
 bool wascmp;
	if (INTEGRAL_TYPE_P (type)
 && TYPE_UNSIGNED (TREE_TYPE (captures[0]))
 && bitwise_inverted_equal_p (captures[1], captures[2], wascmp)
 && (!wascmp || TYPE_PRECISION (type) == 1)
)
	  {
	    if ((!TYPE_UNSIGNED (type) && TREE_CODE (type) == BOOLEAN_TYPE)
 || TYPE_PRECISION (type) == 1
)
	      {
		gimple_seq *lseq = seq;
		if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2231;
		{
		  res_op->set_op (BIT_XOR_EXPR, type, 2);
		  {
		    tree _o1[1], _r1;
		    _o1[0] = captures[0];
		    if (COMPARISON_CLASS_P (_o1[0]))
		      {
		        if (!seq) return false;
		        _o1[0] = gimple_build (seq, TREE_CODE (_o1[0]), TREE_TYPE (_o1[0]), TREE_OPERAND (_o1[0], 0), TREE_OPERAND (_o1[0], 1));
		      }
		    if (type != TREE_TYPE (_o1[0])
		        && !useless_type_conversion_p (type, TREE_TYPE (_o1[0])))
		      {
			gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o1[0]);
			tem_op.resimplify (lseq, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r1) goto next_after_fail2231;
		      }
		    else
		      _r1 = _o1[0];
		    res_op->ops[0] = _r1;
		  }
		  res_op->ops[1] = captures[2];
		  res_op->resimplify (lseq, valueize);
		  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1108, __FILE__, __LINE__, true);
		  return true;
		}
next_after_fail2231:;
	      }
	    else
	      {
		gimple_seq *lseq = seq;
		if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2232;
		{
		  res_op->set_op (BIT_XOR_EXPR, type, 2);
		  {
		    tree _o1[1], _r1;
		    {
		      tree _o2[1], _r2;
		      _o2[0] = captures[0];
		      if (COMPARISON_CLASS_P (_o2[0]))
		        {
		          if (!seq) return false;
		          _o2[0] = gimple_build (seq, TREE_CODE (_o2[0]), TREE_TYPE (_o2[0]), TREE_OPERAND (_o2[0], 0), TREE_OPERAND (_o2[0], 1));
		        }
		      if (type != TREE_TYPE (_o2[0])
		          && !useless_type_conversion_p (type, TREE_TYPE (_o2[0])))
			{
			  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type, _o2[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r2) goto next_after_fail2232;
		        }
		      else
		        _r2 = _o2[0];
		      _o1[0] = _r2;
		    }
		    gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
		    tem_op.resimplify (lseq, valueize);
		    _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		    if (!_r1) goto next_after_fail2232;
		    res_op->ops[0] = _r1;
		  }
		  res_op->ops[1] = captures[2];
		  res_op->resimplify (lseq, valueize);
		  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1109, __FILE__, __LINE__, true);
		  return true;
		}
next_after_fail2232:;
	      }
	  }
    }
  }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			    switch (gimple_call_combined_fn (_c2))
			      {
			      case CFN_BUILT_IN_SIGNBITF:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_556 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBITF))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_BUILT_IN_SIGNBITL:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_556 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBITL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_SIGNBIT:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_556 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_SIGNBIT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_BUILT_IN_SIGNBIT:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_556 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBIT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			        switch (gimple_call_combined_fn (_c2))
				  {
				  case CFN_PARITY:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_PARITY))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_PARITY))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLZ:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_560 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZ))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_561 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZ))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CTZ:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_564 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZ))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_565 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZ))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_FFS:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFS))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFS))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_FFSIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSIMAX))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSIMAX))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_POPCOUNT:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNT))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_PARITYL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLZL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_560 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_561 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CTZL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_564 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_565 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_FFSL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_POPCOUNTLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTLL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTLL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CTZIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_564 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZIMAX))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_565 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZIMAX))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_POPCOUNT:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_POPCOUNT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_POPCOUNT))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_PARITYIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYIMAX))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYIMAX))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLRSBL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								    if (gimple_simplify_558 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						    if (gimple_simplify_559 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_CLZ:
				    if (gimple_call_num_args (_c2) == 2)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_call_arg (_c2, 1);
					_q51 = do_valueize (valueize, _q51);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_q51))
							      {
							      case INTEGER_CST:
							        {
								  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
									if (gimple_simplify_562 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
							if (gimple_simplify_563 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_560 (res_op, seq, valueize, type, captures, CFN_CLZ))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_561 (res_op, seq, valueize, type, captures, CFN_CLZ))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_CTZ:
				    if (gimple_call_num_args (_c2) == 2)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_call_arg (_c2, 1);
					_q51 = do_valueize (valueize, _q51);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_q51))
							      {
							      case INTEGER_CST:
							        {
								  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
									if (gimple_simplify_566 (res_op, seq, valueize, type, captures))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
							if (gimple_simplify_567 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_564 (res_op, seq, valueize, type, captures, CFN_CTZ))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_565 (res_op, seq, valueize, type, captures, CFN_CTZ))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_FFS:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_FFS))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_FFS))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_PARITY:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_POPCOUNTIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTIMAX))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTIMAX))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLRSBIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								    if (gimple_simplify_558 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBIMAX))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						    if (gimple_simplify_559 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBIMAX))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLRSBLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								    if (gimple_simplify_558 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBLL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						    if (gimple_simplify_559 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBLL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLZIMAX:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_560 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZIMAX))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_561 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZIMAX))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_CLRSB:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								    if (gimple_simplify_558 (res_op, seq, valueize, type, captures, CFN_CLRSB))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						    if (gimple_simplify_559 (res_op, seq, valueize, type, captures, CFN_CLRSB))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_BSWAP128:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_POPCOUNTL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLRSB:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								    if (gimple_simplify_558 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSB))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						    if (gimple_simplify_559 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSB))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CLZLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_560 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZLL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_561 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZLL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_CTZLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    switch (TREE_CODE (_p2))
							      {
							      case INTEGER_CST:
							        {
								  {
								    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								    if (gimple_simplify_564 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_p2))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						    if (gimple_simplify_565 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_FFSLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSLL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSLL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_PARITYLL:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYLL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYLL))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_BSWAP16:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_BSWAP32:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  case CFN_BUILT_IN_BSWAP64:
				    if (gimple_call_num_args (_c2) == 1)
				      {
					tree _q50 = gimple_call_arg (_c2, 0);
					_q50 = do_valueize (valueize, _q50);
					switch (TREE_CODE (_q50))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _q50))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    CASE_CONVERT:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							  {
							    if (integer_zerop (_p2))
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    if (integer_zerop (_p2))
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						  if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64))
						    return true;
						}
					      }
					  }
				      }
				    break;
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			    switch (gimple_call_combined_fn (_c2))
			      {
			      case CFN_BUILT_IN_SIGNBITF:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_556 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBITF))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_BUILT_IN_SIGNBITL:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_556 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBITL))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_SIGNBIT:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_556 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_SIGNBIT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      case CFN_BUILT_IN_SIGNBIT:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    if (integer_zerop (_q21))
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case NEGATE_EXPR:
						      {
							tree _q60 = gimple_assign_rhs1 (_a3);
							_q60 = do_valueize (valueize, _q60);
							if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							  {
							    if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							      {
								{
								  tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								  if (gimple_simplify_556 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBIT))
								    return true;
								}
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
			          }
			        break;
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    case NE_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gcall *_c1 = dyn_cast <gcall *> (_d1))
			  switch (gimple_call_combined_fn (_c1))
			    {
			    case CFN_BUILT_IN_SIGNBITF:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_556 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBITF))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_BUILT_IN_SIGNBITL:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_556 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBITL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_SIGNBIT:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_556 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_SIGNBIT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_BUILT_IN_SIGNBIT:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_556 (res_op, seq, valueize, type, captures, NE_EXPR, CFN_BUILT_IN_SIGNBIT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
		if (integer_zerop (_q21))
		  {
		    switch (TREE_CODE (_p1))
		      {
		      case SSA_NAME:
		        if (gimple *_d1 = get_def (valueize, _p1))
		          {
			    if (gcall *_c1 = dyn_cast <gcall *> (_d1))
			      switch (gimple_call_combined_fn (_c1))
				{
				case CFN_PARITY:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_PARITY))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_PARITY))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLZ:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_560 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZ))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_561 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZ))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CTZ:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_564 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZ))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_565 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZ))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_FFS:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFS))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFS))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_FFSIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSIMAX))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSIMAX))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_POPCOUNT:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNT))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_PARITYL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLZL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_560 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_561 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CTZL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_564 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_565 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_FFSL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_POPCOUNTLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTLL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTLL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CTZIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_564 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZIMAX))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_565 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZIMAX))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_POPCOUNT:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_POPCOUNT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_POPCOUNT))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_PARITYIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYIMAX))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYIMAX))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLRSBL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								  if (gimple_simplify_558 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						  if (gimple_simplify_559 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_CLZ:
				  if (gimple_call_num_args (_c1) == 2)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_call_arg (_c1, 1);
				      _q51 = do_valueize (valueize, _q51);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_q51))
							    {
							    case INTEGER_CST:
							      {
								if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
								      if (gimple_simplify_562 (res_op, seq, valueize, type, captures))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
						      if (gimple_simplify_563 (res_op, seq, valueize, type, captures))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_560 (res_op, seq, valueize, type, captures, CFN_CLZ))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_561 (res_op, seq, valueize, type, captures, CFN_CLZ))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_CTZ:
				  if (gimple_call_num_args (_c1) == 2)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_call_arg (_c1, 1);
				      _q51 = do_valueize (valueize, _q51);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_q51))
							    {
							    case INTEGER_CST:
							      {
								if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
								  {
								    {
								      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
								      if (gimple_simplify_566 (res_op, seq, valueize, type, captures))
								        return true;
								    }
								  }
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_q51))
					    {
					    case INTEGER_CST:
					      {
						if ((_p2 == _q51 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q51, 0) && types_match (_p2, _q51)))
						  {
						    {
						      tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
						      if (gimple_simplify_567 (res_op, seq, valueize, type, captures))
						        return true;
						    }
						  }
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_564 (res_op, seq, valueize, type, captures, CFN_CTZ))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_565 (res_op, seq, valueize, type, captures, CFN_CTZ))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_FFS:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_FFS))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_FFS))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_PARITY:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_POPCOUNTIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTIMAX))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTIMAX))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLRSBIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								  if (gimple_simplify_558 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBIMAX))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						  if (gimple_simplify_559 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBIMAX))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLRSBLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								  if (gimple_simplify_558 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBLL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						  if (gimple_simplify_559 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSBLL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLZIMAX:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_560 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZIMAX))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_561 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZIMAX))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_CLRSB:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								  if (gimple_simplify_558 (res_op, seq, valueize, type, captures, CFN_CLRSB))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						  if (gimple_simplify_559 (res_op, seq, valueize, type, captures, CFN_CLRSB))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_BSWAP128:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_POPCOUNTL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_POPCOUNTL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLRSB:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
								  if (gimple_simplify_558 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSB))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[5] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50, _p2 };
						  if (gimple_simplify_559 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLRSB))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CLZLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_560 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZLL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_561 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CLZLL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_CTZLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  switch (TREE_CODE (_p2))
							    {
							    case INTEGER_CST:
							      {
								{
								  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
								  if (gimple_simplify_564 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
								    return true;
								}
							        break;
							      }
							    default:;
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  switch (TREE_CODE (_p2))
					    {
					    case INTEGER_CST:
					      {
						{
						  tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _p2 };
						  if (gimple_simplify_565 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
						    return true;
						}
					        break;
					      }
					    default:;
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_FFSLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSLL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSLL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_PARITYLL:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYLL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITYLL))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_BSWAP16:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_BSWAP32:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				case CFN_BUILT_IN_BSWAP64:
				  if (gimple_call_num_args (_c1) == 1)
				    {
				      tree _q50 = gimple_call_arg (_c1, 0);
				      _q50 = do_valueize (valueize, _q50);
				      switch (TREE_CODE (_q50))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _q50))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  CASE_CONVERT:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
							{
							  if (integer_zerop (_p2))
							    {
							      {
								tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
								if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  if (integer_zerop (_p2))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _p2 };
						if (gimple_simplify_557 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64))
						  return true;
					      }
					    }
				        }
				    }
				  break;
				default:;
				}
		          }
		        break;
		      default:;
		      }
		  }
	      }
	  }
        break;
      }
    case EQ_EXPR:
      {
	tree _q20 = TREE_OPERAND (_p0, 0);
	if ((TREE_CODE (_q20) == SSA_NAME
	     || is_gimple_min_invariant (_q20)))
	  {
	    _q20 = do_valueize (valueize, _q20);
	    tree _q21 = TREE_OPERAND (_p0, 1);
	    if ((TREE_CODE (_q21) == SSA_NAME
	         || is_gimple_min_invariant (_q21)))
	      {
		_q21 = do_valueize (valueize, _q21);
		if (tree_swap_operands_p (_q20, _q21))
		  std::swap (_q20, _q21);
		switch (TREE_CODE (_q20))
		  {
		  case SSA_NAME:
		    if (gimple *_d1 = get_def (valueize, _q20))
		      {
			if (gcall *_c1 = dyn_cast <gcall *> (_d1))
			  switch (gimple_call_combined_fn (_c1))
			    {
			    case CFN_BUILT_IN_SIGNBITF:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_556 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBITF))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_BUILT_IN_SIGNBITL:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_556 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBITL))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_SIGNBIT:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_556 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_SIGNBIT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    case CFN_BUILT_IN_SIGNBIT:
			      if (gimple_call_num_args (_c1) == 1)
			        {
				  tree _q30 = gimple_call_arg (_c1, 0);
				  _q30 = do_valueize (valueize, _q30);
				  if (integer_zerop (_q21))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d2 = get_def (valueize, _p1))
					    {
					      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					        switch (gimple_assign_rhs_code (_a2))
						  {
						  case NEGATE_EXPR:
						    {
						      tree _q60 = gimple_assign_rhs1 (_a2);
						      _q60 = do_valueize (valueize, _q60);
						      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
							{
							  if ((_p2 == _q30 && ! TREE_SIDE_EFFECTS (_p2)) || (operand_equal_p (_p2, _q30, 0) && types_match (_p2, _q30)))
							    {
							      {
								tree captures[1] ATTRIBUTE_UNUSED = { _q30 };
								if (gimple_simplify_556 (res_op, seq, valueize, type, captures, EQ_EXPR, CFN_BUILT_IN_SIGNBIT))
								  return true;
							      }
							    }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			        }
			      break;
			    default:;
			    }
		      }
		    break;
	          default:;
	          }
	      }
	  }
        break;
      }
    default:;
    }
  return false;
}
#pragma GCC diagnostic pop
